import * as $protobuf from "protobufjs";
/** Namespace anytype. */
export namespace anytype {

    /** Properties of a Rpc. */
    interface IRpc {
    }

    /** Represents a Rpc. */
    class Rpc implements IRpc {

        /**
         * Constructs a new Rpc.
         * @param [properties] Properties to set
         */
        constructor(properties?: anytype.IRpc);

        /**
         * Creates a new Rpc instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Rpc instance
         */
        public static create(properties?: anytype.IRpc): anytype.Rpc;

        /**
         * Encodes the specified Rpc message. Does not implicitly {@link anytype.Rpc.verify|verify} messages.
         * @param message Rpc message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: anytype.IRpc, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified Rpc message, length delimited. Does not implicitly {@link anytype.Rpc.verify|verify} messages.
         * @param message Rpc message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: anytype.IRpc, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a Rpc message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Rpc
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc;

        /**
         * Decodes a Rpc message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Rpc
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc;

        /**
         * Verifies a Rpc message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a Rpc message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Rpc
         */
        public static fromObject(object: { [k: string]: any }): anytype.Rpc;

        /**
         * Creates a plain object from a Rpc message. Also converts values to other types if specified.
         * @param message Rpc
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: anytype.Rpc, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this Rpc to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    namespace Rpc {

        /** Properties of an ExternalDrop. */
        interface IExternalDrop {
        }

        /** Represents an ExternalDrop. */
        class ExternalDrop implements IExternalDrop {

            /**
             * Constructs a new ExternalDrop.
             * @param [properties] Properties to set
             */
            constructor(properties?: anytype.Rpc.IExternalDrop);

            /**
             * Creates a new ExternalDrop instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ExternalDrop instance
             */
            public static create(properties?: anytype.Rpc.IExternalDrop): anytype.Rpc.ExternalDrop;

            /**
             * Encodes the specified ExternalDrop message. Does not implicitly {@link anytype.Rpc.ExternalDrop.verify|verify} messages.
             * @param message ExternalDrop message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: anytype.Rpc.IExternalDrop, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ExternalDrop message, length delimited. Does not implicitly {@link anytype.Rpc.ExternalDrop.verify|verify} messages.
             * @param message ExternalDrop message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: anytype.Rpc.IExternalDrop, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an ExternalDrop message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ExternalDrop
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.ExternalDrop;

            /**
             * Decodes an ExternalDrop message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ExternalDrop
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.ExternalDrop;

            /**
             * Verifies an ExternalDrop message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an ExternalDrop message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ExternalDrop
             */
            public static fromObject(object: { [k: string]: any }): anytype.Rpc.ExternalDrop;

            /**
             * Creates a plain object from an ExternalDrop message. Also converts values to other types if specified.
             * @param message ExternalDrop
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: anytype.Rpc.ExternalDrop, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ExternalDrop to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace ExternalDrop {

            /** Properties of a Files. */
            interface IFiles {
            }

            /** Represents a Files. */
            class Files implements IFiles {

                /**
                 * Constructs a new Files.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.ExternalDrop.IFiles);

                /**
                 * Creates a new Files instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Files instance
                 */
                public static create(properties?: anytype.Rpc.ExternalDrop.IFiles): anytype.Rpc.ExternalDrop.Files;

                /**
                 * Encodes the specified Files message. Does not implicitly {@link anytype.Rpc.ExternalDrop.Files.verify|verify} messages.
                 * @param message Files message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.ExternalDrop.IFiles, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Files message, length delimited. Does not implicitly {@link anytype.Rpc.ExternalDrop.Files.verify|verify} messages.
                 * @param message Files message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.ExternalDrop.IFiles, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Files message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Files
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.ExternalDrop.Files;

                /**
                 * Decodes a Files message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Files
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.ExternalDrop.Files;

                /**
                 * Verifies a Files message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Files message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Files
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.ExternalDrop.Files;

                /**
                 * Creates a plain object from a Files message. Also converts values to other types if specified.
                 * @param message Files
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.ExternalDrop.Files, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Files to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Files {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request contextId */
                    contextId?: (string|null);

                    /** Request focusedBlockId */
                    focusedBlockId?: (string|null);

                    /** Request localFilePaths */
                    localFilePaths?: (string[]|null);
                }

                /** Represents a Request. */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.ExternalDrop.Files.IRequest);

                    /** Request contextId. */
                    public contextId: string;

                    /** Request focusedBlockId. */
                    public focusedBlockId: string;

                    /** Request localFilePaths. */
                    public localFilePaths: string[];

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.ExternalDrop.Files.IRequest): anytype.Rpc.ExternalDrop.Files.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.ExternalDrop.Files.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.ExternalDrop.Files.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.ExternalDrop.Files.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.ExternalDrop.Files.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.ExternalDrop.Files.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.ExternalDrop.Files.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.ExternalDrop.Files.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.ExternalDrop.Files.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.ExternalDrop.Files.Response.IError|null);
                }

                /** Represents a Response. */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.ExternalDrop.Files.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.ExternalDrop.Files.Response.IError|null);

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.ExternalDrop.Files.IResponse): anytype.Rpc.ExternalDrop.Files.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.ExternalDrop.Files.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.ExternalDrop.Files.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.ExternalDrop.Files.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.ExternalDrop.Files.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.ExternalDrop.Files.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.ExternalDrop.Files.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.ExternalDrop.Files.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.ExternalDrop.Files.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.ExternalDrop.Files.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.ExternalDrop.Files.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.ExternalDrop.Files.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.ExternalDrop.Files.Response.IError): anytype.Rpc.ExternalDrop.Files.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.ExternalDrop.Files.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.ExternalDrop.Files.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.ExternalDrop.Files.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.ExternalDrop.Files.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.ExternalDrop.Files.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.ExternalDrop.Files.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.ExternalDrop.Files.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.ExternalDrop.Files.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2
                        }
                    }
                }
            }

            /** Properties of a Content. */
            interface IContent {
            }

            /** Represents a Content. */
            class Content implements IContent {

                /**
                 * Constructs a new Content.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.ExternalDrop.IContent);

                /**
                 * Creates a new Content instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Content instance
                 */
                public static create(properties?: anytype.Rpc.ExternalDrop.IContent): anytype.Rpc.ExternalDrop.Content;

                /**
                 * Encodes the specified Content message. Does not implicitly {@link anytype.Rpc.ExternalDrop.Content.verify|verify} messages.
                 * @param message Content message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.ExternalDrop.IContent, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Content message, length delimited. Does not implicitly {@link anytype.Rpc.ExternalDrop.Content.verify|verify} messages.
                 * @param message Content message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.ExternalDrop.IContent, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Content message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Content
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.ExternalDrop.Content;

                /**
                 * Decodes a Content message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Content
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.ExternalDrop.Content;

                /**
                 * Verifies a Content message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Content message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Content
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.ExternalDrop.Content;

                /**
                 * Creates a plain object from a Content message. Also converts values to other types if specified.
                 * @param message Content
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.ExternalDrop.Content, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Content to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Content {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request contextId */
                    contextId?: (string|null);

                    /** Request focusedBlockId */
                    focusedBlockId?: (string|null);

                    /** Request content */
                    content?: (Uint8Array|null);
                }

                /** Represents a Request. */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.ExternalDrop.Content.IRequest);

                    /** Request contextId. */
                    public contextId: string;

                    /** Request focusedBlockId. */
                    public focusedBlockId: string;

                    /** Request content. */
                    public content: Uint8Array;

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.ExternalDrop.Content.IRequest): anytype.Rpc.ExternalDrop.Content.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.ExternalDrop.Content.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.ExternalDrop.Content.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.ExternalDrop.Content.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.ExternalDrop.Content.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.ExternalDrop.Content.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.ExternalDrop.Content.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.ExternalDrop.Content.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.ExternalDrop.Content.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.ExternalDrop.Content.Response.IError|null);
                }

                /** Represents a Response. */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.ExternalDrop.Content.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.ExternalDrop.Content.Response.IError|null);

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.ExternalDrop.Content.IResponse): anytype.Rpc.ExternalDrop.Content.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.ExternalDrop.Content.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.ExternalDrop.Content.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.ExternalDrop.Content.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.ExternalDrop.Content.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.ExternalDrop.Content.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.ExternalDrop.Content.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.ExternalDrop.Content.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.ExternalDrop.Content.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.ExternalDrop.Content.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.ExternalDrop.Content.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.ExternalDrop.Content.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.ExternalDrop.Content.Response.IError): anytype.Rpc.ExternalDrop.Content.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.ExternalDrop.Content.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.ExternalDrop.Content.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.ExternalDrop.Content.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.ExternalDrop.Content.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.ExternalDrop.Content.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.ExternalDrop.Content.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.ExternalDrop.Content.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.ExternalDrop.Content.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2
                        }
                    }
                }
            }
        }

        /** Properties of a BlockList. */
        interface IBlockList {
        }

        /** Represents a BlockList. */
        class BlockList implements IBlockList {

            /**
             * Constructs a new BlockList.
             * @param [properties] Properties to set
             */
            constructor(properties?: anytype.Rpc.IBlockList);

            /**
             * Creates a new BlockList instance using the specified properties.
             * @param [properties] Properties to set
             * @returns BlockList instance
             */
            public static create(properties?: anytype.Rpc.IBlockList): anytype.Rpc.BlockList;

            /**
             * Encodes the specified BlockList message. Does not implicitly {@link anytype.Rpc.BlockList.verify|verify} messages.
             * @param message BlockList message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: anytype.Rpc.IBlockList, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified BlockList message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.verify|verify} messages.
             * @param message BlockList message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: anytype.Rpc.IBlockList, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a BlockList message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns BlockList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList;

            /**
             * Decodes a BlockList message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns BlockList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList;

            /**
             * Verifies a BlockList message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a BlockList message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns BlockList
             */
            public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList;

            /**
             * Creates a plain object from a BlockList message. Also converts values to other types if specified.
             * @param message BlockList
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: anytype.Rpc.BlockList, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this BlockList to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace BlockList {

            /** Properties of a Move. */
            interface IMove {
            }

            /** Represents a Move. */
            class Move implements IMove {

                /**
                 * Constructs a new Move.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.BlockList.IMove);

                /**
                 * Creates a new Move instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Move instance
                 */
                public static create(properties?: anytype.Rpc.BlockList.IMove): anytype.Rpc.BlockList.Move;

                /**
                 * Encodes the specified Move message. Does not implicitly {@link anytype.Rpc.BlockList.Move.verify|verify} messages.
                 * @param message Move message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.BlockList.IMove, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Move message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Move.verify|verify} messages.
                 * @param message Move message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.BlockList.IMove, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Move message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Move
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Move;

                /**
                 * Decodes a Move message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Move
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Move;

                /**
                 * Verifies a Move message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Move message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Move
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Move;

                /**
                 * Creates a plain object from a Move message. Also converts values to other types if specified.
                 * @param message Move
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.BlockList.Move, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Move to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Move {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request contextId */
                    contextId?: (string|null);

                    /** Request blockIds */
                    blockIds?: (string[]|null);

                    /** Request targetContextId */
                    targetContextId?: (string|null);

                    /** Request dropTargetId */
                    dropTargetId?: (string|null);

                    /** Request position */
                    position?: (anytype.model.Block.Position|null);
                }

                /** Represents a Request. */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.BlockList.Move.IRequest);

                    /** Request contextId. */
                    public contextId: string;

                    /** Request blockIds. */
                    public blockIds: string[];

                    /** Request targetContextId. */
                    public targetContextId: string;

                    /** Request dropTargetId. */
                    public dropTargetId: string;

                    /** Request position. */
                    public position: anytype.model.Block.Position;

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.BlockList.Move.IRequest): anytype.Rpc.BlockList.Move.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.BlockList.Move.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.BlockList.Move.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Move.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.BlockList.Move.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Move.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Move.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Move.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.BlockList.Move.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.BlockList.Move.Response.IError|null);
                }

                /** Represents a Response. */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.BlockList.Move.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.BlockList.Move.Response.IError|null);

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.BlockList.Move.IResponse): anytype.Rpc.BlockList.Move.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.BlockList.Move.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.BlockList.Move.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Move.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.BlockList.Move.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Move.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Move.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Move.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.BlockList.Move.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.BlockList.Move.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.BlockList.Move.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.BlockList.Move.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.BlockList.Move.Response.IError): anytype.Rpc.BlockList.Move.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.BlockList.Move.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.BlockList.Move.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Move.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.BlockList.Move.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Move.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Move.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Move.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.BlockList.Move.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2
                        }
                    }
                }
            }

            /** Properties of a Duplicate. */
            interface IDuplicate {
            }

            /** Represents a Duplicate. */
            class Duplicate implements IDuplicate {

                /**
                 * Constructs a new Duplicate.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.BlockList.IDuplicate);

                /**
                 * Creates a new Duplicate instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Duplicate instance
                 */
                public static create(properties?: anytype.Rpc.BlockList.IDuplicate): anytype.Rpc.BlockList.Duplicate;

                /**
                 * Encodes the specified Duplicate message. Does not implicitly {@link anytype.Rpc.BlockList.Duplicate.verify|verify} messages.
                 * @param message Duplicate message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.BlockList.IDuplicate, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Duplicate message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Duplicate.verify|verify} messages.
                 * @param message Duplicate message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.BlockList.IDuplicate, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Duplicate message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Duplicate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Duplicate;

                /**
                 * Decodes a Duplicate message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Duplicate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Duplicate;

                /**
                 * Verifies a Duplicate message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Duplicate message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Duplicate
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Duplicate;

                /**
                 * Creates a plain object from a Duplicate message. Also converts values to other types if specified.
                 * @param message Duplicate
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.BlockList.Duplicate, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Duplicate to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Duplicate {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request contextId */
                    contextId?: (string|null);

                    /** Request targetId */
                    targetId?: (string|null);

                    /** Request blockIds */
                    blockIds?: (string[]|null);

                    /** Request position */
                    position?: (anytype.model.Block.Position|null);
                }

                /** Represents a Request. */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.BlockList.Duplicate.IRequest);

                    /** Request contextId. */
                    public contextId: string;

                    /** Request targetId. */
                    public targetId: string;

                    /** Request blockIds. */
                    public blockIds: string[];

                    /** Request position. */
                    public position: anytype.model.Block.Position;

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.BlockList.Duplicate.IRequest): anytype.Rpc.BlockList.Duplicate.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.BlockList.Duplicate.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.BlockList.Duplicate.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Duplicate.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.BlockList.Duplicate.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Duplicate.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Duplicate.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Duplicate.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.BlockList.Duplicate.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.BlockList.Duplicate.Response.IError|null);

                    /** Response blockIds */
                    blockIds?: (string[]|null);
                }

                /** Represents a Response. */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.BlockList.Duplicate.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.BlockList.Duplicate.Response.IError|null);

                    /** Response blockIds. */
                    public blockIds: string[];

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.BlockList.Duplicate.IResponse): anytype.Rpc.BlockList.Duplicate.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.BlockList.Duplicate.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.BlockList.Duplicate.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Duplicate.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.BlockList.Duplicate.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Duplicate.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Duplicate.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Duplicate.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.BlockList.Duplicate.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.BlockList.Duplicate.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.BlockList.Duplicate.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.BlockList.Duplicate.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.BlockList.Duplicate.Response.IError): anytype.Rpc.BlockList.Duplicate.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.BlockList.Duplicate.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.BlockList.Duplicate.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Duplicate.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.BlockList.Duplicate.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Duplicate.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Duplicate.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Duplicate.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.BlockList.Duplicate.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2
                        }
                    }
                }
            }

            /** Properties of a Set. */
            interface ISet {
            }

            /** Represents a Set. */
            class Set implements ISet {

                /**
                 * Constructs a new Set.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.BlockList.ISet);

                /**
                 * Creates a new Set instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Set instance
                 */
                public static create(properties?: anytype.Rpc.BlockList.ISet): anytype.Rpc.BlockList.Set;

                /**
                 * Encodes the specified Set message. Does not implicitly {@link anytype.Rpc.BlockList.Set.verify|verify} messages.
                 * @param message Set message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.BlockList.ISet, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Set message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Set.verify|verify} messages.
                 * @param message Set message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.BlockList.ISet, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Set message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Set
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Set;

                /**
                 * Decodes a Set message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Set
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Set;

                /**
                 * Verifies a Set message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Set message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Set
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Set;

                /**
                 * Creates a plain object from a Set message. Also converts values to other types if specified.
                 * @param message Set
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.BlockList.Set, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Set to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Set {

                /** Properties of a Text. */
                interface IText {
                }

                /** Represents a Text. */
                class Text implements IText {

                    /**
                     * Constructs a new Text.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.BlockList.Set.IText);

                    /**
                     * Creates a new Text instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Text instance
                     */
                    public static create(properties?: anytype.Rpc.BlockList.Set.IText): anytype.Rpc.BlockList.Set.Text;

                    /**
                     * Encodes the specified Text message. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.verify|verify} messages.
                     * @param message Text message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.BlockList.Set.IText, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Text message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.verify|verify} messages.
                     * @param message Text message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.BlockList.Set.IText, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Text message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Text
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Set.Text;

                    /**
                     * Decodes a Text message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Text
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Set.Text;

                    /**
                     * Verifies a Text message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Text message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Text
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Set.Text;

                    /**
                     * Creates a plain object from a Text message. Also converts values to other types if specified.
                     * @param message Text
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.BlockList.Set.Text, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Text to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Text {

                    /** Properties of a Style. */
                    interface IStyle {
                    }

                    /** Represents a Style. */
                    class Style implements IStyle {

                        /**
                         * Constructs a new Style.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.BlockList.Set.Text.IStyle);

                        /**
                         * Creates a new Style instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Style instance
                         */
                        public static create(properties?: anytype.Rpc.BlockList.Set.Text.IStyle): anytype.Rpc.BlockList.Set.Text.Style;

                        /**
                         * Encodes the specified Style message. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.Style.verify|verify} messages.
                         * @param message Style message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.BlockList.Set.Text.IStyle, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Style message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.Style.verify|verify} messages.
                         * @param message Style message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.BlockList.Set.Text.IStyle, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Style message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Style
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Set.Text.Style;

                        /**
                         * Decodes a Style message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Style
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Set.Text.Style;

                        /**
                         * Verifies a Style message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Style message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Style
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Set.Text.Style;

                        /**
                         * Creates a plain object from a Style message. Also converts values to other types if specified.
                         * @param message Style
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.BlockList.Set.Text.Style, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Style to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Style {

                        /** Properties of a Request. */
                        interface IRequest {

                            /** Request contextId */
                            contextId?: (string|null);

                            /** Request blockIds */
                            blockIds?: (string[]|null);

                            /** Request style */
                            style?: (anytype.model.Block.Content.Text.Style|null);
                        }

                        /** Represents a Request. */
                        class Request implements IRequest {

                            /**
                             * Constructs a new Request.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.BlockList.Set.Text.Style.IRequest);

                            /** Request contextId. */
                            public contextId: string;

                            /** Request blockIds. */
                            public blockIds: string[];

                            /** Request style. */
                            public style: anytype.model.Block.Content.Text.Style;

                            /**
                             * Creates a new Request instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Request instance
                             */
                            public static create(properties?: anytype.Rpc.BlockList.Set.Text.Style.IRequest): anytype.Rpc.BlockList.Set.Text.Style.Request;

                            /**
                             * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.Style.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.BlockList.Set.Text.Style.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.Style.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.BlockList.Set.Text.Style.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Request message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Set.Text.Style.Request;

                            /**
                             * Decodes a Request message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Set.Text.Style.Request;

                            /**
                             * Verifies a Request message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Request message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Request
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Set.Text.Style.Request;

                            /**
                             * Creates a plain object from a Request message. Also converts values to other types if specified.
                             * @param message Request
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.BlockList.Set.Text.Style.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Request to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        /** Properties of a Response. */
                        interface IResponse {

                            /** Response error */
                            error?: (anytype.Rpc.BlockList.Set.Text.Style.Response.IError|null);
                        }

                        /** Represents a Response. */
                        class Response implements IResponse {

                            /**
                             * Constructs a new Response.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.BlockList.Set.Text.Style.IResponse);

                            /** Response error. */
                            public error?: (anytype.Rpc.BlockList.Set.Text.Style.Response.IError|null);

                            /**
                             * Creates a new Response instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Response instance
                             */
                            public static create(properties?: anytype.Rpc.BlockList.Set.Text.Style.IResponse): anytype.Rpc.BlockList.Set.Text.Style.Response;

                            /**
                             * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.Style.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.BlockList.Set.Text.Style.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.Style.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.BlockList.Set.Text.Style.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Response message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Set.Text.Style.Response;

                            /**
                             * Decodes a Response message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Set.Text.Style.Response;

                            /**
                             * Verifies a Response message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Response message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Response
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Set.Text.Style.Response;

                            /**
                             * Creates a plain object from a Response message. Also converts values to other types if specified.
                             * @param message Response
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.BlockList.Set.Text.Style.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Response to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Response {

                            /** Properties of an Error. */
                            interface IError {

                                /** Error code */
                                code?: (anytype.Rpc.BlockList.Set.Text.Style.Response.Error.Code|null);

                                /** Error description */
                                description?: (string|null);
                            }

                            /** Represents an Error. */
                            class Error implements IError {

                                /**
                                 * Constructs a new Error.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: anytype.Rpc.BlockList.Set.Text.Style.Response.IError);

                                /** Error code. */
                                public code: anytype.Rpc.BlockList.Set.Text.Style.Response.Error.Code;

                                /** Error description. */
                                public description: string;

                                /**
                                 * Creates a new Error instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns Error instance
                                 */
                                public static create(properties?: anytype.Rpc.BlockList.Set.Text.Style.Response.IError): anytype.Rpc.BlockList.Set.Text.Style.Response.Error;

                                /**
                                 * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.Style.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: anytype.Rpc.BlockList.Set.Text.Style.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.Style.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: anytype.Rpc.BlockList.Set.Text.Style.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes an Error message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Set.Text.Style.Response.Error;

                                /**
                                 * Decodes an Error message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Set.Text.Style.Response.Error;

                                /**
                                 * Verifies an Error message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates an Error message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns Error
                                 */
                                public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Set.Text.Style.Response.Error;

                                /**
                                 * Creates a plain object from an Error message. Also converts values to other types if specified.
                                 * @param message Error
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: anytype.Rpc.BlockList.Set.Text.Style.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this Error to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };
                            }

                            namespace Error {

                                /** Code enum. */
                                enum Code {
                                    NULL = 0,
                                    UNKNOWN_ERROR = 1,
                                    BAD_INPUT = 2
                                }
                            }
                        }
                    }

                    /** Properties of a Color. */
                    interface IColor {
                    }

                    /** Represents a Color. */
                    class Color implements IColor {

                        /**
                         * Constructs a new Color.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.BlockList.Set.Text.IColor);

                        /**
                         * Creates a new Color instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Color instance
                         */
                        public static create(properties?: anytype.Rpc.BlockList.Set.Text.IColor): anytype.Rpc.BlockList.Set.Text.Color;

                        /**
                         * Encodes the specified Color message. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.Color.verify|verify} messages.
                         * @param message Color message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.BlockList.Set.Text.IColor, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Color message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.Color.verify|verify} messages.
                         * @param message Color message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.BlockList.Set.Text.IColor, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Color message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Color
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Set.Text.Color;

                        /**
                         * Decodes a Color message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Color
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Set.Text.Color;

                        /**
                         * Verifies a Color message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Color message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Color
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Set.Text.Color;

                        /**
                         * Creates a plain object from a Color message. Also converts values to other types if specified.
                         * @param message Color
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.BlockList.Set.Text.Color, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Color to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Color {

                        /** Properties of a Request. */
                        interface IRequest {

                            /** Request contextId */
                            contextId?: (string|null);

                            /** Request blockIds */
                            blockIds?: (string[]|null);

                            /** Request color */
                            color?: (string|null);
                        }

                        /** Represents a Request. */
                        class Request implements IRequest {

                            /**
                             * Constructs a new Request.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.BlockList.Set.Text.Color.IRequest);

                            /** Request contextId. */
                            public contextId: string;

                            /** Request blockIds. */
                            public blockIds: string[];

                            /** Request color. */
                            public color: string;

                            /**
                             * Creates a new Request instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Request instance
                             */
                            public static create(properties?: anytype.Rpc.BlockList.Set.Text.Color.IRequest): anytype.Rpc.BlockList.Set.Text.Color.Request;

                            /**
                             * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.Color.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.BlockList.Set.Text.Color.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.Color.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.BlockList.Set.Text.Color.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Request message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Set.Text.Color.Request;

                            /**
                             * Decodes a Request message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Set.Text.Color.Request;

                            /**
                             * Verifies a Request message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Request message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Request
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Set.Text.Color.Request;

                            /**
                             * Creates a plain object from a Request message. Also converts values to other types if specified.
                             * @param message Request
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.BlockList.Set.Text.Color.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Request to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        /** Properties of a Response. */
                        interface IResponse {

                            /** Response error */
                            error?: (anytype.Rpc.BlockList.Set.Text.Color.Response.IError|null);
                        }

                        /** Represents a Response. */
                        class Response implements IResponse {

                            /**
                             * Constructs a new Response.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.BlockList.Set.Text.Color.IResponse);

                            /** Response error. */
                            public error?: (anytype.Rpc.BlockList.Set.Text.Color.Response.IError|null);

                            /**
                             * Creates a new Response instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Response instance
                             */
                            public static create(properties?: anytype.Rpc.BlockList.Set.Text.Color.IResponse): anytype.Rpc.BlockList.Set.Text.Color.Response;

                            /**
                             * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.Color.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.BlockList.Set.Text.Color.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.Color.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.BlockList.Set.Text.Color.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Response message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Set.Text.Color.Response;

                            /**
                             * Decodes a Response message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Set.Text.Color.Response;

                            /**
                             * Verifies a Response message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Response message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Response
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Set.Text.Color.Response;

                            /**
                             * Creates a plain object from a Response message. Also converts values to other types if specified.
                             * @param message Response
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.BlockList.Set.Text.Color.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Response to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Response {

                            /** Properties of an Error. */
                            interface IError {

                                /** Error code */
                                code?: (anytype.Rpc.BlockList.Set.Text.Color.Response.Error.Code|null);

                                /** Error description */
                                description?: (string|null);
                            }

                            /** Represents an Error. */
                            class Error implements IError {

                                /**
                                 * Constructs a new Error.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: anytype.Rpc.BlockList.Set.Text.Color.Response.IError);

                                /** Error code. */
                                public code: anytype.Rpc.BlockList.Set.Text.Color.Response.Error.Code;

                                /** Error description. */
                                public description: string;

                                /**
                                 * Creates a new Error instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns Error instance
                                 */
                                public static create(properties?: anytype.Rpc.BlockList.Set.Text.Color.Response.IError): anytype.Rpc.BlockList.Set.Text.Color.Response.Error;

                                /**
                                 * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.Color.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: anytype.Rpc.BlockList.Set.Text.Color.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.Color.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: anytype.Rpc.BlockList.Set.Text.Color.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes an Error message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Set.Text.Color.Response.Error;

                                /**
                                 * Decodes an Error message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Set.Text.Color.Response.Error;

                                /**
                                 * Verifies an Error message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates an Error message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns Error
                                 */
                                public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Set.Text.Color.Response.Error;

                                /**
                                 * Creates a plain object from an Error message. Also converts values to other types if specified.
                                 * @param message Error
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: anytype.Rpc.BlockList.Set.Text.Color.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this Error to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };
                            }

                            namespace Error {

                                /** Code enum. */
                                enum Code {
                                    NULL = 0,
                                    UNKNOWN_ERROR = 1,
                                    BAD_INPUT = 2
                                }
                            }
                        }
                    }

                    /** Properties of a BackgroundColor. */
                    interface IBackgroundColor {
                    }

                    /** Represents a BackgroundColor. */
                    class BackgroundColor implements IBackgroundColor {

                        /**
                         * Constructs a new BackgroundColor.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.BlockList.Set.Text.IBackgroundColor);

                        /**
                         * Creates a new BackgroundColor instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns BackgroundColor instance
                         */
                        public static create(properties?: anytype.Rpc.BlockList.Set.Text.IBackgroundColor): anytype.Rpc.BlockList.Set.Text.BackgroundColor;

                        /**
                         * Encodes the specified BackgroundColor message. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.BackgroundColor.verify|verify} messages.
                         * @param message BackgroundColor message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.BlockList.Set.Text.IBackgroundColor, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified BackgroundColor message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.BackgroundColor.verify|verify} messages.
                         * @param message BackgroundColor message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.BlockList.Set.Text.IBackgroundColor, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a BackgroundColor message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns BackgroundColor
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Set.Text.BackgroundColor;

                        /**
                         * Decodes a BackgroundColor message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns BackgroundColor
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Set.Text.BackgroundColor;

                        /**
                         * Verifies a BackgroundColor message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a BackgroundColor message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns BackgroundColor
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Set.Text.BackgroundColor;

                        /**
                         * Creates a plain object from a BackgroundColor message. Also converts values to other types if specified.
                         * @param message BackgroundColor
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.BlockList.Set.Text.BackgroundColor, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this BackgroundColor to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace BackgroundColor {

                        /** Properties of a Request. */
                        interface IRequest {

                            /** Request contextId */
                            contextId?: (string|null);

                            /** Request blockIds */
                            blockIds?: (string[]|null);

                            /** Request color */
                            color?: (string|null);
                        }

                        /** Represents a Request. */
                        class Request implements IRequest {

                            /**
                             * Constructs a new Request.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.BlockList.Set.Text.BackgroundColor.IRequest);

                            /** Request contextId. */
                            public contextId: string;

                            /** Request blockIds. */
                            public blockIds: string[];

                            /** Request color. */
                            public color: string;

                            /**
                             * Creates a new Request instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Request instance
                             */
                            public static create(properties?: anytype.Rpc.BlockList.Set.Text.BackgroundColor.IRequest): anytype.Rpc.BlockList.Set.Text.BackgroundColor.Request;

                            /**
                             * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.BackgroundColor.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.BlockList.Set.Text.BackgroundColor.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.BackgroundColor.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.BlockList.Set.Text.BackgroundColor.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Request message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Set.Text.BackgroundColor.Request;

                            /**
                             * Decodes a Request message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Set.Text.BackgroundColor.Request;

                            /**
                             * Verifies a Request message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Request message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Request
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Set.Text.BackgroundColor.Request;

                            /**
                             * Creates a plain object from a Request message. Also converts values to other types if specified.
                             * @param message Request
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.BlockList.Set.Text.BackgroundColor.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Request to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        /** Properties of a Response. */
                        interface IResponse {

                            /** Response error */
                            error?: (anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response.IError|null);
                        }

                        /** Represents a Response. */
                        class Response implements IResponse {

                            /**
                             * Constructs a new Response.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.BlockList.Set.Text.BackgroundColor.IResponse);

                            /** Response error. */
                            public error?: (anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response.IError|null);

                            /**
                             * Creates a new Response instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Response instance
                             */
                            public static create(properties?: anytype.Rpc.BlockList.Set.Text.BackgroundColor.IResponse): anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response;

                            /**
                             * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.BlockList.Set.Text.BackgroundColor.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.BlockList.Set.Text.BackgroundColor.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Response message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response;

                            /**
                             * Decodes a Response message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response;

                            /**
                             * Verifies a Response message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Response message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Response
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response;

                            /**
                             * Creates a plain object from a Response message. Also converts values to other types if specified.
                             * @param message Response
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Response to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Response {

                            /** Properties of an Error. */
                            interface IError {

                                /** Error code */
                                code?: (anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response.Error.Code|null);

                                /** Error description */
                                description?: (string|null);
                            }

                            /** Represents an Error. */
                            class Error implements IError {

                                /**
                                 * Constructs a new Error.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response.IError);

                                /** Error code. */
                                public code: anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response.Error.Code;

                                /** Error description. */
                                public description: string;

                                /**
                                 * Creates a new Error instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns Error instance
                                 */
                                public static create(properties?: anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response.IError): anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response.Error;

                                /**
                                 * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes an Error message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response.Error;

                                /**
                                 * Decodes an Error message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response.Error;

                                /**
                                 * Verifies an Error message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates an Error message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns Error
                                 */
                                public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response.Error;

                                /**
                                 * Creates a plain object from an Error message. Also converts values to other types if specified.
                                 * @param message Error
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this Error to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };
                            }

                            namespace Error {

                                /** Code enum. */
                                enum Code {
                                    NULL = 0,
                                    UNKNOWN_ERROR = 1,
                                    BAD_INPUT = 2
                                }
                            }
                        }
                    }
                }

                /** Properties of a Fields. */
                interface IFields {
                }

                /** Represents a Fields. */
                class Fields implements IFields {

                    /**
                     * Constructs a new Fields.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.BlockList.Set.IFields);

                    /**
                     * Creates a new Fields instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Fields instance
                     */
                    public static create(properties?: anytype.Rpc.BlockList.Set.IFields): anytype.Rpc.BlockList.Set.Fields;

                    /**
                     * Encodes the specified Fields message. Does not implicitly {@link anytype.Rpc.BlockList.Set.Fields.verify|verify} messages.
                     * @param message Fields message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.BlockList.Set.IFields, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Fields message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Set.Fields.verify|verify} messages.
                     * @param message Fields message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.BlockList.Set.IFields, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Fields message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Fields
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Set.Fields;

                    /**
                     * Decodes a Fields message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Fields
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Set.Fields;

                    /**
                     * Verifies a Fields message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Fields message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Fields
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Set.Fields;

                    /**
                     * Creates a plain object from a Fields message. Also converts values to other types if specified.
                     * @param message Fields
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.BlockList.Set.Fields, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Fields to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Fields {

                    /** Properties of a Request. */
                    interface IRequest {

                        /** Request contextId */
                        contextId?: (string|null);

                        /** Request blockFields */
                        blockFields?: (anytype.Rpc.BlockList.Set.Fields.Request.IBlockField[]|null);
                    }

                    /** Represents a Request. */
                    class Request implements IRequest {

                        /**
                         * Constructs a new Request.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.BlockList.Set.Fields.IRequest);

                        /** Request contextId. */
                        public contextId: string;

                        /** Request blockFields. */
                        public blockFields: anytype.Rpc.BlockList.Set.Fields.Request.IBlockField[];

                        /**
                         * Creates a new Request instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Request instance
                         */
                        public static create(properties?: anytype.Rpc.BlockList.Set.Fields.IRequest): anytype.Rpc.BlockList.Set.Fields.Request;

                        /**
                         * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.BlockList.Set.Fields.Request.verify|verify} messages.
                         * @param message Request message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.BlockList.Set.Fields.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Set.Fields.Request.verify|verify} messages.
                         * @param message Request message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.BlockList.Set.Fields.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Request message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Request
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Set.Fields.Request;

                        /**
                         * Decodes a Request message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Request
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Set.Fields.Request;

                        /**
                         * Verifies a Request message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Request message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Request
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Set.Fields.Request;

                        /**
                         * Creates a plain object from a Request message. Also converts values to other types if specified.
                         * @param message Request
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.BlockList.Set.Fields.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Request to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Request {

                        /** Properties of a BlockField. */
                        interface IBlockField {

                            /** BlockField blockId */
                            blockId?: (string|null);

                            /** BlockField fields */
                            fields?: (google.protobuf.IStruct|null);
                        }

                        /** Represents a BlockField. */
                        class BlockField implements IBlockField {

                            /**
                             * Constructs a new BlockField.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.BlockList.Set.Fields.Request.IBlockField);

                            /** BlockField blockId. */
                            public blockId: string;

                            /** BlockField fields. */
                            public fields?: (google.protobuf.IStruct|null);

                            /**
                             * Creates a new BlockField instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns BlockField instance
                             */
                            public static create(properties?: anytype.Rpc.BlockList.Set.Fields.Request.IBlockField): anytype.Rpc.BlockList.Set.Fields.Request.BlockField;

                            /**
                             * Encodes the specified BlockField message. Does not implicitly {@link anytype.Rpc.BlockList.Set.Fields.Request.BlockField.verify|verify} messages.
                             * @param message BlockField message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.BlockList.Set.Fields.Request.IBlockField, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified BlockField message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Set.Fields.Request.BlockField.verify|verify} messages.
                             * @param message BlockField message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.BlockList.Set.Fields.Request.IBlockField, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a BlockField message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns BlockField
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Set.Fields.Request.BlockField;

                            /**
                             * Decodes a BlockField message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns BlockField
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Set.Fields.Request.BlockField;

                            /**
                             * Verifies a BlockField message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a BlockField message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns BlockField
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Set.Fields.Request.BlockField;

                            /**
                             * Creates a plain object from a BlockField message. Also converts values to other types if specified.
                             * @param message BlockField
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.BlockList.Set.Fields.Request.BlockField, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this BlockField to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }
                    }

                    /** Properties of a Response. */
                    interface IResponse {

                        /** Response error */
                        error?: (anytype.Rpc.BlockList.Set.Fields.Response.IError|null);
                    }

                    /** Represents a Response. */
                    class Response implements IResponse {

                        /**
                         * Constructs a new Response.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.BlockList.Set.Fields.IResponse);

                        /** Response error. */
                        public error?: (anytype.Rpc.BlockList.Set.Fields.Response.IError|null);

                        /**
                         * Creates a new Response instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Response instance
                         */
                        public static create(properties?: anytype.Rpc.BlockList.Set.Fields.IResponse): anytype.Rpc.BlockList.Set.Fields.Response;

                        /**
                         * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.BlockList.Set.Fields.Response.verify|verify} messages.
                         * @param message Response message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.BlockList.Set.Fields.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Set.Fields.Response.verify|verify} messages.
                         * @param message Response message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.BlockList.Set.Fields.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Response message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Response
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Set.Fields.Response;

                        /**
                         * Decodes a Response message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Response
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Set.Fields.Response;

                        /**
                         * Verifies a Response message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Response message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Response
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Set.Fields.Response;

                        /**
                         * Creates a plain object from a Response message. Also converts values to other types if specified.
                         * @param message Response
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.BlockList.Set.Fields.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Response to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Response {

                        /** Properties of an Error. */
                        interface IError {

                            /** Error code */
                            code?: (anytype.Rpc.BlockList.Set.Fields.Response.Error.Code|null);

                            /** Error description */
                            description?: (string|null);
                        }

                        /** Represents an Error. */
                        class Error implements IError {

                            /**
                             * Constructs a new Error.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.BlockList.Set.Fields.Response.IError);

                            /** Error code. */
                            public code: anytype.Rpc.BlockList.Set.Fields.Response.Error.Code;

                            /** Error description. */
                            public description: string;

                            /**
                             * Creates a new Error instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Error instance
                             */
                            public static create(properties?: anytype.Rpc.BlockList.Set.Fields.Response.IError): anytype.Rpc.BlockList.Set.Fields.Response.Error;

                            /**
                             * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.BlockList.Set.Fields.Response.Error.verify|verify} messages.
                             * @param message Error message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.BlockList.Set.Fields.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.BlockList.Set.Fields.Response.Error.verify|verify} messages.
                             * @param message Error message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.BlockList.Set.Fields.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes an Error message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Error
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.BlockList.Set.Fields.Response.Error;

                            /**
                             * Decodes an Error message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Error
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.BlockList.Set.Fields.Response.Error;

                            /**
                             * Verifies an Error message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates an Error message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Error
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.BlockList.Set.Fields.Response.Error;

                            /**
                             * Creates a plain object from an Error message. Also converts values to other types if specified.
                             * @param message Error
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.BlockList.Set.Fields.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Error to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Error {

                            /** Code enum. */
                            enum Code {
                                NULL = 0,
                                UNKNOWN_ERROR = 1,
                                BAD_INPUT = 2
                            }
                        }
                    }
                }
            }
        }

        /** Properties of a Block. */
        interface IBlock {
        }

        /** Represents a Block. */
        class Block implements IBlock {

            /**
             * Constructs a new Block.
             * @param [properties] Properties to set
             */
            constructor(properties?: anytype.Rpc.IBlock);

            /**
             * Creates a new Block instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Block instance
             */
            public static create(properties?: anytype.Rpc.IBlock): anytype.Rpc.Block;

            /**
             * Encodes the specified Block message. Does not implicitly {@link anytype.Rpc.Block.verify|verify} messages.
             * @param message Block message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: anytype.Rpc.IBlock, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Block message, length delimited. Does not implicitly {@link anytype.Rpc.Block.verify|verify} messages.
             * @param message Block message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: anytype.Rpc.IBlock, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Block message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Block
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block;

            /**
             * Decodes a Block message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Block
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block;

            /**
             * Verifies a Block message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Block message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Block
             */
            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block;

            /**
             * Creates a plain object from a Block message. Also converts values to other types if specified.
             * @param message Block
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: anytype.Rpc.Block, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Block to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Block {

            /** Properties of a Replace. */
            interface IReplace {
            }

            /** Represents a Replace. */
            class Replace implements IReplace {

                /**
                 * Constructs a new Replace.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Block.IReplace);

                /**
                 * Creates a new Replace instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Replace instance
                 */
                public static create(properties?: anytype.Rpc.Block.IReplace): anytype.Rpc.Block.Replace;

                /**
                 * Encodes the specified Replace message. Does not implicitly {@link anytype.Rpc.Block.Replace.verify|verify} messages.
                 * @param message Replace message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Block.IReplace, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Replace message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Replace.verify|verify} messages.
                 * @param message Replace message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Block.IReplace, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Replace message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Replace
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Replace;

                /**
                 * Decodes a Replace message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Replace
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Replace;

                /**
                 * Verifies a Replace message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Replace message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Replace
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Replace;

                /**
                 * Creates a plain object from a Replace message. Also converts values to other types if specified.
                 * @param message Replace
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Block.Replace, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Replace to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Replace {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request contextId */
                    contextId?: (string|null);

                    /** Request blockId */
                    blockId?: (string|null);

                    /** Request block */
                    block?: (anytype.model.IBlock|null);
                }

                /** Represents a Request. */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Replace.IRequest);

                    /** Request contextId. */
                    public contextId: string;

                    /** Request blockId. */
                    public blockId: string;

                    /** Request block. */
                    public block?: (anytype.model.IBlock|null);

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Replace.IRequest): anytype.Rpc.Block.Replace.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Replace.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Replace.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Replace.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Replace.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Replace.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Replace.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Replace.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Replace.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Block.Replace.Response.IError|null);

                    /** Response blockId */
                    blockId?: (string|null);
                }

                /** Represents a Response. */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Replace.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Block.Replace.Response.IError|null);

                    /** Response blockId. */
                    public blockId: string;

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Replace.IResponse): anytype.Rpc.Block.Replace.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Replace.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Replace.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Replace.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Replace.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Replace.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Replace.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Replace.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Replace.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Block.Replace.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Replace.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Block.Replace.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Replace.Response.IError): anytype.Rpc.Block.Replace.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Replace.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Replace.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Replace.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Replace.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Replace.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Replace.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Replace.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Replace.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2
                        }
                    }
                }
            }

            /** Properties of a Split. */
            interface ISplit {
            }

            /** Represents a Split. */
            class Split implements ISplit {

                /**
                 * Constructs a new Split.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Block.ISplit);

                /**
                 * Creates a new Split instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Split instance
                 */
                public static create(properties?: anytype.Rpc.Block.ISplit): anytype.Rpc.Block.Split;

                /**
                 * Encodes the specified Split message. Does not implicitly {@link anytype.Rpc.Block.Split.verify|verify} messages.
                 * @param message Split message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Block.ISplit, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Split message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Split.verify|verify} messages.
                 * @param message Split message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Block.ISplit, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Split message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Split
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Split;

                /**
                 * Decodes a Split message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Split
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Split;

                /**
                 * Verifies a Split message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Split message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Split
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Split;

                /**
                 * Creates a plain object from a Split message. Also converts values to other types if specified.
                 * @param message Split
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Block.Split, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Split to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Split {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request contextId */
                    contextId?: (string|null);

                    /** Request blockId */
                    blockId?: (string|null);

                    /** Request cursorPosition */
                    cursorPosition?: (number|null);
                }

                /** Represents a Request. */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Split.IRequest);

                    /** Request contextId. */
                    public contextId: string;

                    /** Request blockId. */
                    public blockId: string;

                    /** Request cursorPosition. */
                    public cursorPosition: number;

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Split.IRequest): anytype.Rpc.Block.Split.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Split.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Split.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Split.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Split.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Split.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Split.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Split.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Split.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Block.Split.Response.IError|null);

                    /** Response blockId */
                    blockId?: (string|null);
                }

                /** Represents a Response. */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Split.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Block.Split.Response.IError|null);

                    /** Response blockId. */
                    public blockId: string;

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Split.IResponse): anytype.Rpc.Block.Split.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Split.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Split.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Split.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Split.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Split.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Split.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Split.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Split.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Block.Split.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Split.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Block.Split.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Split.Response.IError): anytype.Rpc.Block.Split.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Split.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Split.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Split.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Split.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Split.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Split.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Split.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Split.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2
                        }
                    }
                }
            }

            /** Properties of a Merge. */
            interface IMerge {
            }

            /** Represents a Merge. */
            class Merge implements IMerge {

                /**
                 * Constructs a new Merge.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Block.IMerge);

                /**
                 * Creates a new Merge instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Merge instance
                 */
                public static create(properties?: anytype.Rpc.Block.IMerge): anytype.Rpc.Block.Merge;

                /**
                 * Encodes the specified Merge message. Does not implicitly {@link anytype.Rpc.Block.Merge.verify|verify} messages.
                 * @param message Merge message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Block.IMerge, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Merge message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Merge.verify|verify} messages.
                 * @param message Merge message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Block.IMerge, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Merge message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Merge
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Merge;

                /**
                 * Decodes a Merge message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Merge
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Merge;

                /**
                 * Verifies a Merge message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Merge message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Merge
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Merge;

                /**
                 * Creates a plain object from a Merge message. Also converts values to other types if specified.
                 * @param message Merge
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Block.Merge, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Merge to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Merge {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request contextId */
                    contextId?: (string|null);

                    /** Request firstBlockId */
                    firstBlockId?: (string|null);

                    /** Request secondBlockId */
                    secondBlockId?: (string|null);
                }

                /** Represents a Request. */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Merge.IRequest);

                    /** Request contextId. */
                    public contextId: string;

                    /** Request firstBlockId. */
                    public firstBlockId: string;

                    /** Request secondBlockId. */
                    public secondBlockId: string;

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Merge.IRequest): anytype.Rpc.Block.Merge.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Merge.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Merge.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Merge.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Merge.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Merge.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Merge.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Merge.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Merge.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Block.Merge.Response.IError|null);
                }

                /** Represents a Response. */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Merge.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Block.Merge.Response.IError|null);

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Merge.IResponse): anytype.Rpc.Block.Merge.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Merge.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Merge.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Merge.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Merge.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Merge.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Merge.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Merge.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Merge.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Block.Merge.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Merge.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Block.Merge.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Merge.Response.IError): anytype.Rpc.Block.Merge.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Merge.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Merge.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Merge.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Merge.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Merge.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Merge.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Merge.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Merge.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2
                        }
                    }
                }
            }

            /** Properties of a Copy. */
            interface ICopy {
            }

            /** Represents a Copy. */
            class Copy implements ICopy {

                /**
                 * Constructs a new Copy.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Block.ICopy);

                /**
                 * Creates a new Copy instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Copy instance
                 */
                public static create(properties?: anytype.Rpc.Block.ICopy): anytype.Rpc.Block.Copy;

                /**
                 * Encodes the specified Copy message. Does not implicitly {@link anytype.Rpc.Block.Copy.verify|verify} messages.
                 * @param message Copy message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Block.ICopy, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Copy message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Copy.verify|verify} messages.
                 * @param message Copy message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Block.ICopy, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Copy message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Copy
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Copy;

                /**
                 * Decodes a Copy message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Copy
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Copy;

                /**
                 * Verifies a Copy message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Copy message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Copy
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Copy;

                /**
                 * Creates a plain object from a Copy message. Also converts values to other types if specified.
                 * @param message Copy
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Block.Copy, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Copy to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Copy {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request contextId */
                    contextId?: (string|null);

                    /** Request blockIds */
                    blockIds?: (string[]|null);
                }

                /** Represents a Request. */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Copy.IRequest);

                    /** Request contextId. */
                    public contextId: string;

                    /** Request blockIds. */
                    public blockIds: string[];

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Copy.IRequest): anytype.Rpc.Block.Copy.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Copy.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Copy.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Copy.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Copy.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Copy.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Copy.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Copy.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Copy.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Block.Copy.Response.IError|null);

                    /** Response clipboardText */
                    clipboardText?: (string|null);

                    /** Response clipboardHtml */
                    clipboardHtml?: (string|null);
                }

                /** Represents a Response. */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Copy.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Block.Copy.Response.IError|null);

                    /** Response clipboardText. */
                    public clipboardText: string;

                    /** Response clipboardHtml. */
                    public clipboardHtml: string;

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Copy.IResponse): anytype.Rpc.Block.Copy.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Copy.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Copy.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Copy.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Copy.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Copy.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Copy.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Copy.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Copy.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Block.Copy.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Copy.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Block.Copy.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Copy.Response.IError): anytype.Rpc.Block.Copy.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Copy.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Copy.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Copy.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Copy.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Copy.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Copy.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Copy.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Copy.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2
                        }
                    }
                }
            }

            /** Properties of a Paste. */
            interface IPaste {
            }

            /** Represents a Paste. */
            class Paste implements IPaste {

                /**
                 * Constructs a new Paste.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Block.IPaste);

                /**
                 * Creates a new Paste instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Paste instance
                 */
                public static create(properties?: anytype.Rpc.Block.IPaste): anytype.Rpc.Block.Paste;

                /**
                 * Encodes the specified Paste message. Does not implicitly {@link anytype.Rpc.Block.Paste.verify|verify} messages.
                 * @param message Paste message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Block.IPaste, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Paste message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Paste.verify|verify} messages.
                 * @param message Paste message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Block.IPaste, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Paste message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Paste
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Paste;

                /**
                 * Decodes a Paste message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Paste
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Paste;

                /**
                 * Verifies a Paste message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Paste message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Paste
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Paste;

                /**
                 * Creates a plain object from a Paste message. Also converts values to other types if specified.
                 * @param message Paste
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Block.Paste, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Paste to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Paste {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request contextId */
                    contextId?: (string|null);

                    /** Request focusedBlockId */
                    focusedBlockId?: (string|null);

                    /** Request selectedTextRange */
                    selectedTextRange?: (anytype.model.IRange|null);

                    /** Request selectedBlockIds */
                    selectedBlockIds?: (string[]|null);

                    /** Request textSlot */
                    textSlot?: (string|null);

                    /** Request htmlSlot */
                    htmlSlot?: (string|null);

                    /** Request anySlot */
                    anySlot?: (anytype.model.IBlock[]|null);
                }

                /** Represents a Request. */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Paste.IRequest);

                    /** Request contextId. */
                    public contextId: string;

                    /** Request focusedBlockId. */
                    public focusedBlockId: string;

                    /** Request selectedTextRange. */
                    public selectedTextRange?: (anytype.model.IRange|null);

                    /** Request selectedBlockIds. */
                    public selectedBlockIds: string[];

                    /** Request textSlot. */
                    public textSlot: string;

                    /** Request htmlSlot. */
                    public htmlSlot: string;

                    /** Request anySlot. */
                    public anySlot: anytype.model.IBlock[];

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Paste.IRequest): anytype.Rpc.Block.Paste.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Paste.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Paste.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Paste.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Paste.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Paste.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Paste.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Paste.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Paste.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Block.Paste.Response.IError|null);
                }

                /** Represents a Response. */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Paste.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Block.Paste.Response.IError|null);

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Paste.IResponse): anytype.Rpc.Block.Paste.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Paste.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Paste.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Paste.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Paste.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Paste.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Paste.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Paste.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Paste.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Block.Paste.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Paste.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Block.Paste.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Paste.Response.IError): anytype.Rpc.Block.Paste.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Paste.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Paste.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Paste.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Paste.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Paste.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Paste.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Paste.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Paste.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2
                        }
                    }
                }
            }

            /** Properties of an Upload. */
            interface IUpload {
            }

            /** Represents an Upload. */
            class Upload implements IUpload {

                /**
                 * Constructs a new Upload.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Block.IUpload);

                /**
                 * Creates a new Upload instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Upload instance
                 */
                public static create(properties?: anytype.Rpc.Block.IUpload): anytype.Rpc.Block.Upload;

                /**
                 * Encodes the specified Upload message. Does not implicitly {@link anytype.Rpc.Block.Upload.verify|verify} messages.
                 * @param message Upload message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Block.IUpload, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Upload message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Upload.verify|verify} messages.
                 * @param message Upload message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Block.IUpload, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Upload message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Upload
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Upload;

                /**
                 * Decodes an Upload message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Upload
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Upload;

                /**
                 * Verifies an Upload message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Upload message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Upload
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Upload;

                /**
                 * Creates a plain object from an Upload message. Also converts values to other types if specified.
                 * @param message Upload
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Block.Upload, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Upload to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Upload {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request contextId */
                    contextId?: (string|null);

                    /** Request blockId */
                    blockId?: (string|null);

                    /** Request filePath */
                    filePath?: (string|null);

                    /** Request url */
                    url?: (string|null);
                }

                /** Represents a Request. */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Upload.IRequest);

                    /** Request contextId. */
                    public contextId: string;

                    /** Request blockId. */
                    public blockId: string;

                    /** Request filePath. */
                    public filePath: string;

                    /** Request url. */
                    public url: string;

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Upload.IRequest): anytype.Rpc.Block.Upload.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Upload.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Upload.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Upload.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Upload.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Upload.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Upload.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Upload.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Upload.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Block.Upload.Response.IError|null);
                }

                /** Represents a Response. */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Upload.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Block.Upload.Response.IError|null);

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Upload.IResponse): anytype.Rpc.Block.Upload.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Upload.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Upload.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Upload.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Upload.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Upload.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Upload.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Upload.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Upload.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Block.Upload.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Upload.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Block.Upload.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Upload.Response.IError): anytype.Rpc.Block.Upload.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Upload.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Upload.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Upload.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Upload.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Upload.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Upload.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Upload.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Upload.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2
                        }
                    }
                }
            }

            /** Properties of a Download. */
            interface IDownload {
            }

            /** Represents a Download. */
            class Download implements IDownload {

                /**
                 * Constructs a new Download.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Block.IDownload);

                /**
                 * Creates a new Download instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Download instance
                 */
                public static create(properties?: anytype.Rpc.Block.IDownload): anytype.Rpc.Block.Download;

                /**
                 * Encodes the specified Download message. Does not implicitly {@link anytype.Rpc.Block.Download.verify|verify} messages.
                 * @param message Download message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Block.IDownload, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Download message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Download.verify|verify} messages.
                 * @param message Download message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Block.IDownload, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Download message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Download
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Download;

                /**
                 * Decodes a Download message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Download
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Download;

                /**
                 * Verifies a Download message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Download message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Download
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Download;

                /**
                 * Creates a plain object from a Download message. Also converts values to other types if specified.
                 * @param message Download
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Block.Download, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Download to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Download {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request contextId */
                    contextId?: (string|null);

                    /** Request blockId */
                    blockId?: (string|null);
                }

                /** Represents a Request. */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Download.IRequest);

                    /** Request contextId. */
                    public contextId: string;

                    /** Request blockId. */
                    public blockId: string;

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Download.IRequest): anytype.Rpc.Block.Download.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Download.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Download.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Download.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Download.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Download.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Download.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Download.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Download.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Block.Download.Response.IError|null);
                }

                /** Represents a Response. */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Download.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Block.Download.Response.IError|null);

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Download.IResponse): anytype.Rpc.Block.Download.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Download.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Download.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Download.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Download.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Download.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Download.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Download.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Download.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Block.Download.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Download.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Block.Download.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Download.Response.IError): anytype.Rpc.Block.Download.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Download.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Download.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Download.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Download.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Download.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Download.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Download.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Download.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2
                        }
                    }
                }
            }

            /** Properties of a Set. */
            interface ISet {
            }

            /** Represents a Set. */
            class Set implements ISet {

                /**
                 * Constructs a new Set.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Block.ISet);

                /**
                 * Creates a new Set instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Set instance
                 */
                public static create(properties?: anytype.Rpc.Block.ISet): anytype.Rpc.Block.Set;

                /**
                 * Encodes the specified Set message. Does not implicitly {@link anytype.Rpc.Block.Set.verify|verify} messages.
                 * @param message Set message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Block.ISet, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Set message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.verify|verify} messages.
                 * @param message Set message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Block.ISet, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Set message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Set
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set;

                /**
                 * Decodes a Set message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Set
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set;

                /**
                 * Verifies a Set message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Set message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Set
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set;

                /**
                 * Creates a plain object from a Set message. Also converts values to other types if specified.
                 * @param message Set
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Block.Set, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Set to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Set {

                /** Properties of a Fields. */
                interface IFields {
                }

                /** Represents a Fields. */
                class Fields implements IFields {

                    /**
                     * Constructs a new Fields.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Set.IFields);

                    /**
                     * Creates a new Fields instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Fields instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Set.IFields): anytype.Rpc.Block.Set.Fields;

                    /**
                     * Encodes the specified Fields message. Does not implicitly {@link anytype.Rpc.Block.Set.Fields.verify|verify} messages.
                     * @param message Fields message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Set.IFields, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Fields message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Fields.verify|verify} messages.
                     * @param message Fields message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Set.IFields, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Fields message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Fields
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Fields;

                    /**
                     * Decodes a Fields message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Fields
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Fields;

                    /**
                     * Verifies a Fields message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Fields message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Fields
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Fields;

                    /**
                     * Creates a plain object from a Fields message. Also converts values to other types if specified.
                     * @param message Fields
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Set.Fields, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Fields to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Fields {

                    /** Properties of a Request. */
                    interface IRequest {

                        /** Request contextId */
                        contextId?: (string|null);

                        /** Request blockId */
                        blockId?: (string|null);

                        /** Request fields */
                        fields?: (google.protobuf.IStruct|null);
                    }

                    /** Represents a Request. */
                    class Request implements IRequest {

                        /**
                         * Constructs a new Request.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Set.Fields.IRequest);

                        /** Request contextId. */
                        public contextId: string;

                        /** Request blockId. */
                        public blockId: string;

                        /** Request fields. */
                        public fields?: (google.protobuf.IStruct|null);

                        /**
                         * Creates a new Request instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Request instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Set.Fields.IRequest): anytype.Rpc.Block.Set.Fields.Request;

                        /**
                         * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Set.Fields.Request.verify|verify} messages.
                         * @param message Request message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Set.Fields.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Fields.Request.verify|verify} messages.
                         * @param message Request message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Set.Fields.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Request message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Request
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Fields.Request;

                        /**
                         * Decodes a Request message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Request
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Fields.Request;

                        /**
                         * Verifies a Request message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Request message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Request
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Fields.Request;

                        /**
                         * Creates a plain object from a Request message. Also converts values to other types if specified.
                         * @param message Request
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Set.Fields.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Request to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Response. */
                    interface IResponse {

                        /** Response error */
                        error?: (anytype.Rpc.Block.Set.Fields.Response.IError|null);
                    }

                    /** Represents a Response. */
                    class Response implements IResponse {

                        /**
                         * Constructs a new Response.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Set.Fields.IResponse);

                        /** Response error. */
                        public error?: (anytype.Rpc.Block.Set.Fields.Response.IError|null);

                        /**
                         * Creates a new Response instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Response instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Set.Fields.IResponse): anytype.Rpc.Block.Set.Fields.Response;

                        /**
                         * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Set.Fields.Response.verify|verify} messages.
                         * @param message Response message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Set.Fields.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Fields.Response.verify|verify} messages.
                         * @param message Response message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Set.Fields.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Response message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Response
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Fields.Response;

                        /**
                         * Decodes a Response message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Response
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Fields.Response;

                        /**
                         * Verifies a Response message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Response message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Response
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Fields.Response;

                        /**
                         * Creates a plain object from a Response message. Also converts values to other types if specified.
                         * @param message Response
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Set.Fields.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Response to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Response {

                        /** Properties of an Error. */
                        interface IError {

                            /** Error code */
                            code?: (anytype.Rpc.Block.Set.Fields.Response.Error.Code|null);

                            /** Error description */
                            description?: (string|null);
                        }

                        /** Represents an Error. */
                        class Error implements IError {

                            /**
                             * Constructs a new Error.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Fields.Response.IError);

                            /** Error code. */
                            public code: anytype.Rpc.Block.Set.Fields.Response.Error.Code;

                            /** Error description. */
                            public description: string;

                            /**
                             * Creates a new Error instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Error instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Fields.Response.IError): anytype.Rpc.Block.Set.Fields.Response.Error;

                            /**
                             * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Set.Fields.Response.Error.verify|verify} messages.
                             * @param message Error message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Fields.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Fields.Response.Error.verify|verify} messages.
                             * @param message Error message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Fields.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes an Error message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Error
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Fields.Response.Error;

                            /**
                             * Decodes an Error message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Error
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Fields.Response.Error;

                            /**
                             * Verifies an Error message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates an Error message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Error
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Fields.Response.Error;

                            /**
                             * Creates a plain object from an Error message. Also converts values to other types if specified.
                             * @param message Error
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Fields.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Error to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Error {

                            /** Code enum. */
                            enum Code {
                                NULL = 0,
                                UNKNOWN_ERROR = 1,
                                BAD_INPUT = 2
                            }
                        }
                    }
                }

                /** Properties of a Restrictions. */
                interface IRestrictions {
                }

                /** Represents a Restrictions. */
                class Restrictions implements IRestrictions {

                    /**
                     * Constructs a new Restrictions.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Set.IRestrictions);

                    /**
                     * Creates a new Restrictions instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Restrictions instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Set.IRestrictions): anytype.Rpc.Block.Set.Restrictions;

                    /**
                     * Encodes the specified Restrictions message. Does not implicitly {@link anytype.Rpc.Block.Set.Restrictions.verify|verify} messages.
                     * @param message Restrictions message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Set.IRestrictions, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Restrictions message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Restrictions.verify|verify} messages.
                     * @param message Restrictions message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Set.IRestrictions, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Restrictions message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Restrictions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Restrictions;

                    /**
                     * Decodes a Restrictions message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Restrictions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Restrictions;

                    /**
                     * Verifies a Restrictions message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Restrictions message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Restrictions
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Restrictions;

                    /**
                     * Creates a plain object from a Restrictions message. Also converts values to other types if specified.
                     * @param message Restrictions
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Set.Restrictions, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Restrictions to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Restrictions {

                    /** Properties of a Request. */
                    interface IRequest {

                        /** Request contextId */
                        contextId?: (string|null);

                        /** Request blockId */
                        blockId?: (string|null);

                        /** Request restrictions */
                        restrictions?: (anytype.model.Block.IRestrictions|null);
                    }

                    /** Represents a Request. */
                    class Request implements IRequest {

                        /**
                         * Constructs a new Request.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Set.Restrictions.IRequest);

                        /** Request contextId. */
                        public contextId: string;

                        /** Request blockId. */
                        public blockId: string;

                        /** Request restrictions. */
                        public restrictions?: (anytype.model.Block.IRestrictions|null);

                        /**
                         * Creates a new Request instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Request instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Set.Restrictions.IRequest): anytype.Rpc.Block.Set.Restrictions.Request;

                        /**
                         * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Set.Restrictions.Request.verify|verify} messages.
                         * @param message Request message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Set.Restrictions.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Restrictions.Request.verify|verify} messages.
                         * @param message Request message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Set.Restrictions.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Request message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Request
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Restrictions.Request;

                        /**
                         * Decodes a Request message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Request
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Restrictions.Request;

                        /**
                         * Verifies a Request message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Request message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Request
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Restrictions.Request;

                        /**
                         * Creates a plain object from a Request message. Also converts values to other types if specified.
                         * @param message Request
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Set.Restrictions.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Request to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Response. */
                    interface IResponse {

                        /** Response error */
                        error?: (anytype.Rpc.Block.Set.Restrictions.Response.IError|null);
                    }

                    /** Represents a Response. */
                    class Response implements IResponse {

                        /**
                         * Constructs a new Response.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Set.Restrictions.IResponse);

                        /** Response error. */
                        public error?: (anytype.Rpc.Block.Set.Restrictions.Response.IError|null);

                        /**
                         * Creates a new Response instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Response instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Set.Restrictions.IResponse): anytype.Rpc.Block.Set.Restrictions.Response;

                        /**
                         * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Set.Restrictions.Response.verify|verify} messages.
                         * @param message Response message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Set.Restrictions.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Restrictions.Response.verify|verify} messages.
                         * @param message Response message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Set.Restrictions.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Response message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Response
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Restrictions.Response;

                        /**
                         * Decodes a Response message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Response
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Restrictions.Response;

                        /**
                         * Verifies a Response message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Response message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Response
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Restrictions.Response;

                        /**
                         * Creates a plain object from a Response message. Also converts values to other types if specified.
                         * @param message Response
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Set.Restrictions.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Response to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Response {

                        /** Properties of an Error. */
                        interface IError {

                            /** Error code */
                            code?: (anytype.Rpc.Block.Set.Restrictions.Response.Error.Code|null);

                            /** Error description */
                            description?: (string|null);
                        }

                        /** Represents an Error. */
                        class Error implements IError {

                            /**
                             * Constructs a new Error.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Restrictions.Response.IError);

                            /** Error code. */
                            public code: anytype.Rpc.Block.Set.Restrictions.Response.Error.Code;

                            /** Error description. */
                            public description: string;

                            /**
                             * Creates a new Error instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Error instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Restrictions.Response.IError): anytype.Rpc.Block.Set.Restrictions.Response.Error;

                            /**
                             * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Set.Restrictions.Response.Error.verify|verify} messages.
                             * @param message Error message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Restrictions.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Restrictions.Response.Error.verify|verify} messages.
                             * @param message Error message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Restrictions.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes an Error message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Error
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Restrictions.Response.Error;

                            /**
                             * Decodes an Error message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Error
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Restrictions.Response.Error;

                            /**
                             * Verifies an Error message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates an Error message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Error
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Restrictions.Response.Error;

                            /**
                             * Creates a plain object from an Error message. Also converts values to other types if specified.
                             * @param message Error
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Restrictions.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Error to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Error {

                            /** Code enum. */
                            enum Code {
                                NULL = 0,
                                UNKNOWN_ERROR = 1,
                                BAD_INPUT = 2
                            }
                        }
                    }
                }

                /** Properties of an IsArchived. */
                interface IIsArchived {
                }

                /** Represents an IsArchived. */
                class IsArchived implements IIsArchived {

                    /**
                     * Constructs a new IsArchived.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Set.IIsArchived);

                    /**
                     * Creates a new IsArchived instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns IsArchived instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Set.IIsArchived): anytype.Rpc.Block.Set.IsArchived;

                    /**
                     * Encodes the specified IsArchived message. Does not implicitly {@link anytype.Rpc.Block.Set.IsArchived.verify|verify} messages.
                     * @param message IsArchived message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Set.IIsArchived, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified IsArchived message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.IsArchived.verify|verify} messages.
                     * @param message IsArchived message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Set.IIsArchived, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an IsArchived message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns IsArchived
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.IsArchived;

                    /**
                     * Decodes an IsArchived message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns IsArchived
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.IsArchived;

                    /**
                     * Verifies an IsArchived message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an IsArchived message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns IsArchived
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.IsArchived;

                    /**
                     * Creates a plain object from an IsArchived message. Also converts values to other types if specified.
                     * @param message IsArchived
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Set.IsArchived, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this IsArchived to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace IsArchived {

                    /** Properties of a Request. */
                    interface IRequest {

                        /** Request contextId */
                        contextId?: (string|null);

                        /** Request blockId */
                        blockId?: (string|null);

                        /** Request IsArchived */
                        IsArchived?: (boolean|null);
                    }

                    /** Represents a Request. */
                    class Request implements IRequest {

                        /**
                         * Constructs a new Request.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Set.IsArchived.IRequest);

                        /** Request contextId. */
                        public contextId: string;

                        /** Request blockId. */
                        public blockId: string;

                        /** Request IsArchived. */
                        public IsArchived: boolean;

                        /**
                         * Creates a new Request instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Request instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Set.IsArchived.IRequest): anytype.Rpc.Block.Set.IsArchived.Request;

                        /**
                         * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Set.IsArchived.Request.verify|verify} messages.
                         * @param message Request message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Set.IsArchived.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.IsArchived.Request.verify|verify} messages.
                         * @param message Request message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Set.IsArchived.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Request message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Request
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.IsArchived.Request;

                        /**
                         * Decodes a Request message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Request
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.IsArchived.Request;

                        /**
                         * Verifies a Request message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Request message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Request
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.IsArchived.Request;

                        /**
                         * Creates a plain object from a Request message. Also converts values to other types if specified.
                         * @param message Request
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Set.IsArchived.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Request to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Response. */
                    interface IResponse {

                        /** Response error */
                        error?: (anytype.Rpc.Block.Set.IsArchived.Response.IError|null);
                    }

                    /** Represents a Response. */
                    class Response implements IResponse {

                        /**
                         * Constructs a new Response.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Set.IsArchived.IResponse);

                        /** Response error. */
                        public error?: (anytype.Rpc.Block.Set.IsArchived.Response.IError|null);

                        /**
                         * Creates a new Response instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Response instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Set.IsArchived.IResponse): anytype.Rpc.Block.Set.IsArchived.Response;

                        /**
                         * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Set.IsArchived.Response.verify|verify} messages.
                         * @param message Response message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Set.IsArchived.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.IsArchived.Response.verify|verify} messages.
                         * @param message Response message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Set.IsArchived.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Response message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Response
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.IsArchived.Response;

                        /**
                         * Decodes a Response message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Response
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.IsArchived.Response;

                        /**
                         * Verifies a Response message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Response message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Response
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.IsArchived.Response;

                        /**
                         * Creates a plain object from a Response message. Also converts values to other types if specified.
                         * @param message Response
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Set.IsArchived.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Response to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Response {

                        /** Properties of an Error. */
                        interface IError {

                            /** Error code */
                            code?: (anytype.Rpc.Block.Set.IsArchived.Response.Error.Code|null);

                            /** Error description */
                            description?: (string|null);
                        }

                        /** Represents an Error. */
                        class Error implements IError {

                            /**
                             * Constructs a new Error.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.IsArchived.Response.IError);

                            /** Error code. */
                            public code: anytype.Rpc.Block.Set.IsArchived.Response.Error.Code;

                            /** Error description. */
                            public description: string;

                            /**
                             * Creates a new Error instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Error instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.IsArchived.Response.IError): anytype.Rpc.Block.Set.IsArchived.Response.Error;

                            /**
                             * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Set.IsArchived.Response.Error.verify|verify} messages.
                             * @param message Error message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.IsArchived.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.IsArchived.Response.Error.verify|verify} messages.
                             * @param message Error message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.IsArchived.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes an Error message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Error
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.IsArchived.Response.Error;

                            /**
                             * Decodes an Error message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Error
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.IsArchived.Response.Error;

                            /**
                             * Verifies an Error message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates an Error message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Error
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.IsArchived.Response.Error;

                            /**
                             * Creates a plain object from an Error message. Also converts values to other types if specified.
                             * @param message Error
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.IsArchived.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Error to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Error {

                            /** Code enum. */
                            enum Code {
                                NULL = 0,
                                UNKNOWN_ERROR = 1,
                                BAD_INPUT = 2
                            }
                        }
                    }
                }

                /** Properties of a Text. */
                interface IText {
                }

                /** Represents a Text. */
                class Text implements IText {

                    /**
                     * Constructs a new Text.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Set.IText);

                    /**
                     * Creates a new Text instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Text instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Set.IText): anytype.Rpc.Block.Set.Text;

                    /**
                     * Encodes the specified Text message. Does not implicitly {@link anytype.Rpc.Block.Set.Text.verify|verify} messages.
                     * @param message Text message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Set.IText, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Text message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Text.verify|verify} messages.
                     * @param message Text message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Set.IText, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Text message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Text
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Text;

                    /**
                     * Decodes a Text message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Text
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Text;

                    /**
                     * Verifies a Text message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Text message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Text
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Text;

                    /**
                     * Creates a plain object from a Text message. Also converts values to other types if specified.
                     * @param message Text
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Set.Text, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Text to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Text {

                    /** Properties of a Text. */
                    interface IText {
                    }

                    /** Represents a Text. */
                    class Text implements IText {

                        /**
                         * Constructs a new Text.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Set.Text.IText);

                        /**
                         * Creates a new Text instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Text instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Set.Text.IText): anytype.Rpc.Block.Set.Text.Text;

                        /**
                         * Encodes the specified Text message. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Text.verify|verify} messages.
                         * @param message Text message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Set.Text.IText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Text message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Text.verify|verify} messages.
                         * @param message Text message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Set.Text.IText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Text message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Text
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Text.Text;

                        /**
                         * Decodes a Text message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Text
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Text.Text;

                        /**
                         * Verifies a Text message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Text message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Text
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Text.Text;

                        /**
                         * Creates a plain object from a Text message. Also converts values to other types if specified.
                         * @param message Text
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Set.Text.Text, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Text to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Text {

                        /** Properties of a Request. */
                        interface IRequest {

                            /** Request contextId */
                            contextId?: (string|null);

                            /** Request blockId */
                            blockId?: (string|null);

                            /** Request text */
                            text?: (string|null);

                            /** Request marks */
                            marks?: (anytype.model.Block.Content.Text.IMarks|null);
                        }

                        /** Represents a Request. */
                        class Request implements IRequest {

                            /**
                             * Constructs a new Request.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Text.Text.IRequest);

                            /** Request contextId. */
                            public contextId: string;

                            /** Request blockId. */
                            public blockId: string;

                            /** Request text. */
                            public text: string;

                            /** Request marks. */
                            public marks?: (anytype.model.Block.Content.Text.IMarks|null);

                            /**
                             * Creates a new Request instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Request instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Text.Text.IRequest): anytype.Rpc.Block.Set.Text.Text.Request;

                            /**
                             * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Text.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Text.Text.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Text.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Text.Text.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Request message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Text.Text.Request;

                            /**
                             * Decodes a Request message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Text.Text.Request;

                            /**
                             * Verifies a Request message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Request message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Request
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Text.Text.Request;

                            /**
                             * Creates a plain object from a Request message. Also converts values to other types if specified.
                             * @param message Request
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Text.Text.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Request to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        /** Properties of a Response. */
                        interface IResponse {

                            /** Response error */
                            error?: (anytype.Rpc.Block.Set.Text.Text.Response.IError|null);
                        }

                        /** Represents a Response. */
                        class Response implements IResponse {

                            /**
                             * Constructs a new Response.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Text.Text.IResponse);

                            /** Response error. */
                            public error?: (anytype.Rpc.Block.Set.Text.Text.Response.IError|null);

                            /**
                             * Creates a new Response instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Response instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Text.Text.IResponse): anytype.Rpc.Block.Set.Text.Text.Response;

                            /**
                             * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Text.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Text.Text.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Text.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Text.Text.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Response message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Text.Text.Response;

                            /**
                             * Decodes a Response message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Text.Text.Response;

                            /**
                             * Verifies a Response message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Response message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Response
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Text.Text.Response;

                            /**
                             * Creates a plain object from a Response message. Also converts values to other types if specified.
                             * @param message Response
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Text.Text.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Response to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Response {

                            /** Properties of an Error. */
                            interface IError {

                                /** Error code */
                                code?: (anytype.Rpc.Block.Set.Text.Text.Response.Error.Code|null);

                                /** Error description */
                                description?: (string|null);
                            }

                            /** Represents an Error. */
                            class Error implements IError {

                                /**
                                 * Constructs a new Error.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: anytype.Rpc.Block.Set.Text.Text.Response.IError);

                                /** Error code. */
                                public code: anytype.Rpc.Block.Set.Text.Text.Response.Error.Code;

                                /** Error description. */
                                public description: string;

                                /**
                                 * Creates a new Error instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns Error instance
                                 */
                                public static create(properties?: anytype.Rpc.Block.Set.Text.Text.Response.IError): anytype.Rpc.Block.Set.Text.Text.Response.Error;

                                /**
                                 * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Text.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: anytype.Rpc.Block.Set.Text.Text.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Text.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: anytype.Rpc.Block.Set.Text.Text.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes an Error message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Text.Text.Response.Error;

                                /**
                                 * Decodes an Error message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Text.Text.Response.Error;

                                /**
                                 * Verifies an Error message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates an Error message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns Error
                                 */
                                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Text.Text.Response.Error;

                                /**
                                 * Creates a plain object from an Error message. Also converts values to other types if specified.
                                 * @param message Error
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: anytype.Rpc.Block.Set.Text.Text.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this Error to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };
                            }

                            namespace Error {

                                /** Code enum. */
                                enum Code {
                                    NULL = 0,
                                    UNKNOWN_ERROR = 1,
                                    BAD_INPUT = 2
                                }
                            }
                        }
                    }

                    /** Properties of a Color. */
                    interface IColor {
                    }

                    /** Represents a Color. */
                    class Color implements IColor {

                        /**
                         * Constructs a new Color.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Set.Text.IColor);

                        /**
                         * Creates a new Color instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Color instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Set.Text.IColor): anytype.Rpc.Block.Set.Text.Color;

                        /**
                         * Encodes the specified Color message. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Color.verify|verify} messages.
                         * @param message Color message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Set.Text.IColor, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Color message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Color.verify|verify} messages.
                         * @param message Color message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Set.Text.IColor, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Color message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Color
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Text.Color;

                        /**
                         * Decodes a Color message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Color
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Text.Color;

                        /**
                         * Verifies a Color message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Color message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Color
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Text.Color;

                        /**
                         * Creates a plain object from a Color message. Also converts values to other types if specified.
                         * @param message Color
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Set.Text.Color, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Color to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Color {

                        /** Properties of a Request. */
                        interface IRequest {

                            /** Request contextId */
                            contextId?: (string|null);

                            /** Request blockId */
                            blockId?: (string|null);

                            /** Request color */
                            color?: (string|null);
                        }

                        /** Represents a Request. */
                        class Request implements IRequest {

                            /**
                             * Constructs a new Request.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Text.Color.IRequest);

                            /** Request contextId. */
                            public contextId: string;

                            /** Request blockId. */
                            public blockId: string;

                            /** Request color. */
                            public color: string;

                            /**
                             * Creates a new Request instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Request instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Text.Color.IRequest): anytype.Rpc.Block.Set.Text.Color.Request;

                            /**
                             * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Color.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Text.Color.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Color.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Text.Color.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Request message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Text.Color.Request;

                            /**
                             * Decodes a Request message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Text.Color.Request;

                            /**
                             * Verifies a Request message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Request message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Request
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Text.Color.Request;

                            /**
                             * Creates a plain object from a Request message. Also converts values to other types if specified.
                             * @param message Request
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Text.Color.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Request to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        /** Properties of a Response. */
                        interface IResponse {

                            /** Response error */
                            error?: (anytype.Rpc.Block.Set.Text.Color.Response.IError|null);
                        }

                        /** Represents a Response. */
                        class Response implements IResponse {

                            /**
                             * Constructs a new Response.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Text.Color.IResponse);

                            /** Response error. */
                            public error?: (anytype.Rpc.Block.Set.Text.Color.Response.IError|null);

                            /**
                             * Creates a new Response instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Response instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Text.Color.IResponse): anytype.Rpc.Block.Set.Text.Color.Response;

                            /**
                             * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Color.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Text.Color.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Color.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Text.Color.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Response message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Text.Color.Response;

                            /**
                             * Decodes a Response message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Text.Color.Response;

                            /**
                             * Verifies a Response message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Response message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Response
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Text.Color.Response;

                            /**
                             * Creates a plain object from a Response message. Also converts values to other types if specified.
                             * @param message Response
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Text.Color.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Response to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Response {

                            /** Properties of an Error. */
                            interface IError {

                                /** Error code */
                                code?: (anytype.Rpc.Block.Set.Text.Color.Response.Error.Code|null);

                                /** Error description */
                                description?: (string|null);
                            }

                            /** Represents an Error. */
                            class Error implements IError {

                                /**
                                 * Constructs a new Error.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: anytype.Rpc.Block.Set.Text.Color.Response.IError);

                                /** Error code. */
                                public code: anytype.Rpc.Block.Set.Text.Color.Response.Error.Code;

                                /** Error description. */
                                public description: string;

                                /**
                                 * Creates a new Error instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns Error instance
                                 */
                                public static create(properties?: anytype.Rpc.Block.Set.Text.Color.Response.IError): anytype.Rpc.Block.Set.Text.Color.Response.Error;

                                /**
                                 * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Color.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: anytype.Rpc.Block.Set.Text.Color.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Color.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: anytype.Rpc.Block.Set.Text.Color.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes an Error message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Text.Color.Response.Error;

                                /**
                                 * Decodes an Error message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Text.Color.Response.Error;

                                /**
                                 * Verifies an Error message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates an Error message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns Error
                                 */
                                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Text.Color.Response.Error;

                                /**
                                 * Creates a plain object from an Error message. Also converts values to other types if specified.
                                 * @param message Error
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: anytype.Rpc.Block.Set.Text.Color.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this Error to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };
                            }

                            namespace Error {

                                /** Code enum. */
                                enum Code {
                                    NULL = 0,
                                    UNKNOWN_ERROR = 1,
                                    BAD_INPUT = 2
                                }
                            }
                        }
                    }

                    /** Properties of a BackgroundColor. */
                    interface IBackgroundColor {
                    }

                    /** Represents a BackgroundColor. */
                    class BackgroundColor implements IBackgroundColor {

                        /**
                         * Constructs a new BackgroundColor.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Set.Text.IBackgroundColor);

                        /**
                         * Creates a new BackgroundColor instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns BackgroundColor instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Set.Text.IBackgroundColor): anytype.Rpc.Block.Set.Text.BackgroundColor;

                        /**
                         * Encodes the specified BackgroundColor message. Does not implicitly {@link anytype.Rpc.Block.Set.Text.BackgroundColor.verify|verify} messages.
                         * @param message BackgroundColor message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Set.Text.IBackgroundColor, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified BackgroundColor message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Text.BackgroundColor.verify|verify} messages.
                         * @param message BackgroundColor message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Set.Text.IBackgroundColor, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a BackgroundColor message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns BackgroundColor
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Text.BackgroundColor;

                        /**
                         * Decodes a BackgroundColor message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns BackgroundColor
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Text.BackgroundColor;

                        /**
                         * Verifies a BackgroundColor message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a BackgroundColor message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns BackgroundColor
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Text.BackgroundColor;

                        /**
                         * Creates a plain object from a BackgroundColor message. Also converts values to other types if specified.
                         * @param message BackgroundColor
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Set.Text.BackgroundColor, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this BackgroundColor to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace BackgroundColor {

                        /** Properties of a Request. */
                        interface IRequest {

                            /** Request contextId */
                            contextId?: (string|null);

                            /** Request blockId */
                            blockId?: (string|null);

                            /** Request color */
                            color?: (string|null);
                        }

                        /** Represents a Request. */
                        class Request implements IRequest {

                            /**
                             * Constructs a new Request.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Text.BackgroundColor.IRequest);

                            /** Request contextId. */
                            public contextId: string;

                            /** Request blockId. */
                            public blockId: string;

                            /** Request color. */
                            public color: string;

                            /**
                             * Creates a new Request instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Request instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Text.BackgroundColor.IRequest): anytype.Rpc.Block.Set.Text.BackgroundColor.Request;

                            /**
                             * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Set.Text.BackgroundColor.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Text.BackgroundColor.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Text.BackgroundColor.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Text.BackgroundColor.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Request message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Text.BackgroundColor.Request;

                            /**
                             * Decodes a Request message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Text.BackgroundColor.Request;

                            /**
                             * Verifies a Request message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Request message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Request
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Text.BackgroundColor.Request;

                            /**
                             * Creates a plain object from a Request message. Also converts values to other types if specified.
                             * @param message Request
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Text.BackgroundColor.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Request to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        /** Properties of a Response. */
                        interface IResponse {

                            /** Response error */
                            error?: (anytype.Rpc.Block.Set.Text.BackgroundColor.Response.IError|null);
                        }

                        /** Represents a Response. */
                        class Response implements IResponse {

                            /**
                             * Constructs a new Response.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Text.BackgroundColor.IResponse);

                            /** Response error. */
                            public error?: (anytype.Rpc.Block.Set.Text.BackgroundColor.Response.IError|null);

                            /**
                             * Creates a new Response instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Response instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Text.BackgroundColor.IResponse): anytype.Rpc.Block.Set.Text.BackgroundColor.Response;

                            /**
                             * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Set.Text.BackgroundColor.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Text.BackgroundColor.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Text.BackgroundColor.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Text.BackgroundColor.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Response message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Text.BackgroundColor.Response;

                            /**
                             * Decodes a Response message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Text.BackgroundColor.Response;

                            /**
                             * Verifies a Response message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Response message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Response
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Text.BackgroundColor.Response;

                            /**
                             * Creates a plain object from a Response message. Also converts values to other types if specified.
                             * @param message Response
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Text.BackgroundColor.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Response to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Response {

                            /** Properties of an Error. */
                            interface IError {

                                /** Error code */
                                code?: (anytype.Rpc.Block.Set.Text.BackgroundColor.Response.Error.Code|null);

                                /** Error description */
                                description?: (string|null);
                            }

                            /** Represents an Error. */
                            class Error implements IError {

                                /**
                                 * Constructs a new Error.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: anytype.Rpc.Block.Set.Text.BackgroundColor.Response.IError);

                                /** Error code. */
                                public code: anytype.Rpc.Block.Set.Text.BackgroundColor.Response.Error.Code;

                                /** Error description. */
                                public description: string;

                                /**
                                 * Creates a new Error instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns Error instance
                                 */
                                public static create(properties?: anytype.Rpc.Block.Set.Text.BackgroundColor.Response.IError): anytype.Rpc.Block.Set.Text.BackgroundColor.Response.Error;

                                /**
                                 * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Set.Text.BackgroundColor.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: anytype.Rpc.Block.Set.Text.BackgroundColor.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Text.BackgroundColor.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: anytype.Rpc.Block.Set.Text.BackgroundColor.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes an Error message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Text.BackgroundColor.Response.Error;

                                /**
                                 * Decodes an Error message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Text.BackgroundColor.Response.Error;

                                /**
                                 * Verifies an Error message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates an Error message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns Error
                                 */
                                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Text.BackgroundColor.Response.Error;

                                /**
                                 * Creates a plain object from an Error message. Also converts values to other types if specified.
                                 * @param message Error
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: anytype.Rpc.Block.Set.Text.BackgroundColor.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this Error to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };
                            }

                            namespace Error {

                                /** Code enum. */
                                enum Code {
                                    NULL = 0,
                                    UNKNOWN_ERROR = 1,
                                    BAD_INPUT = 2
                                }
                            }
                        }
                    }

                    /** Properties of a Style. */
                    interface IStyle {
                    }

                    /** Represents a Style. */
                    class Style implements IStyle {

                        /**
                         * Constructs a new Style.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Set.Text.IStyle);

                        /**
                         * Creates a new Style instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Style instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Set.Text.IStyle): anytype.Rpc.Block.Set.Text.Style;

                        /**
                         * Encodes the specified Style message. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Style.verify|verify} messages.
                         * @param message Style message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Set.Text.IStyle, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Style message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Style.verify|verify} messages.
                         * @param message Style message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Set.Text.IStyle, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Style message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Style
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Text.Style;

                        /**
                         * Decodes a Style message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Style
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Text.Style;

                        /**
                         * Verifies a Style message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Style message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Style
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Text.Style;

                        /**
                         * Creates a plain object from a Style message. Also converts values to other types if specified.
                         * @param message Style
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Set.Text.Style, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Style to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Style {

                        /** Properties of a Request. */
                        interface IRequest {

                            /** Request contextId */
                            contextId?: (string|null);

                            /** Request blockId */
                            blockId?: (string|null);

                            /** Request style */
                            style?: (anytype.model.Block.Content.Text.Style|null);
                        }

                        /** Represents a Request. */
                        class Request implements IRequest {

                            /**
                             * Constructs a new Request.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Text.Style.IRequest);

                            /** Request contextId. */
                            public contextId: string;

                            /** Request blockId. */
                            public blockId: string;

                            /** Request style. */
                            public style: anytype.model.Block.Content.Text.Style;

                            /**
                             * Creates a new Request instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Request instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Text.Style.IRequest): anytype.Rpc.Block.Set.Text.Style.Request;

                            /**
                             * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Style.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Text.Style.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Style.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Text.Style.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Request message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Text.Style.Request;

                            /**
                             * Decodes a Request message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Text.Style.Request;

                            /**
                             * Verifies a Request message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Request message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Request
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Text.Style.Request;

                            /**
                             * Creates a plain object from a Request message. Also converts values to other types if specified.
                             * @param message Request
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Text.Style.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Request to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        /** Properties of a Response. */
                        interface IResponse {

                            /** Response error */
                            error?: (anytype.Rpc.Block.Set.Text.Style.Response.IError|null);
                        }

                        /** Represents a Response. */
                        class Response implements IResponse {

                            /**
                             * Constructs a new Response.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Text.Style.IResponse);

                            /** Response error. */
                            public error?: (anytype.Rpc.Block.Set.Text.Style.Response.IError|null);

                            /**
                             * Creates a new Response instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Response instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Text.Style.IResponse): anytype.Rpc.Block.Set.Text.Style.Response;

                            /**
                             * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Style.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Text.Style.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Style.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Text.Style.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Response message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Text.Style.Response;

                            /**
                             * Decodes a Response message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Text.Style.Response;

                            /**
                             * Verifies a Response message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Response message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Response
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Text.Style.Response;

                            /**
                             * Creates a plain object from a Response message. Also converts values to other types if specified.
                             * @param message Response
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Text.Style.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Response to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Response {

                            /** Properties of an Error. */
                            interface IError {

                                /** Error code */
                                code?: (anytype.Rpc.Block.Set.Text.Style.Response.Error.Code|null);

                                /** Error description */
                                description?: (string|null);
                            }

                            /** Represents an Error. */
                            class Error implements IError {

                                /**
                                 * Constructs a new Error.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: anytype.Rpc.Block.Set.Text.Style.Response.IError);

                                /** Error code. */
                                public code: anytype.Rpc.Block.Set.Text.Style.Response.Error.Code;

                                /** Error description. */
                                public description: string;

                                /**
                                 * Creates a new Error instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns Error instance
                                 */
                                public static create(properties?: anytype.Rpc.Block.Set.Text.Style.Response.IError): anytype.Rpc.Block.Set.Text.Style.Response.Error;

                                /**
                                 * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Style.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: anytype.Rpc.Block.Set.Text.Style.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Style.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: anytype.Rpc.Block.Set.Text.Style.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes an Error message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Text.Style.Response.Error;

                                /**
                                 * Decodes an Error message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Text.Style.Response.Error;

                                /**
                                 * Verifies an Error message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates an Error message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns Error
                                 */
                                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Text.Style.Response.Error;

                                /**
                                 * Creates a plain object from an Error message. Also converts values to other types if specified.
                                 * @param message Error
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: anytype.Rpc.Block.Set.Text.Style.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this Error to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };
                            }

                            namespace Error {

                                /** Code enum. */
                                enum Code {
                                    NULL = 0,
                                    UNKNOWN_ERROR = 1,
                                    BAD_INPUT = 2
                                }
                            }
                        }
                    }

                    /** Properties of a Checked. */
                    interface IChecked {
                    }

                    /** Represents a Checked. */
                    class Checked implements IChecked {

                        /**
                         * Constructs a new Checked.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Set.Text.IChecked);

                        /**
                         * Creates a new Checked instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Checked instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Set.Text.IChecked): anytype.Rpc.Block.Set.Text.Checked;

                        /**
                         * Encodes the specified Checked message. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Checked.verify|verify} messages.
                         * @param message Checked message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Set.Text.IChecked, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Checked message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Checked.verify|verify} messages.
                         * @param message Checked message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Set.Text.IChecked, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Checked message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Checked
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Text.Checked;

                        /**
                         * Decodes a Checked message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Checked
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Text.Checked;

                        /**
                         * Verifies a Checked message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Checked message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Checked
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Text.Checked;

                        /**
                         * Creates a plain object from a Checked message. Also converts values to other types if specified.
                         * @param message Checked
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Set.Text.Checked, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Checked to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Checked {

                        /** Properties of a Request. */
                        interface IRequest {

                            /** Request contextId */
                            contextId?: (string|null);

                            /** Request blockId */
                            blockId?: (string|null);

                            /** Request checked */
                            checked?: (boolean|null);
                        }

                        /** Represents a Request. */
                        class Request implements IRequest {

                            /**
                             * Constructs a new Request.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Text.Checked.IRequest);

                            /** Request contextId. */
                            public contextId: string;

                            /** Request blockId. */
                            public blockId: string;

                            /** Request checked. */
                            public checked: boolean;

                            /**
                             * Creates a new Request instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Request instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Text.Checked.IRequest): anytype.Rpc.Block.Set.Text.Checked.Request;

                            /**
                             * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Checked.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Text.Checked.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Checked.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Text.Checked.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Request message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Text.Checked.Request;

                            /**
                             * Decodes a Request message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Text.Checked.Request;

                            /**
                             * Verifies a Request message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Request message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Request
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Text.Checked.Request;

                            /**
                             * Creates a plain object from a Request message. Also converts values to other types if specified.
                             * @param message Request
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Text.Checked.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Request to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        /** Properties of a Response. */
                        interface IResponse {

                            /** Response error */
                            error?: (anytype.Rpc.Block.Set.Text.Checked.Response.IError|null);
                        }

                        /** Represents a Response. */
                        class Response implements IResponse {

                            /**
                             * Constructs a new Response.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Text.Checked.IResponse);

                            /** Response error. */
                            public error?: (anytype.Rpc.Block.Set.Text.Checked.Response.IError|null);

                            /**
                             * Creates a new Response instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Response instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Text.Checked.IResponse): anytype.Rpc.Block.Set.Text.Checked.Response;

                            /**
                             * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Checked.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Text.Checked.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Checked.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Text.Checked.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Response message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Text.Checked.Response;

                            /**
                             * Decodes a Response message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Text.Checked.Response;

                            /**
                             * Verifies a Response message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Response message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Response
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Text.Checked.Response;

                            /**
                             * Creates a plain object from a Response message. Also converts values to other types if specified.
                             * @param message Response
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Text.Checked.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Response to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Response {

                            /** Properties of an Error. */
                            interface IError {

                                /** Error code */
                                code?: (anytype.Rpc.Block.Set.Text.Checked.Response.Error.Code|null);

                                /** Error description */
                                description?: (string|null);
                            }

                            /** Represents an Error. */
                            class Error implements IError {

                                /**
                                 * Constructs a new Error.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: anytype.Rpc.Block.Set.Text.Checked.Response.IError);

                                /** Error code. */
                                public code: anytype.Rpc.Block.Set.Text.Checked.Response.Error.Code;

                                /** Error description. */
                                public description: string;

                                /**
                                 * Creates a new Error instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns Error instance
                                 */
                                public static create(properties?: anytype.Rpc.Block.Set.Text.Checked.Response.IError): anytype.Rpc.Block.Set.Text.Checked.Response.Error;

                                /**
                                 * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Checked.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: anytype.Rpc.Block.Set.Text.Checked.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Text.Checked.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: anytype.Rpc.Block.Set.Text.Checked.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes an Error message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Text.Checked.Response.Error;

                                /**
                                 * Decodes an Error message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Text.Checked.Response.Error;

                                /**
                                 * Verifies an Error message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates an Error message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns Error
                                 */
                                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Text.Checked.Response.Error;

                                /**
                                 * Creates a plain object from an Error message. Also converts values to other types if specified.
                                 * @param message Error
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: anytype.Rpc.Block.Set.Text.Checked.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this Error to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };
                            }

                            namespace Error {

                                /** Code enum. */
                                enum Code {
                                    NULL = 0,
                                    UNKNOWN_ERROR = 1,
                                    BAD_INPUT = 2
                                }
                            }
                        }
                    }
                }

                /** Properties of a File. */
                interface IFile {
                }

                /** Represents a File. */
                class File implements IFile {

                    /**
                     * Constructs a new File.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Set.IFile);

                    /**
                     * Creates a new File instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns File instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Set.IFile): anytype.Rpc.Block.Set.File;

                    /**
                     * Encodes the specified File message. Does not implicitly {@link anytype.Rpc.Block.Set.File.verify|verify} messages.
                     * @param message File message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Set.IFile, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified File message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.File.verify|verify} messages.
                     * @param message File message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Set.IFile, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a File message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns File
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.File;

                    /**
                     * Decodes a File message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns File
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.File;

                    /**
                     * Verifies a File message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a File message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns File
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.File;

                    /**
                     * Creates a plain object from a File message. Also converts values to other types if specified.
                     * @param message File
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Set.File, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this File to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace File {

                    /** Properties of a Name. */
                    interface IName {
                    }

                    /** Represents a Name. */
                    class Name implements IName {

                        /**
                         * Constructs a new Name.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Set.File.IName);

                        /**
                         * Creates a new Name instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Name instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Set.File.IName): anytype.Rpc.Block.Set.File.Name;

                        /**
                         * Encodes the specified Name message. Does not implicitly {@link anytype.Rpc.Block.Set.File.Name.verify|verify} messages.
                         * @param message Name message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Set.File.IName, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Name message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.File.Name.verify|verify} messages.
                         * @param message Name message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Set.File.IName, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Name message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Name
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.File.Name;

                        /**
                         * Decodes a Name message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Name
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.File.Name;

                        /**
                         * Verifies a Name message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Name message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Name
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.File.Name;

                        /**
                         * Creates a plain object from a Name message. Also converts values to other types if specified.
                         * @param message Name
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Set.File.Name, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Name to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Name {

                        /** Properties of a Request. */
                        interface IRequest {

                            /** Request contextId */
                            contextId?: (string|null);

                            /** Request blockId */
                            blockId?: (string|null);

                            /** Request name */
                            name?: (string|null);
                        }

                        /** Represents a Request. */
                        class Request implements IRequest {

                            /**
                             * Constructs a new Request.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.File.Name.IRequest);

                            /** Request contextId. */
                            public contextId: string;

                            /** Request blockId. */
                            public blockId: string;

                            /** Request name. */
                            public name: string;

                            /**
                             * Creates a new Request instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Request instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.File.Name.IRequest): anytype.Rpc.Block.Set.File.Name.Request;

                            /**
                             * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Set.File.Name.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.File.Name.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.File.Name.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.File.Name.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Request message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.File.Name.Request;

                            /**
                             * Decodes a Request message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.File.Name.Request;

                            /**
                             * Verifies a Request message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Request message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Request
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.File.Name.Request;

                            /**
                             * Creates a plain object from a Request message. Also converts values to other types if specified.
                             * @param message Request
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.File.Name.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Request to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        /** Properties of a Response. */
                        interface IResponse {

                            /** Response error */
                            error?: (anytype.Rpc.Block.Set.File.Name.Response.IError|null);
                        }

                        /** Represents a Response. */
                        class Response implements IResponse {

                            /**
                             * Constructs a new Response.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.File.Name.IResponse);

                            /** Response error. */
                            public error?: (anytype.Rpc.Block.Set.File.Name.Response.IError|null);

                            /**
                             * Creates a new Response instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Response instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.File.Name.IResponse): anytype.Rpc.Block.Set.File.Name.Response;

                            /**
                             * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Set.File.Name.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.File.Name.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.File.Name.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.File.Name.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Response message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.File.Name.Response;

                            /**
                             * Decodes a Response message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.File.Name.Response;

                            /**
                             * Verifies a Response message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Response message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Response
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.File.Name.Response;

                            /**
                             * Creates a plain object from a Response message. Also converts values to other types if specified.
                             * @param message Response
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.File.Name.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Response to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Response {

                            /** Properties of an Error. */
                            interface IError {

                                /** Error code */
                                code?: (anytype.Rpc.Block.Set.File.Name.Response.Error.Code|null);

                                /** Error description */
                                description?: (string|null);
                            }

                            /** Represents an Error. */
                            class Error implements IError {

                                /**
                                 * Constructs a new Error.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: anytype.Rpc.Block.Set.File.Name.Response.IError);

                                /** Error code. */
                                public code: anytype.Rpc.Block.Set.File.Name.Response.Error.Code;

                                /** Error description. */
                                public description: string;

                                /**
                                 * Creates a new Error instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns Error instance
                                 */
                                public static create(properties?: anytype.Rpc.Block.Set.File.Name.Response.IError): anytype.Rpc.Block.Set.File.Name.Response.Error;

                                /**
                                 * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Set.File.Name.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: anytype.Rpc.Block.Set.File.Name.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.File.Name.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: anytype.Rpc.Block.Set.File.Name.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes an Error message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.File.Name.Response.Error;

                                /**
                                 * Decodes an Error message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.File.Name.Response.Error;

                                /**
                                 * Verifies an Error message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates an Error message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns Error
                                 */
                                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.File.Name.Response.Error;

                                /**
                                 * Creates a plain object from an Error message. Also converts values to other types if specified.
                                 * @param message Error
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: anytype.Rpc.Block.Set.File.Name.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this Error to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };
                            }

                            namespace Error {

                                /** Code enum. */
                                enum Code {
                                    NULL = 0,
                                    UNKNOWN_ERROR = 1,
                                    BAD_INPUT = 2
                                }
                            }
                        }
                    }
                }

                /** Properties of an Image. */
                interface IImage {
                }

                /** Represents an Image. */
                class Image implements IImage {

                    /**
                     * Constructs a new Image.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Set.IImage);

                    /**
                     * Creates a new Image instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Image instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Set.IImage): anytype.Rpc.Block.Set.Image;

                    /**
                     * Encodes the specified Image message. Does not implicitly {@link anytype.Rpc.Block.Set.Image.verify|verify} messages.
                     * @param message Image message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Set.IImage, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Image message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Image.verify|verify} messages.
                     * @param message Image message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Set.IImage, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an Image message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Image
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Image;

                    /**
                     * Decodes an Image message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Image
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Image;

                    /**
                     * Verifies an Image message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an Image message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Image
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Image;

                    /**
                     * Creates a plain object from an Image message. Also converts values to other types if specified.
                     * @param message Image
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Set.Image, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Image to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Image {

                    /** Properties of a Name. */
                    interface IName {
                    }

                    /** Represents a Name. */
                    class Name implements IName {

                        /**
                         * Constructs a new Name.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Set.Image.IName);

                        /**
                         * Creates a new Name instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Name instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Set.Image.IName): anytype.Rpc.Block.Set.Image.Name;

                        /**
                         * Encodes the specified Name message. Does not implicitly {@link anytype.Rpc.Block.Set.Image.Name.verify|verify} messages.
                         * @param message Name message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Set.Image.IName, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Name message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Image.Name.verify|verify} messages.
                         * @param message Name message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Set.Image.IName, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Name message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Name
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Image.Name;

                        /**
                         * Decodes a Name message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Name
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Image.Name;

                        /**
                         * Verifies a Name message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Name message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Name
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Image.Name;

                        /**
                         * Creates a plain object from a Name message. Also converts values to other types if specified.
                         * @param message Name
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Set.Image.Name, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Name to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Name {

                        /** Properties of a Request. */
                        interface IRequest {

                            /** Request contextId */
                            contextId?: (string|null);

                            /** Request blockId */
                            blockId?: (string|null);

                            /** Request name */
                            name?: (string|null);
                        }

                        /** Represents a Request. */
                        class Request implements IRequest {

                            /**
                             * Constructs a new Request.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Image.Name.IRequest);

                            /** Request contextId. */
                            public contextId: string;

                            /** Request blockId. */
                            public blockId: string;

                            /** Request name. */
                            public name: string;

                            /**
                             * Creates a new Request instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Request instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Image.Name.IRequest): anytype.Rpc.Block.Set.Image.Name.Request;

                            /**
                             * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Set.Image.Name.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Image.Name.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Image.Name.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Image.Name.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Request message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Image.Name.Request;

                            /**
                             * Decodes a Request message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Image.Name.Request;

                            /**
                             * Verifies a Request message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Request message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Request
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Image.Name.Request;

                            /**
                             * Creates a plain object from a Request message. Also converts values to other types if specified.
                             * @param message Request
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Image.Name.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Request to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        /** Properties of a Response. */
                        interface IResponse {

                            /** Response error */
                            error?: (anytype.Rpc.Block.Set.Image.Name.Response.IError|null);
                        }

                        /** Represents a Response. */
                        class Response implements IResponse {

                            /**
                             * Constructs a new Response.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Image.Name.IResponse);

                            /** Response error. */
                            public error?: (anytype.Rpc.Block.Set.Image.Name.Response.IError|null);

                            /**
                             * Creates a new Response instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Response instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Image.Name.IResponse): anytype.Rpc.Block.Set.Image.Name.Response;

                            /**
                             * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Set.Image.Name.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Image.Name.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Image.Name.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Image.Name.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Response message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Image.Name.Response;

                            /**
                             * Decodes a Response message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Image.Name.Response;

                            /**
                             * Verifies a Response message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Response message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Response
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Image.Name.Response;

                            /**
                             * Creates a plain object from a Response message. Also converts values to other types if specified.
                             * @param message Response
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Image.Name.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Response to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Response {

                            /** Properties of an Error. */
                            interface IError {

                                /** Error code */
                                code?: (anytype.Rpc.Block.Set.Image.Name.Response.Error.Code|null);

                                /** Error description */
                                description?: (string|null);
                            }

                            /** Represents an Error. */
                            class Error implements IError {

                                /**
                                 * Constructs a new Error.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: anytype.Rpc.Block.Set.Image.Name.Response.IError);

                                /** Error code. */
                                public code: anytype.Rpc.Block.Set.Image.Name.Response.Error.Code;

                                /** Error description. */
                                public description: string;

                                /**
                                 * Creates a new Error instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns Error instance
                                 */
                                public static create(properties?: anytype.Rpc.Block.Set.Image.Name.Response.IError): anytype.Rpc.Block.Set.Image.Name.Response.Error;

                                /**
                                 * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Set.Image.Name.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: anytype.Rpc.Block.Set.Image.Name.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Image.Name.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: anytype.Rpc.Block.Set.Image.Name.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes an Error message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Image.Name.Response.Error;

                                /**
                                 * Decodes an Error message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Image.Name.Response.Error;

                                /**
                                 * Verifies an Error message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates an Error message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns Error
                                 */
                                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Image.Name.Response.Error;

                                /**
                                 * Creates a plain object from an Error message. Also converts values to other types if specified.
                                 * @param message Error
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: anytype.Rpc.Block.Set.Image.Name.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this Error to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };
                            }

                            namespace Error {

                                /** Code enum. */
                                enum Code {
                                    NULL = 0,
                                    UNKNOWN_ERROR = 1,
                                    BAD_INPUT = 2
                                }
                            }
                        }
                    }

                    /** Properties of a Width. */
                    interface IWidth {
                    }

                    /** Represents a Width. */
                    class Width implements IWidth {

                        /**
                         * Constructs a new Width.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Set.Image.IWidth);

                        /**
                         * Creates a new Width instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Width instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Set.Image.IWidth): anytype.Rpc.Block.Set.Image.Width;

                        /**
                         * Encodes the specified Width message. Does not implicitly {@link anytype.Rpc.Block.Set.Image.Width.verify|verify} messages.
                         * @param message Width message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Set.Image.IWidth, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Width message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Image.Width.verify|verify} messages.
                         * @param message Width message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Set.Image.IWidth, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Width message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Width
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Image.Width;

                        /**
                         * Decodes a Width message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Width
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Image.Width;

                        /**
                         * Verifies a Width message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Width message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Width
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Image.Width;

                        /**
                         * Creates a plain object from a Width message. Also converts values to other types if specified.
                         * @param message Width
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Set.Image.Width, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Width to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Width {

                        /** Properties of a Request. */
                        interface IRequest {

                            /** Request contextId */
                            contextId?: (string|null);

                            /** Request blockId */
                            blockId?: (string|null);

                            /** Request width */
                            width?: (number|null);
                        }

                        /** Represents a Request. */
                        class Request implements IRequest {

                            /**
                             * Constructs a new Request.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Image.Width.IRequest);

                            /** Request contextId. */
                            public contextId: string;

                            /** Request blockId. */
                            public blockId: string;

                            /** Request width. */
                            public width: number;

                            /**
                             * Creates a new Request instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Request instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Image.Width.IRequest): anytype.Rpc.Block.Set.Image.Width.Request;

                            /**
                             * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Set.Image.Width.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Image.Width.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Image.Width.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Image.Width.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Request message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Image.Width.Request;

                            /**
                             * Decodes a Request message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Image.Width.Request;

                            /**
                             * Verifies a Request message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Request message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Request
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Image.Width.Request;

                            /**
                             * Creates a plain object from a Request message. Also converts values to other types if specified.
                             * @param message Request
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Image.Width.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Request to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        /** Properties of a Response. */
                        interface IResponse {

                            /** Response error */
                            error?: (anytype.Rpc.Block.Set.Image.Width.Response.IError|null);
                        }

                        /** Represents a Response. */
                        class Response implements IResponse {

                            /**
                             * Constructs a new Response.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Image.Width.IResponse);

                            /** Response error. */
                            public error?: (anytype.Rpc.Block.Set.Image.Width.Response.IError|null);

                            /**
                             * Creates a new Response instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Response instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Image.Width.IResponse): anytype.Rpc.Block.Set.Image.Width.Response;

                            /**
                             * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Set.Image.Width.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Image.Width.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Image.Width.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Image.Width.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Response message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Image.Width.Response;

                            /**
                             * Decodes a Response message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Image.Width.Response;

                            /**
                             * Verifies a Response message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Response message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Response
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Image.Width.Response;

                            /**
                             * Creates a plain object from a Response message. Also converts values to other types if specified.
                             * @param message Response
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Image.Width.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Response to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Response {

                            /** Properties of an Error. */
                            interface IError {

                                /** Error code */
                                code?: (anytype.Rpc.Block.Set.Image.Width.Response.Error.Code|null);

                                /** Error description */
                                description?: (string|null);
                            }

                            /** Represents an Error. */
                            class Error implements IError {

                                /**
                                 * Constructs a new Error.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: anytype.Rpc.Block.Set.Image.Width.Response.IError);

                                /** Error code. */
                                public code: anytype.Rpc.Block.Set.Image.Width.Response.Error.Code;

                                /** Error description. */
                                public description: string;

                                /**
                                 * Creates a new Error instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns Error instance
                                 */
                                public static create(properties?: anytype.Rpc.Block.Set.Image.Width.Response.IError): anytype.Rpc.Block.Set.Image.Width.Response.Error;

                                /**
                                 * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Set.Image.Width.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: anytype.Rpc.Block.Set.Image.Width.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Image.Width.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: anytype.Rpc.Block.Set.Image.Width.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes an Error message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Image.Width.Response.Error;

                                /**
                                 * Decodes an Error message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Image.Width.Response.Error;

                                /**
                                 * Verifies an Error message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates an Error message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns Error
                                 */
                                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Image.Width.Response.Error;

                                /**
                                 * Creates a plain object from an Error message. Also converts values to other types if specified.
                                 * @param message Error
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: anytype.Rpc.Block.Set.Image.Width.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this Error to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };
                            }

                            namespace Error {

                                /** Code enum. */
                                enum Code {
                                    NULL = 0,
                                    UNKNOWN_ERROR = 1,
                                    BAD_INPUT = 2
                                }
                            }
                        }
                    }
                }

                /** Properties of a Video. */
                interface IVideo {
                }

                /** Represents a Video. */
                class Video implements IVideo {

                    /**
                     * Constructs a new Video.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Set.IVideo);

                    /**
                     * Creates a new Video instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Video instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Set.IVideo): anytype.Rpc.Block.Set.Video;

                    /**
                     * Encodes the specified Video message. Does not implicitly {@link anytype.Rpc.Block.Set.Video.verify|verify} messages.
                     * @param message Video message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Set.IVideo, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Video message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Video.verify|verify} messages.
                     * @param message Video message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Set.IVideo, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Video message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Video
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Video;

                    /**
                     * Decodes a Video message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Video
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Video;

                    /**
                     * Verifies a Video message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Video message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Video
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Video;

                    /**
                     * Creates a plain object from a Video message. Also converts values to other types if specified.
                     * @param message Video
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Set.Video, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Video to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Video {

                    /** Properties of a Name. */
                    interface IName {
                    }

                    /** Represents a Name. */
                    class Name implements IName {

                        /**
                         * Constructs a new Name.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Set.Video.IName);

                        /**
                         * Creates a new Name instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Name instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Set.Video.IName): anytype.Rpc.Block.Set.Video.Name;

                        /**
                         * Encodes the specified Name message. Does not implicitly {@link anytype.Rpc.Block.Set.Video.Name.verify|verify} messages.
                         * @param message Name message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Set.Video.IName, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Name message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Video.Name.verify|verify} messages.
                         * @param message Name message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Set.Video.IName, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Name message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Name
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Video.Name;

                        /**
                         * Decodes a Name message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Name
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Video.Name;

                        /**
                         * Verifies a Name message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Name message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Name
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Video.Name;

                        /**
                         * Creates a plain object from a Name message. Also converts values to other types if specified.
                         * @param message Name
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Set.Video.Name, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Name to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Name {

                        /** Properties of a Request. */
                        interface IRequest {

                            /** Request contextId */
                            contextId?: (string|null);

                            /** Request blockId */
                            blockId?: (string|null);

                            /** Request name */
                            name?: (string|null);
                        }

                        /** Represents a Request. */
                        class Request implements IRequest {

                            /**
                             * Constructs a new Request.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Video.Name.IRequest);

                            /** Request contextId. */
                            public contextId: string;

                            /** Request blockId. */
                            public blockId: string;

                            /** Request name. */
                            public name: string;

                            /**
                             * Creates a new Request instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Request instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Video.Name.IRequest): anytype.Rpc.Block.Set.Video.Name.Request;

                            /**
                             * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Set.Video.Name.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Video.Name.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Video.Name.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Video.Name.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Request message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Video.Name.Request;

                            /**
                             * Decodes a Request message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Video.Name.Request;

                            /**
                             * Verifies a Request message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Request message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Request
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Video.Name.Request;

                            /**
                             * Creates a plain object from a Request message. Also converts values to other types if specified.
                             * @param message Request
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Video.Name.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Request to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        /** Properties of a Response. */
                        interface IResponse {

                            /** Response error */
                            error?: (anytype.Rpc.Block.Set.Video.Name.Response.IError|null);
                        }

                        /** Represents a Response. */
                        class Response implements IResponse {

                            /**
                             * Constructs a new Response.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Video.Name.IResponse);

                            /** Response error. */
                            public error?: (anytype.Rpc.Block.Set.Video.Name.Response.IError|null);

                            /**
                             * Creates a new Response instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Response instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Video.Name.IResponse): anytype.Rpc.Block.Set.Video.Name.Response;

                            /**
                             * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Set.Video.Name.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Video.Name.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Video.Name.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Video.Name.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Response message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Video.Name.Response;

                            /**
                             * Decodes a Response message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Video.Name.Response;

                            /**
                             * Verifies a Response message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Response message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Response
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Video.Name.Response;

                            /**
                             * Creates a plain object from a Response message. Also converts values to other types if specified.
                             * @param message Response
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Video.Name.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Response to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Response {

                            /** Properties of an Error. */
                            interface IError {

                                /** Error code */
                                code?: (anytype.Rpc.Block.Set.Video.Name.Response.Error.Code|null);

                                /** Error description */
                                description?: (string|null);
                            }

                            /** Represents an Error. */
                            class Error implements IError {

                                /**
                                 * Constructs a new Error.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: anytype.Rpc.Block.Set.Video.Name.Response.IError);

                                /** Error code. */
                                public code: anytype.Rpc.Block.Set.Video.Name.Response.Error.Code;

                                /** Error description. */
                                public description: string;

                                /**
                                 * Creates a new Error instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns Error instance
                                 */
                                public static create(properties?: anytype.Rpc.Block.Set.Video.Name.Response.IError): anytype.Rpc.Block.Set.Video.Name.Response.Error;

                                /**
                                 * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Set.Video.Name.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: anytype.Rpc.Block.Set.Video.Name.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Video.Name.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: anytype.Rpc.Block.Set.Video.Name.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes an Error message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Video.Name.Response.Error;

                                /**
                                 * Decodes an Error message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Video.Name.Response.Error;

                                /**
                                 * Verifies an Error message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates an Error message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns Error
                                 */
                                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Video.Name.Response.Error;

                                /**
                                 * Creates a plain object from an Error message. Also converts values to other types if specified.
                                 * @param message Error
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: anytype.Rpc.Block.Set.Video.Name.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this Error to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };
                            }

                            namespace Error {

                                /** Code enum. */
                                enum Code {
                                    NULL = 0,
                                    UNKNOWN_ERROR = 1,
                                    BAD_INPUT = 2
                                }
                            }
                        }
                    }

                    /** Properties of a Width. */
                    interface IWidth {
                    }

                    /** Represents a Width. */
                    class Width implements IWidth {

                        /**
                         * Constructs a new Width.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Set.Video.IWidth);

                        /**
                         * Creates a new Width instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Width instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Set.Video.IWidth): anytype.Rpc.Block.Set.Video.Width;

                        /**
                         * Encodes the specified Width message. Does not implicitly {@link anytype.Rpc.Block.Set.Video.Width.verify|verify} messages.
                         * @param message Width message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Set.Video.IWidth, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Width message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Video.Width.verify|verify} messages.
                         * @param message Width message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Set.Video.IWidth, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Width message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Width
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Video.Width;

                        /**
                         * Decodes a Width message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Width
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Video.Width;

                        /**
                         * Verifies a Width message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Width message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Width
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Video.Width;

                        /**
                         * Creates a plain object from a Width message. Also converts values to other types if specified.
                         * @param message Width
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Set.Video.Width, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Width to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Width {

                        /** Properties of a Request. */
                        interface IRequest {

                            /** Request contextId */
                            contextId?: (string|null);

                            /** Request blockId */
                            blockId?: (string|null);

                            /** Request width */
                            width?: (number|null);
                        }

                        /** Represents a Request. */
                        class Request implements IRequest {

                            /**
                             * Constructs a new Request.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Video.Width.IRequest);

                            /** Request contextId. */
                            public contextId: string;

                            /** Request blockId. */
                            public blockId: string;

                            /** Request width. */
                            public width: number;

                            /**
                             * Creates a new Request instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Request instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Video.Width.IRequest): anytype.Rpc.Block.Set.Video.Width.Request;

                            /**
                             * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Set.Video.Width.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Video.Width.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Video.Width.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Video.Width.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Request message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Video.Width.Request;

                            /**
                             * Decodes a Request message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Video.Width.Request;

                            /**
                             * Verifies a Request message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Request message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Request
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Video.Width.Request;

                            /**
                             * Creates a plain object from a Request message. Also converts values to other types if specified.
                             * @param message Request
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Video.Width.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Request to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        /** Properties of a Response. */
                        interface IResponse {

                            /** Response error */
                            error?: (anytype.Rpc.Block.Set.Video.Width.Response.IError|null);
                        }

                        /** Represents a Response. */
                        class Response implements IResponse {

                            /**
                             * Constructs a new Response.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Video.Width.IResponse);

                            /** Response error. */
                            public error?: (anytype.Rpc.Block.Set.Video.Width.Response.IError|null);

                            /**
                             * Creates a new Response instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Response instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Video.Width.IResponse): anytype.Rpc.Block.Set.Video.Width.Response;

                            /**
                             * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Set.Video.Width.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Video.Width.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Video.Width.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Video.Width.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Response message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Video.Width.Response;

                            /**
                             * Decodes a Response message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Video.Width.Response;

                            /**
                             * Verifies a Response message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Response message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Response
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Video.Width.Response;

                            /**
                             * Creates a plain object from a Response message. Also converts values to other types if specified.
                             * @param message Response
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Video.Width.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Response to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Response {

                            /** Properties of an Error. */
                            interface IError {

                                /** Error code */
                                code?: (anytype.Rpc.Block.Set.Video.Width.Response.Error.Code|null);

                                /** Error description */
                                description?: (string|null);
                            }

                            /** Represents an Error. */
                            class Error implements IError {

                                /**
                                 * Constructs a new Error.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: anytype.Rpc.Block.Set.Video.Width.Response.IError);

                                /** Error code. */
                                public code: anytype.Rpc.Block.Set.Video.Width.Response.Error.Code;

                                /** Error description. */
                                public description: string;

                                /**
                                 * Creates a new Error instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns Error instance
                                 */
                                public static create(properties?: anytype.Rpc.Block.Set.Video.Width.Response.IError): anytype.Rpc.Block.Set.Video.Width.Response.Error;

                                /**
                                 * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Set.Video.Width.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: anytype.Rpc.Block.Set.Video.Width.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Video.Width.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: anytype.Rpc.Block.Set.Video.Width.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes an Error message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Video.Width.Response.Error;

                                /**
                                 * Decodes an Error message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Video.Width.Response.Error;

                                /**
                                 * Verifies an Error message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates an Error message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns Error
                                 */
                                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Video.Width.Response.Error;

                                /**
                                 * Creates a plain object from an Error message. Also converts values to other types if specified.
                                 * @param message Error
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: anytype.Rpc.Block.Set.Video.Width.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this Error to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };
                            }

                            namespace Error {

                                /** Code enum. */
                                enum Code {
                                    NULL = 0,
                                    UNKNOWN_ERROR = 1,
                                    BAD_INPUT = 2
                                }
                            }
                        }
                    }
                }

                /** Properties of an Icon. */
                interface IIcon {
                }

                /** Represents an Icon. */
                class Icon implements IIcon {

                    /**
                     * Constructs a new Icon.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Set.IIcon);

                    /**
                     * Creates a new Icon instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Icon instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Set.IIcon): anytype.Rpc.Block.Set.Icon;

                    /**
                     * Encodes the specified Icon message. Does not implicitly {@link anytype.Rpc.Block.Set.Icon.verify|verify} messages.
                     * @param message Icon message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Set.IIcon, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Icon message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Icon.verify|verify} messages.
                     * @param message Icon message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Set.IIcon, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an Icon message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Icon
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Icon;

                    /**
                     * Decodes an Icon message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Icon
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Icon;

                    /**
                     * Verifies an Icon message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an Icon message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Icon
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Icon;

                    /**
                     * Creates a plain object from an Icon message. Also converts values to other types if specified.
                     * @param message Icon
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Set.Icon, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Icon to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Icon {

                    /** Properties of a Name. */
                    interface IName {
                    }

                    /** Represents a Name. */
                    class Name implements IName {

                        /**
                         * Constructs a new Name.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Set.Icon.IName);

                        /**
                         * Creates a new Name instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Name instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Set.Icon.IName): anytype.Rpc.Block.Set.Icon.Name;

                        /**
                         * Encodes the specified Name message. Does not implicitly {@link anytype.Rpc.Block.Set.Icon.Name.verify|verify} messages.
                         * @param message Name message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Set.Icon.IName, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Name message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Icon.Name.verify|verify} messages.
                         * @param message Name message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Set.Icon.IName, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Name message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Name
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Icon.Name;

                        /**
                         * Decodes a Name message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Name
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Icon.Name;

                        /**
                         * Verifies a Name message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Name message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Name
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Icon.Name;

                        /**
                         * Creates a plain object from a Name message. Also converts values to other types if specified.
                         * @param message Name
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Set.Icon.Name, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Name to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Name {

                        /** Properties of a Request. */
                        interface IRequest {

                            /** Request contextId */
                            contextId?: (string|null);

                            /** Request blockId */
                            blockId?: (string|null);

                            /** Request name */
                            name?: (string|null);
                        }

                        /** Represents a Request. */
                        class Request implements IRequest {

                            /**
                             * Constructs a new Request.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Icon.Name.IRequest);

                            /** Request contextId. */
                            public contextId: string;

                            /** Request blockId. */
                            public blockId: string;

                            /** Request name. */
                            public name: string;

                            /**
                             * Creates a new Request instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Request instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Icon.Name.IRequest): anytype.Rpc.Block.Set.Icon.Name.Request;

                            /**
                             * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Set.Icon.Name.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Icon.Name.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Icon.Name.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Icon.Name.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Request message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Icon.Name.Request;

                            /**
                             * Decodes a Request message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Icon.Name.Request;

                            /**
                             * Verifies a Request message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Request message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Request
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Icon.Name.Request;

                            /**
                             * Creates a plain object from a Request message. Also converts values to other types if specified.
                             * @param message Request
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Icon.Name.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Request to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        /** Properties of a Response. */
                        interface IResponse {

                            /** Response error */
                            error?: (anytype.Rpc.Block.Set.Icon.Name.Response.IError|null);
                        }

                        /** Represents a Response. */
                        class Response implements IResponse {

                            /**
                             * Constructs a new Response.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Icon.Name.IResponse);

                            /** Response error. */
                            public error?: (anytype.Rpc.Block.Set.Icon.Name.Response.IError|null);

                            /**
                             * Creates a new Response instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Response instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Icon.Name.IResponse): anytype.Rpc.Block.Set.Icon.Name.Response;

                            /**
                             * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Set.Icon.Name.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Icon.Name.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Icon.Name.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Icon.Name.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Response message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Icon.Name.Response;

                            /**
                             * Decodes a Response message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Icon.Name.Response;

                            /**
                             * Verifies a Response message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Response message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Response
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Icon.Name.Response;

                            /**
                             * Creates a plain object from a Response message. Also converts values to other types if specified.
                             * @param message Response
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Icon.Name.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Response to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Response {

                            /** Properties of an Error. */
                            interface IError {

                                /** Error code */
                                code?: (anytype.Rpc.Block.Set.Icon.Name.Response.Error.Code|null);

                                /** Error description */
                                description?: (string|null);
                            }

                            /** Represents an Error. */
                            class Error implements IError {

                                /**
                                 * Constructs a new Error.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: anytype.Rpc.Block.Set.Icon.Name.Response.IError);

                                /** Error code. */
                                public code: anytype.Rpc.Block.Set.Icon.Name.Response.Error.Code;

                                /** Error description. */
                                public description: string;

                                /**
                                 * Creates a new Error instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns Error instance
                                 */
                                public static create(properties?: anytype.Rpc.Block.Set.Icon.Name.Response.IError): anytype.Rpc.Block.Set.Icon.Name.Response.Error;

                                /**
                                 * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Set.Icon.Name.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: anytype.Rpc.Block.Set.Icon.Name.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Icon.Name.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: anytype.Rpc.Block.Set.Icon.Name.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes an Error message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Icon.Name.Response.Error;

                                /**
                                 * Decodes an Error message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Icon.Name.Response.Error;

                                /**
                                 * Verifies an Error message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates an Error message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns Error
                                 */
                                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Icon.Name.Response.Error;

                                /**
                                 * Creates a plain object from an Error message. Also converts values to other types if specified.
                                 * @param message Error
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: anytype.Rpc.Block.Set.Icon.Name.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this Error to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };
                            }

                            namespace Error {

                                /** Code enum. */
                                enum Code {
                                    NULL = 0,
                                    UNKNOWN_ERROR = 1,
                                    BAD_INPUT = 2
                                }
                            }
                        }
                    }
                }

                /** Properties of a Link. */
                interface ILink {
                }

                /** Represents a Link. */
                class Link implements ILink {

                    /**
                     * Constructs a new Link.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Set.ILink);

                    /**
                     * Creates a new Link instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Link instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Set.ILink): anytype.Rpc.Block.Set.Link;

                    /**
                     * Encodes the specified Link message. Does not implicitly {@link anytype.Rpc.Block.Set.Link.verify|verify} messages.
                     * @param message Link message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Set.ILink, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Link message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Link.verify|verify} messages.
                     * @param message Link message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Set.ILink, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Link message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Link
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Link;

                    /**
                     * Decodes a Link message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Link
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Link;

                    /**
                     * Verifies a Link message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Link message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Link
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Link;

                    /**
                     * Creates a plain object from a Link message. Also converts values to other types if specified.
                     * @param message Link
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Set.Link, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Link to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Link {

                    /** Properties of a TargetBlockId. */
                    interface ITargetBlockId {
                    }

                    /** Represents a TargetBlockId. */
                    class TargetBlockId implements ITargetBlockId {

                        /**
                         * Constructs a new TargetBlockId.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Set.Link.ITargetBlockId);

                        /**
                         * Creates a new TargetBlockId instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns TargetBlockId instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Set.Link.ITargetBlockId): anytype.Rpc.Block.Set.Link.TargetBlockId;

                        /**
                         * Encodes the specified TargetBlockId message. Does not implicitly {@link anytype.Rpc.Block.Set.Link.TargetBlockId.verify|verify} messages.
                         * @param message TargetBlockId message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Set.Link.ITargetBlockId, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified TargetBlockId message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Link.TargetBlockId.verify|verify} messages.
                         * @param message TargetBlockId message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Set.Link.ITargetBlockId, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a TargetBlockId message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns TargetBlockId
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Link.TargetBlockId;

                        /**
                         * Decodes a TargetBlockId message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns TargetBlockId
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Link.TargetBlockId;

                        /**
                         * Verifies a TargetBlockId message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a TargetBlockId message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns TargetBlockId
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Link.TargetBlockId;

                        /**
                         * Creates a plain object from a TargetBlockId message. Also converts values to other types if specified.
                         * @param message TargetBlockId
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Set.Link.TargetBlockId, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this TargetBlockId to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace TargetBlockId {

                        /** Properties of a Request. */
                        interface IRequest {

                            /** Request contextId */
                            contextId?: (string|null);

                            /** Request blockId */
                            blockId?: (string|null);

                            /** Request targetBlockId */
                            targetBlockId?: (string|null);
                        }

                        /** Represents a Request. */
                        class Request implements IRequest {

                            /**
                             * Constructs a new Request.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Link.TargetBlockId.IRequest);

                            /** Request contextId. */
                            public contextId: string;

                            /** Request blockId. */
                            public blockId: string;

                            /** Request targetBlockId. */
                            public targetBlockId: string;

                            /**
                             * Creates a new Request instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Request instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Link.TargetBlockId.IRequest): anytype.Rpc.Block.Set.Link.TargetBlockId.Request;

                            /**
                             * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Set.Link.TargetBlockId.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Link.TargetBlockId.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Link.TargetBlockId.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Link.TargetBlockId.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Request message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Link.TargetBlockId.Request;

                            /**
                             * Decodes a Request message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Link.TargetBlockId.Request;

                            /**
                             * Verifies a Request message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Request message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Request
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Link.TargetBlockId.Request;

                            /**
                             * Creates a plain object from a Request message. Also converts values to other types if specified.
                             * @param message Request
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Link.TargetBlockId.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Request to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        /** Properties of a Response. */
                        interface IResponse {

                            /** Response error */
                            error?: (anytype.Rpc.Block.Set.Link.TargetBlockId.Response.IError|null);
                        }

                        /** Represents a Response. */
                        class Response implements IResponse {

                            /**
                             * Constructs a new Response.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Set.Link.TargetBlockId.IResponse);

                            /** Response error. */
                            public error?: (anytype.Rpc.Block.Set.Link.TargetBlockId.Response.IError|null);

                            /**
                             * Creates a new Response instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Response instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Set.Link.TargetBlockId.IResponse): anytype.Rpc.Block.Set.Link.TargetBlockId.Response;

                            /**
                             * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Set.Link.TargetBlockId.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Set.Link.TargetBlockId.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Link.TargetBlockId.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Set.Link.TargetBlockId.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Response message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Link.TargetBlockId.Response;

                            /**
                             * Decodes a Response message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Link.TargetBlockId.Response;

                            /**
                             * Verifies a Response message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Response message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Response
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Link.TargetBlockId.Response;

                            /**
                             * Creates a plain object from a Response message. Also converts values to other types if specified.
                             * @param message Response
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Set.Link.TargetBlockId.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Response to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Response {

                            /** Properties of an Error. */
                            interface IError {

                                /** Error code */
                                code?: (anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.Code|null);

                                /** Error description */
                                description?: (string|null);
                            }

                            /** Represents an Error. */
                            class Error implements IError {

                                /**
                                 * Constructs a new Error.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: anytype.Rpc.Block.Set.Link.TargetBlockId.Response.IError);

                                /** Error code. */
                                public code: anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.Code;

                                /** Error description. */
                                public description: string;

                                /**
                                 * Creates a new Error instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns Error instance
                                 */
                                public static create(properties?: anytype.Rpc.Block.Set.Link.TargetBlockId.Response.IError): anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error;

                                /**
                                 * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: anytype.Rpc.Block.Set.Link.TargetBlockId.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: anytype.Rpc.Block.Set.Link.TargetBlockId.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes an Error message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error;

                                /**
                                 * Decodes an Error message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error;

                                /**
                                 * Verifies an Error message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates an Error message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns Error
                                 */
                                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error;

                                /**
                                 * Creates a plain object from an Error message. Also converts values to other types if specified.
                                 * @param message Error
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this Error to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };
                            }

                            namespace Error {

                                /** Code enum. */
                                enum Code {
                                    NULL = 0,
                                    UNKNOWN_ERROR = 1,
                                    BAD_INPUT = 2
                                }
                            }
                        }
                    }
                }
            }

            /** Properties of a Get. */
            interface IGet {
            }

            /** Represents a Get. */
            class Get implements IGet {

                /**
                 * Constructs a new Get.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Block.IGet);

                /**
                 * Creates a new Get instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Get instance
                 */
                public static create(properties?: anytype.Rpc.Block.IGet): anytype.Rpc.Block.Get;

                /**
                 * Encodes the specified Get message. Does not implicitly {@link anytype.Rpc.Block.Get.verify|verify} messages.
                 * @param message Get message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Block.IGet, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Get message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Get.verify|verify} messages.
                 * @param message Get message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Block.IGet, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Get message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Get
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Get;

                /**
                 * Decodes a Get message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Get
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Get;

                /**
                 * Verifies a Get message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Get message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Get
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Get;

                /**
                 * Creates a plain object from a Get message. Also converts values to other types if specified.
                 * @param message Get
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Block.Get, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Get to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Get {

                /** Properties of a Marks. */
                interface IMarks {
                }

                /** Represents a Marks. */
                class Marks implements IMarks {

                    /**
                     * Constructs a new Marks.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Get.IMarks);

                    /**
                     * Creates a new Marks instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Marks instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Get.IMarks): anytype.Rpc.Block.Get.Marks;

                    /**
                     * Encodes the specified Marks message. Does not implicitly {@link anytype.Rpc.Block.Get.Marks.verify|verify} messages.
                     * @param message Marks message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Get.IMarks, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Marks message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Get.Marks.verify|verify} messages.
                     * @param message Marks message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Get.IMarks, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Marks message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Marks
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Get.Marks;

                    /**
                     * Decodes a Marks message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Marks
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Get.Marks;

                    /**
                     * Verifies a Marks message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Marks message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Marks
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Get.Marks;

                    /**
                     * Creates a plain object from a Marks message. Also converts values to other types if specified.
                     * @param message Marks
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Get.Marks, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Marks to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Marks {

                    /** Properties of a Request. */
                    interface IRequest {

                        /** Request contextId */
                        contextId?: (string|null);

                        /** Request blockId */
                        blockId?: (string|null);

                        /** Request range */
                        range?: (anytype.model.IRange|null);
                    }

                    /** Represents a Request. */
                    class Request implements IRequest {

                        /**
                         * Constructs a new Request.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Get.Marks.IRequest);

                        /** Request contextId. */
                        public contextId: string;

                        /** Request blockId. */
                        public blockId: string;

                        /** Request range. */
                        public range?: (anytype.model.IRange|null);

                        /**
                         * Creates a new Request instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Request instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Get.Marks.IRequest): anytype.Rpc.Block.Get.Marks.Request;

                        /**
                         * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Get.Marks.Request.verify|verify} messages.
                         * @param message Request message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Get.Marks.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Get.Marks.Request.verify|verify} messages.
                         * @param message Request message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Get.Marks.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Request message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Request
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Get.Marks.Request;

                        /**
                         * Decodes a Request message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Request
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Get.Marks.Request;

                        /**
                         * Verifies a Request message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Request message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Request
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Get.Marks.Request;

                        /**
                         * Creates a plain object from a Request message. Also converts values to other types if specified.
                         * @param message Request
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Get.Marks.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Request to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Response. */
                    interface IResponse {

                        /** Response error */
                        error?: (anytype.Rpc.Block.Get.Marks.Response.IError|null);
                    }

                    /** Represents a Response. */
                    class Response implements IResponse {

                        /**
                         * Constructs a new Response.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Get.Marks.IResponse);

                        /** Response error. */
                        public error?: (anytype.Rpc.Block.Get.Marks.Response.IError|null);

                        /**
                         * Creates a new Response instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Response instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Get.Marks.IResponse): anytype.Rpc.Block.Get.Marks.Response;

                        /**
                         * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Get.Marks.Response.verify|verify} messages.
                         * @param message Response message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Get.Marks.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Get.Marks.Response.verify|verify} messages.
                         * @param message Response message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Get.Marks.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Response message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Response
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Get.Marks.Response;

                        /**
                         * Decodes a Response message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Response
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Get.Marks.Response;

                        /**
                         * Verifies a Response message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Response message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Response
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Get.Marks.Response;

                        /**
                         * Creates a plain object from a Response message. Also converts values to other types if specified.
                         * @param message Response
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Get.Marks.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Response to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Response {

                        /** Properties of an Error. */
                        interface IError {

                            /** Error code */
                            code?: (anytype.Rpc.Block.Get.Marks.Response.Error.Code|null);

                            /** Error description */
                            description?: (string|null);
                        }

                        /** Represents an Error. */
                        class Error implements IError {

                            /**
                             * Constructs a new Error.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Block.Get.Marks.Response.IError);

                            /** Error code. */
                            public code: anytype.Rpc.Block.Get.Marks.Response.Error.Code;

                            /** Error description. */
                            public description: string;

                            /**
                             * Creates a new Error instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Error instance
                             */
                            public static create(properties?: anytype.Rpc.Block.Get.Marks.Response.IError): anytype.Rpc.Block.Get.Marks.Response.Error;

                            /**
                             * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Get.Marks.Response.Error.verify|verify} messages.
                             * @param message Error message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Block.Get.Marks.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Get.Marks.Response.Error.verify|verify} messages.
                             * @param message Error message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Block.Get.Marks.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes an Error message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Error
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Get.Marks.Response.Error;

                            /**
                             * Decodes an Error message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Error
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Get.Marks.Response.Error;

                            /**
                             * Verifies an Error message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates an Error message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Error
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Get.Marks.Response.Error;

                            /**
                             * Creates a plain object from an Error message. Also converts values to other types if specified.
                             * @param message Error
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Block.Get.Marks.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Error to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Error {

                            /** Code enum. */
                            enum Code {
                                NULL = 0,
                                UNKNOWN_ERROR = 1,
                                BAD_INPUT = 2
                            }
                        }
                    }
                }
            }

            /** Properties of an Undo. */
            interface IUndo {
            }

            /** Represents an Undo. */
            class Undo implements IUndo {

                /**
                 * Constructs a new Undo.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Block.IUndo);

                /**
                 * Creates a new Undo instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Undo instance
                 */
                public static create(properties?: anytype.Rpc.Block.IUndo): anytype.Rpc.Block.Undo;

                /**
                 * Encodes the specified Undo message. Does not implicitly {@link anytype.Rpc.Block.Undo.verify|verify} messages.
                 * @param message Undo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Block.IUndo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Undo message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Undo.verify|verify} messages.
                 * @param message Undo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Block.IUndo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Undo message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Undo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Undo;

                /**
                 * Decodes an Undo message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Undo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Undo;

                /**
                 * Verifies an Undo message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Undo message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Undo
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Undo;

                /**
                 * Creates a plain object from an Undo message. Also converts values to other types if specified.
                 * @param message Undo
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Block.Undo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Undo to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Undo {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request contextId */
                    contextId?: (string|null);
                }

                /** Represents a Request. */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Undo.IRequest);

                    /** Request contextId. */
                    public contextId: string;

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Undo.IRequest): anytype.Rpc.Block.Undo.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Undo.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Undo.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Undo.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Undo.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Undo.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Undo.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Undo.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Undo.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Block.Undo.Response.IError|null);
                }

                /** Represents a Response. */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Undo.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Block.Undo.Response.IError|null);

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Undo.IResponse): anytype.Rpc.Block.Undo.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Undo.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Undo.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Undo.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Undo.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Undo.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Undo.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Undo.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Undo.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Block.Undo.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Undo.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Block.Undo.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Undo.Response.IError): anytype.Rpc.Block.Undo.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Undo.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Undo.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Undo.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Undo.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Undo.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Undo.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Undo.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Undo.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2,
                            CAN_NOT_MOVE = 3
                        }
                    }
                }
            }

            /** Properties of a Redo. */
            interface IRedo {
            }

            /** Represents a Redo. */
            class Redo implements IRedo {

                /**
                 * Constructs a new Redo.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Block.IRedo);

                /**
                 * Creates a new Redo instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Redo instance
                 */
                public static create(properties?: anytype.Rpc.Block.IRedo): anytype.Rpc.Block.Redo;

                /**
                 * Encodes the specified Redo message. Does not implicitly {@link anytype.Rpc.Block.Redo.verify|verify} messages.
                 * @param message Redo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Block.IRedo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Redo message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Redo.verify|verify} messages.
                 * @param message Redo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Block.IRedo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Redo message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Redo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Redo;

                /**
                 * Decodes a Redo message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Redo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Redo;

                /**
                 * Verifies a Redo message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Redo message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Redo
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Redo;

                /**
                 * Creates a plain object from a Redo message. Also converts values to other types if specified.
                 * @param message Redo
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Block.Redo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Redo to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Redo {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request contextId */
                    contextId?: (string|null);
                }

                /** Represents a Request. */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Redo.IRequest);

                    /** Request contextId. */
                    public contextId: string;

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Redo.IRequest): anytype.Rpc.Block.Redo.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Redo.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Redo.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Redo.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Redo.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Redo.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Redo.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Redo.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Redo.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Block.Redo.Response.IError|null);
                }

                /** Represents a Response. */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Redo.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Block.Redo.Response.IError|null);

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Redo.IResponse): anytype.Rpc.Block.Redo.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Redo.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Redo.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Redo.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Redo.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Redo.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Redo.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Redo.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Redo.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Block.Redo.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Redo.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Block.Redo.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Redo.Response.IError): anytype.Rpc.Block.Redo.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Redo.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Redo.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Redo.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Redo.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Redo.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Redo.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Redo.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Redo.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2,
                            CAN_NOT_MOVE = 3
                        }
                    }
                }
            }

            /** Properties of an Open. */
            interface IOpen {
            }

            /** Represents an Open. */
            class Open implements IOpen {

                /**
                 * Constructs a new Open.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Block.IOpen);

                /**
                 * Creates a new Open instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Open instance
                 */
                public static create(properties?: anytype.Rpc.Block.IOpen): anytype.Rpc.Block.Open;

                /**
                 * Encodes the specified Open message. Does not implicitly {@link anytype.Rpc.Block.Open.verify|verify} messages.
                 * @param message Open message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Block.IOpen, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Open message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Open.verify|verify} messages.
                 * @param message Open message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Block.IOpen, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Open message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Open
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Open;

                /**
                 * Decodes an Open message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Open
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Open;

                /**
                 * Verifies an Open message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Open message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Open
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Open;

                /**
                 * Creates a plain object from an Open message. Also converts values to other types if specified.
                 * @param message Open
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Block.Open, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Open to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Open {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request contextId */
                    contextId?: (string|null);

                    /** Request blockId */
                    blockId?: (string|null);
                }

                /** Represents a Request. */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Open.IRequest);

                    /** Request contextId. */
                    public contextId: string;

                    /** Request blockId. */
                    public blockId: string;

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Open.IRequest): anytype.Rpc.Block.Open.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Open.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Open.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Open.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Open.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Open.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Open.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Open.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Open.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Block.Open.Response.IError|null);
                }

                /** Represents a Response. */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Open.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Block.Open.Response.IError|null);

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Open.IResponse): anytype.Rpc.Block.Open.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Open.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Open.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Open.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Open.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Open.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Open.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Open.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Open.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Block.Open.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Open.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Block.Open.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Open.Response.IError): anytype.Rpc.Block.Open.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Open.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Open.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Open.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Open.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Open.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Open.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Open.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Open.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2
                        }
                    }
                }
            }

            /** Properties of a Create. */
            interface ICreate {
            }

            /** Represents a Create. */
            class Create implements ICreate {

                /**
                 * Constructs a new Create.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Block.ICreate);

                /**
                 * Creates a new Create instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Create instance
                 */
                public static create(properties?: anytype.Rpc.Block.ICreate): anytype.Rpc.Block.Create;

                /**
                 * Encodes the specified Create message. Does not implicitly {@link anytype.Rpc.Block.Create.verify|verify} messages.
                 * @param message Create message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Block.ICreate, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Create message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Create.verify|verify} messages.
                 * @param message Create message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Block.ICreate, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Create message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Create
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Create;

                /**
                 * Decodes a Create message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Create
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Create;

                /**
                 * Verifies a Create message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Create message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Create
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Create;

                /**
                 * Creates a plain object from a Create message. Also converts values to other types if specified.
                 * @param message Create
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Block.Create, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Create to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Create {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request contextId */
                    contextId?: (string|null);

                    /** Request targetId */
                    targetId?: (string|null);

                    /** Request block */
                    block?: (anytype.model.IBlock|null);

                    /** Request position */
                    position?: (anytype.model.Block.Position|null);
                }

                /** Represents a Request. */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Create.IRequest);

                    /** Request contextId. */
                    public contextId: string;

                    /** Request targetId. */
                    public targetId: string;

                    /** Request block. */
                    public block?: (anytype.model.IBlock|null);

                    /** Request position. */
                    public position: anytype.model.Block.Position;

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Create.IRequest): anytype.Rpc.Block.Create.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Create.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Create.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Create.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Create.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Create.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Create.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Create.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Create.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Block.Create.Response.IError|null);

                    /** Response blockId */
                    blockId?: (string|null);
                }

                /** Represents a Response. */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Create.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Block.Create.Response.IError|null);

                    /** Response blockId. */
                    public blockId: string;

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Create.IResponse): anytype.Rpc.Block.Create.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Create.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Create.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Create.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Create.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Create.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Create.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Create.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Create.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Block.Create.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Create.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Block.Create.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Create.Response.IError): anytype.Rpc.Block.Create.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Create.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Create.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Create.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Create.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Create.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Create.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Create.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Create.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2
                        }
                    }
                }
            }

            /** Properties of a CreatePage. */
            interface ICreatePage {
            }

            /** Represents a CreatePage. */
            class CreatePage implements ICreatePage {

                /**
                 * Constructs a new CreatePage.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Block.ICreatePage);

                /**
                 * Creates a new CreatePage instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns CreatePage instance
                 */
                public static create(properties?: anytype.Rpc.Block.ICreatePage): anytype.Rpc.Block.CreatePage;

                /**
                 * Encodes the specified CreatePage message. Does not implicitly {@link anytype.Rpc.Block.CreatePage.verify|verify} messages.
                 * @param message CreatePage message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Block.ICreatePage, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified CreatePage message, length delimited. Does not implicitly {@link anytype.Rpc.Block.CreatePage.verify|verify} messages.
                 * @param message CreatePage message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Block.ICreatePage, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a CreatePage message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns CreatePage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.CreatePage;

                /**
                 * Decodes a CreatePage message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns CreatePage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.CreatePage;

                /**
                 * Verifies a CreatePage message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a CreatePage message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns CreatePage
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.CreatePage;

                /**
                 * Creates a plain object from a CreatePage message. Also converts values to other types if specified.
                 * @param message CreatePage
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Block.CreatePage, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this CreatePage to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace CreatePage {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request contextId */
                    contextId?: (string|null);

                    /** Request targetId */
                    targetId?: (string|null);

                    /** Request block */
                    block?: (anytype.model.IBlock|null);

                    /** Request position */
                    position?: (anytype.model.Block.Position|null);
                }

                /** Represents a Request. */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.CreatePage.IRequest);

                    /** Request contextId. */
                    public contextId: string;

                    /** Request targetId. */
                    public targetId: string;

                    /** Request block. */
                    public block?: (anytype.model.IBlock|null);

                    /** Request position. */
                    public position: anytype.model.Block.Position;

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Block.CreatePage.IRequest): anytype.Rpc.Block.CreatePage.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.CreatePage.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.CreatePage.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.CreatePage.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.CreatePage.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.CreatePage.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.CreatePage.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.CreatePage.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.CreatePage.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Block.CreatePage.Response.IError|null);

                    /** Response blockId */
                    blockId?: (string|null);

                    /** Response targetId */
                    targetId?: (string|null);
                }

                /** Represents a Response. */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.CreatePage.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Block.CreatePage.Response.IError|null);

                    /** Response blockId. */
                    public blockId: string;

                    /** Response targetId. */
                    public targetId: string;

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Block.CreatePage.IResponse): anytype.Rpc.Block.CreatePage.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.CreatePage.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.CreatePage.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.CreatePage.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.CreatePage.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.CreatePage.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.CreatePage.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.CreatePage.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.CreatePage.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Block.CreatePage.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.CreatePage.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Block.CreatePage.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Block.CreatePage.Response.IError): anytype.Rpc.Block.CreatePage.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.CreatePage.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.CreatePage.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.CreatePage.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.CreatePage.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.CreatePage.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.CreatePage.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.CreatePage.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.CreatePage.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2
                        }
                    }
                }
            }

            /** Properties of an Unlink. */
            interface IUnlink {
            }

            /** Represents an Unlink. */
            class Unlink implements IUnlink {

                /**
                 * Constructs a new Unlink.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Block.IUnlink);

                /**
                 * Creates a new Unlink instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Unlink instance
                 */
                public static create(properties?: anytype.Rpc.Block.IUnlink): anytype.Rpc.Block.Unlink;

                /**
                 * Encodes the specified Unlink message. Does not implicitly {@link anytype.Rpc.Block.Unlink.verify|verify} messages.
                 * @param message Unlink message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Block.IUnlink, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Unlink message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Unlink.verify|verify} messages.
                 * @param message Unlink message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Block.IUnlink, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Unlink message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Unlink
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Unlink;

                /**
                 * Decodes an Unlink message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Unlink
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Unlink;

                /**
                 * Verifies an Unlink message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Unlink message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Unlink
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Unlink;

                /**
                 * Creates a plain object from an Unlink message. Also converts values to other types if specified.
                 * @param message Unlink
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Block.Unlink, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Unlink to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Unlink {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request contextId */
                    contextId?: (string|null);

                    /** Request blockIds */
                    blockIds?: (string[]|null);
                }

                /** Represents a Request. */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Unlink.IRequest);

                    /** Request contextId. */
                    public contextId: string;

                    /** Request blockIds. */
                    public blockIds: string[];

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Unlink.IRequest): anytype.Rpc.Block.Unlink.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Unlink.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Unlink.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Unlink.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Unlink.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Unlink.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Unlink.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Unlink.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Unlink.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Block.Unlink.Response.IError|null);
                }

                /** Represents a Response. */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Unlink.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Block.Unlink.Response.IError|null);

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Unlink.IResponse): anytype.Rpc.Block.Unlink.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Unlink.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Unlink.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Unlink.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Unlink.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Unlink.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Unlink.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Unlink.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Unlink.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Block.Unlink.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Unlink.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Block.Unlink.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Unlink.Response.IError): anytype.Rpc.Block.Unlink.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Unlink.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Unlink.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Unlink.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Unlink.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Unlink.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Unlink.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Unlink.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Unlink.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2
                        }
                    }
                }
            }

            /** Properties of a Close. */
            interface IClose {
            }

            /** Represents a Close. */
            class Close implements IClose {

                /**
                 * Constructs a new Close.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Block.IClose);

                /**
                 * Creates a new Close instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Close instance
                 */
                public static create(properties?: anytype.Rpc.Block.IClose): anytype.Rpc.Block.Close;

                /**
                 * Encodes the specified Close message. Does not implicitly {@link anytype.Rpc.Block.Close.verify|verify} messages.
                 * @param message Close message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Block.IClose, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Close message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Close.verify|verify} messages.
                 * @param message Close message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Block.IClose, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Close message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Close
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Close;

                /**
                 * Decodes a Close message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Close
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Close;

                /**
                 * Verifies a Close message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Close message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Close
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Close;

                /**
                 * Creates a plain object from a Close message. Also converts values to other types if specified.
                 * @param message Close
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Block.Close, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Close to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Close {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request contextId */
                    contextId?: (string|null);

                    /** Request blockId */
                    blockId?: (string|null);
                }

                /** Represents a Request. */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Close.IRequest);

                    /** Request contextId. */
                    public contextId: string;

                    /** Request blockId. */
                    public blockId: string;

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Close.IRequest): anytype.Rpc.Block.Close.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Block.Close.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Close.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Close.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Close.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Close.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Close.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Close.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Close.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Block.Close.Response.IError|null);
                }

                /** Represents a Response. */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Block.Close.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Block.Close.Response.IError|null);

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Block.Close.IResponse): anytype.Rpc.Block.Close.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Block.Close.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Block.Close.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Close.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Block.Close.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Close.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Close.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Close.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Block.Close.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Block.Close.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Block.Close.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Block.Close.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Block.Close.Response.IError): anytype.Rpc.Block.Close.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Block.Close.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Block.Close.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Block.Close.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Block.Close.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Block.Close.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Block.Close.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Block.Close.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Block.Close.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2
                        }
                    }
                }
            }
        }

        /** Properties of a Wallet. */
        interface IWallet {
        }

        /** Represents a Wallet. */
        class Wallet implements IWallet {

            /**
             * Constructs a new Wallet.
             * @param [properties] Properties to set
             */
            constructor(properties?: anytype.Rpc.IWallet);

            /**
             * Creates a new Wallet instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Wallet instance
             */
            public static create(properties?: anytype.Rpc.IWallet): anytype.Rpc.Wallet;

            /**
             * Encodes the specified Wallet message. Does not implicitly {@link anytype.Rpc.Wallet.verify|verify} messages.
             * @param message Wallet message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: anytype.Rpc.IWallet, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Wallet message, length delimited. Does not implicitly {@link anytype.Rpc.Wallet.verify|verify} messages.
             * @param message Wallet message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: anytype.Rpc.IWallet, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Wallet message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Wallet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Wallet;

            /**
             * Decodes a Wallet message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Wallet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Wallet;

            /**
             * Verifies a Wallet message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Wallet message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Wallet
             */
            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Wallet;

            /**
             * Creates a plain object from a Wallet message. Also converts values to other types if specified.
             * @param message Wallet
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: anytype.Rpc.Wallet, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Wallet to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Wallet {

            /** Properties of a Create. */
            interface ICreate {
            }

            /** Represents a Create. */
            class Create implements ICreate {

                /**
                 * Constructs a new Create.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Wallet.ICreate);

                /**
                 * Creates a new Create instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Create instance
                 */
                public static create(properties?: anytype.Rpc.Wallet.ICreate): anytype.Rpc.Wallet.Create;

                /**
                 * Encodes the specified Create message. Does not implicitly {@link anytype.Rpc.Wallet.Create.verify|verify} messages.
                 * @param message Create message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Wallet.ICreate, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Create message, length delimited. Does not implicitly {@link anytype.Rpc.Wallet.Create.verify|verify} messages.
                 * @param message Create message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Wallet.ICreate, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Create message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Create
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Wallet.Create;

                /**
                 * Decodes a Create message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Create
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Wallet.Create;

                /**
                 * Verifies a Create message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Create message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Create
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Wallet.Create;

                /**
                 * Creates a plain object from a Create message. Also converts values to other types if specified.
                 * @param message Create
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Wallet.Create, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Create to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Create {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request rootPath */
                    rootPath?: (string|null);
                }

                /** Front-end-to-middleware request to create a new wallet */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Wallet.Create.IRequest);

                    /** Request rootPath. */
                    public rootPath: string;

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Wallet.Create.IRequest): anytype.Rpc.Wallet.Create.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Wallet.Create.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Wallet.Create.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Wallet.Create.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Wallet.Create.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Wallet.Create.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Wallet.Create.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Wallet.Create.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Wallet.Create.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Wallet.Create.Response.IError|null);

                    /** Response mnemonic */
                    mnemonic?: (string|null);
                }

                /** Middleware-to-front-end response, that can contain mnemonic of a created account and a NULL error or an empty mnemonic and a non-NULL error */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Wallet.Create.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Wallet.Create.Response.IError|null);

                    /** Response mnemonic. */
                    public mnemonic: string;

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Wallet.Create.IResponse): anytype.Rpc.Wallet.Create.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Wallet.Create.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Wallet.Create.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Wallet.Create.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Wallet.Create.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Wallet.Create.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Wallet.Create.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Wallet.Create.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Wallet.Create.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Wallet.Create.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Wallet.Create.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Wallet.Create.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Wallet.Create.Response.IError): anytype.Rpc.Wallet.Create.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Wallet.Create.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Wallet.Create.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Wallet.Create.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Wallet.Create.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Wallet.Create.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Wallet.Create.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Wallet.Create.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Wallet.Create.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2,
                            FAILED_TO_CREATE_LOCAL_REPO = 101
                        }
                    }
                }
            }

            /** Properties of a Recover. */
            interface IRecover {
            }

            /** Represents a Recover. */
            class Recover implements IRecover {

                /**
                 * Constructs a new Recover.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Wallet.IRecover);

                /**
                 * Creates a new Recover instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Recover instance
                 */
                public static create(properties?: anytype.Rpc.Wallet.IRecover): anytype.Rpc.Wallet.Recover;

                /**
                 * Encodes the specified Recover message. Does not implicitly {@link anytype.Rpc.Wallet.Recover.verify|verify} messages.
                 * @param message Recover message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Wallet.IRecover, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Recover message, length delimited. Does not implicitly {@link anytype.Rpc.Wallet.Recover.verify|verify} messages.
                 * @param message Recover message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Wallet.IRecover, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Recover message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Recover
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Wallet.Recover;

                /**
                 * Decodes a Recover message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Recover
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Wallet.Recover;

                /**
                 * Verifies a Recover message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Recover message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Recover
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Wallet.Recover;

                /**
                 * Creates a plain object from a Recover message. Also converts values to other types if specified.
                 * @param message Recover
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Wallet.Recover, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Recover to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Recover {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request rootPath */
                    rootPath?: (string|null);

                    /** Request mnemonic */
                    mnemonic?: (string|null);
                }

                /** Front end to middleware request-to-recover-a wallet with this mnemonic and a rootPath */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Wallet.Recover.IRequest);

                    /** Request rootPath. */
                    public rootPath: string;

                    /** Request mnemonic. */
                    public mnemonic: string;

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Wallet.Recover.IRequest): anytype.Rpc.Wallet.Recover.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Wallet.Recover.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Wallet.Recover.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Wallet.Recover.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Wallet.Recover.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Wallet.Recover.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Wallet.Recover.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Wallet.Recover.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Wallet.Recover.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Wallet.Recover.Response.IError|null);
                }

                /** Middleware-to-front-end response, that can contain a NULL error or a non-NULL error */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Wallet.Recover.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Wallet.Recover.Response.IError|null);

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Wallet.Recover.IResponse): anytype.Rpc.Wallet.Recover.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Wallet.Recover.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Wallet.Recover.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Wallet.Recover.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Wallet.Recover.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Wallet.Recover.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Wallet.Recover.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Wallet.Recover.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Wallet.Recover.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Wallet.Recover.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Wallet.Recover.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Wallet.Recover.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Wallet.Recover.Response.IError): anytype.Rpc.Wallet.Recover.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Wallet.Recover.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Wallet.Recover.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Wallet.Recover.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Wallet.Recover.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Wallet.Recover.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Wallet.Recover.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Wallet.Recover.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Wallet.Recover.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2,
                            FAILED_TO_CREATE_LOCAL_REPO = 101
                        }
                    }
                }
            }
        }

        /** Properties of an Account. */
        interface IAccount {
        }

        /** Represents an Account. */
        class Account implements IAccount {

            /**
             * Constructs a new Account.
             * @param [properties] Properties to set
             */
            constructor(properties?: anytype.Rpc.IAccount);

            /**
             * Creates a new Account instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Account instance
             */
            public static create(properties?: anytype.Rpc.IAccount): anytype.Rpc.Account;

            /**
             * Encodes the specified Account message. Does not implicitly {@link anytype.Rpc.Account.verify|verify} messages.
             * @param message Account message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: anytype.Rpc.IAccount, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Account message, length delimited. Does not implicitly {@link anytype.Rpc.Account.verify|verify} messages.
             * @param message Account message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: anytype.Rpc.IAccount, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an Account message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Account
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Account;

            /**
             * Decodes an Account message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Account
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Account;

            /**
             * Verifies an Account message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an Account message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Account
             */
            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Account;

            /**
             * Creates a plain object from an Account message. Also converts values to other types if specified.
             * @param message Account
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: anytype.Rpc.Account, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Account to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Account {

            /** Properties of a Create. */
            interface ICreate {
            }

            /** Represents a Create. */
            class Create implements ICreate {

                /**
                 * Constructs a new Create.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Account.ICreate);

                /**
                 * Creates a new Create instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Create instance
                 */
                public static create(properties?: anytype.Rpc.Account.ICreate): anytype.Rpc.Account.Create;

                /**
                 * Encodes the specified Create message. Does not implicitly {@link anytype.Rpc.Account.Create.verify|verify} messages.
                 * @param message Create message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Account.ICreate, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Create message, length delimited. Does not implicitly {@link anytype.Rpc.Account.Create.verify|verify} messages.
                 * @param message Create message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Account.ICreate, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Create message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Create
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Account.Create;

                /**
                 * Decodes a Create message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Create
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Account.Create;

                /**
                 * Verifies a Create message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Create message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Create
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Account.Create;

                /**
                 * Creates a plain object from a Create message. Also converts values to other types if specified.
                 * @param message Create
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Account.Create, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Create to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Create {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request name */
                    name?: (string|null);

                    /** Request avatarLocalPath */
                    avatarLocalPath?: (string|null);

                    /** Request avatarColor */
                    avatarColor?: (string|null);
                }

                /** Front end to middleware request-to-create-an account */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Account.Create.IRequest);

                    /** Request name. */
                    public name: string;

                    /** Request avatarLocalPath. */
                    public avatarLocalPath: string;

                    /** Request avatarColor. */
                    public avatarColor: string;

                    /** Request avatar. */
                    public avatar?: ("avatarLocalPath"|"avatarColor");

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Account.Create.IRequest): anytype.Rpc.Account.Create.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Account.Create.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Account.Create.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Account.Create.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Account.Create.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Account.Create.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Account.Create.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Account.Create.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Account.Create.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Account.Create.Response.IError|null);

                    /** Response account */
                    account?: (anytype.model.IAccount|null);
                }

                /** Middleware-to-front-end response for an account creation request, that can contain a NULL error and created account or a non-NULL error and an empty account */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Account.Create.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Account.Create.Response.IError|null);

                    /** Response account. */
                    public account?: (anytype.model.IAccount|null);

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Account.Create.IResponse): anytype.Rpc.Account.Create.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Account.Create.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Account.Create.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Account.Create.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Account.Create.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Account.Create.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Account.Create.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Account.Create.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Account.Create.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Account.Create.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Account.Create.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Account.Create.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Account.Create.Response.IError): anytype.Rpc.Account.Create.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Account.Create.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Account.Create.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Account.Create.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Account.Create.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Account.Create.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Account.Create.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Account.Create.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Account.Create.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2,
                            ACCOUNT_CREATED_BUT_FAILED_TO_START_NODE = 101,
                            ACCOUNT_CREATED_BUT_FAILED_TO_SET_NAME = 102,
                            ACCOUNT_CREATED_BUT_FAILED_TO_SET_AVATAR = 103
                        }
                    }
                }
            }

            /** Properties of a Recover. */
            interface IRecover {
            }

            /** Represents a Recover. */
            class Recover implements IRecover {

                /**
                 * Constructs a new Recover.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Account.IRecover);

                /**
                 * Creates a new Recover instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Recover instance
                 */
                public static create(properties?: anytype.Rpc.Account.IRecover): anytype.Rpc.Account.Recover;

                /**
                 * Encodes the specified Recover message. Does not implicitly {@link anytype.Rpc.Account.Recover.verify|verify} messages.
                 * @param message Recover message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Account.IRecover, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Recover message, length delimited. Does not implicitly {@link anytype.Rpc.Account.Recover.verify|verify} messages.
                 * @param message Recover message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Account.IRecover, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Recover message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Recover
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Account.Recover;

                /**
                 * Decodes a Recover message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Recover
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Account.Recover;

                /**
                 * Verifies a Recover message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Recover message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Recover
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Account.Recover;

                /**
                 * Creates a plain object from a Recover message. Also converts values to other types if specified.
                 * @param message Recover
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Account.Recover, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Recover to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Recover {

                /** Properties of a Request. */
                interface IRequest {
                }

                /**
                 * Front end to middleware request-to-start-search of an accounts for a recovered mnemonic.
                 * Each of an account that would be found will come with an AccountAdd event
                 */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Account.Recover.IRequest);

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Account.Recover.IRequest): anytype.Rpc.Account.Recover.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Account.Recover.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Account.Recover.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Account.Recover.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Account.Recover.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Account.Recover.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Account.Recover.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Account.Recover.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Account.Recover.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Account.Recover.Response.IError|null);
                }

                /** Middleware-to-front-end response to an account recover request, that can contain a NULL error and created account or a non-NULL error and an empty account */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Account.Recover.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Account.Recover.Response.IError|null);

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Account.Recover.IResponse): anytype.Rpc.Account.Recover.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Account.Recover.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Account.Recover.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Account.Recover.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Account.Recover.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Account.Recover.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Account.Recover.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Account.Recover.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Account.Recover.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Account.Recover.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Account.Recover.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Account.Recover.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Account.Recover.Response.IError): anytype.Rpc.Account.Recover.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Account.Recover.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Account.Recover.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Account.Recover.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Account.Recover.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Account.Recover.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Account.Recover.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Account.Recover.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Account.Recover.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2,
                            NO_ACCOUNTS_FOUND = 101,
                            NEED_TO_RECOVER_WALLET_FIRST = 102,
                            FAILED_TO_CREATE_LOCAL_REPO = 103,
                            LOCAL_REPO_EXISTS_BUT_CORRUPTED = 104,
                            FAILED_TO_RUN_NODE = 105,
                            WALLET_RECOVER_NOT_PERFORMED = 106,
                            FAILED_TO_STOP_RUNNING_NODE = 107
                        }
                    }
                }
            }

            /** Properties of a Select. */
            interface ISelect {
            }

            /** Represents a Select. */
            class Select implements ISelect {

                /**
                 * Constructs a new Select.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Account.ISelect);

                /**
                 * Creates a new Select instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Select instance
                 */
                public static create(properties?: anytype.Rpc.Account.ISelect): anytype.Rpc.Account.Select;

                /**
                 * Encodes the specified Select message. Does not implicitly {@link anytype.Rpc.Account.Select.verify|verify} messages.
                 * @param message Select message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Account.ISelect, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Select message, length delimited. Does not implicitly {@link anytype.Rpc.Account.Select.verify|verify} messages.
                 * @param message Select message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Account.ISelect, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Select message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Select
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Account.Select;

                /**
                 * Decodes a Select message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Select
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Account.Select;

                /**
                 * Verifies a Select message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Select message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Select
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Account.Select;

                /**
                 * Creates a plain object from a Select message. Also converts values to other types if specified.
                 * @param message Select
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Account.Select, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Select to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Select {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request id */
                    id?: (string|null);

                    /** Request rootPath */
                    rootPath?: (string|null);
                }

                /**
                 * Front end to middleware request-to-launch-a specific account using account id and a root path
                 * User can select an account from those, that came with an AccountAdd events
                 */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Account.Select.IRequest);

                    /** Request id. */
                    public id: string;

                    /** Request rootPath. */
                    public rootPath: string;

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Account.Select.IRequest): anytype.Rpc.Account.Select.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Account.Select.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Account.Select.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Account.Select.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Account.Select.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Account.Select.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Account.Select.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Account.Select.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Account.Select.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Account.Select.Response.IError|null);

                    /** Response account */
                    account?: (anytype.model.IAccount|null);
                }

                /** Middleware-to-front-end response for an account select request, that can contain a NULL error and selected account or a non-NULL error and an empty account */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Account.Select.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Account.Select.Response.IError|null);

                    /** Response account. */
                    public account?: (anytype.model.IAccount|null);

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Account.Select.IResponse): anytype.Rpc.Account.Select.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Account.Select.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Account.Select.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Account.Select.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Account.Select.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Account.Select.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Account.Select.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Account.Select.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Account.Select.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Account.Select.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Account.Select.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Account.Select.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Account.Select.Response.IError): anytype.Rpc.Account.Select.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Account.Select.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Account.Select.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Account.Select.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Account.Select.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Account.Select.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Account.Select.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Account.Select.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Account.Select.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2,
                            FAILED_TO_CREATE_LOCAL_REPO = 101,
                            LOCAL_REPO_EXISTS_BUT_CORRUPTED = 102,
                            FAILED_TO_RUN_NODE = 103,
                            FAILED_TO_FIND_ACCOUNT_INFO = 104,
                            LOCAL_REPO_NOT_EXISTS_AND_MNEMONIC_NOT_SET = 105,
                            FAILED_TO_STOP_SEARCHER_NODE = 106,
                            FAILED_TO_RECOVER_PREDEFINED_BLOCKS = 107
                        }
                    }
                }
            }
        }

        /** Properties of a Log. */
        interface ILog {
        }

        /** Represents a Log. */
        class Log implements ILog {

            /**
             * Constructs a new Log.
             * @param [properties] Properties to set
             */
            constructor(properties?: anytype.Rpc.ILog);

            /**
             * Creates a new Log instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Log instance
             */
            public static create(properties?: anytype.Rpc.ILog): anytype.Rpc.Log;

            /**
             * Encodes the specified Log message. Does not implicitly {@link anytype.Rpc.Log.verify|verify} messages.
             * @param message Log message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: anytype.Rpc.ILog, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Log message, length delimited. Does not implicitly {@link anytype.Rpc.Log.verify|verify} messages.
             * @param message Log message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: anytype.Rpc.ILog, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Log message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Log
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Log;

            /**
             * Decodes a Log message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Log
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Log;

            /**
             * Verifies a Log message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Log message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Log
             */
            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Log;

            /**
             * Creates a plain object from a Log message. Also converts values to other types if specified.
             * @param message Log
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: anytype.Rpc.Log, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Log to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Log {

            /** Properties of a Send. */
            interface ISend {
            }

            /** Represents a Send. */
            class Send implements ISend {

                /**
                 * Constructs a new Send.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Log.ISend);

                /**
                 * Creates a new Send instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Send instance
                 */
                public static create(properties?: anytype.Rpc.Log.ISend): anytype.Rpc.Log.Send;

                /**
                 * Encodes the specified Send message. Does not implicitly {@link anytype.Rpc.Log.Send.verify|verify} messages.
                 * @param message Send message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Log.ISend, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Send message, length delimited. Does not implicitly {@link anytype.Rpc.Log.Send.verify|verify} messages.
                 * @param message Send message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Log.ISend, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Send message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Send
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Log.Send;

                /**
                 * Decodes a Send message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Send
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Log.Send;

                /**
                 * Verifies a Send message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Send message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Send
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Log.Send;

                /**
                 * Creates a plain object from a Send message. Also converts values to other types if specified.
                 * @param message Send
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Log.Send, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Send to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Send {

                /** Properties of a Request. */
                interface IRequest {

                    /** Request message */
                    message?: (string|null);

                    /** Request level */
                    level?: (anytype.Rpc.Log.Send.Request.Level|null);
                }

                /** Represents a Request. */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Log.Send.IRequest);

                    /** Request message. */
                    public message: string;

                    /** Request level. */
                    public level: anytype.Rpc.Log.Send.Request.Level;

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Log.Send.IRequest): anytype.Rpc.Log.Send.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Log.Send.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Log.Send.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Log.Send.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Log.Send.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Log.Send.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Log.Send.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Log.Send.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Log.Send.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Request {

                    /** Level enum. */
                    enum Level {
                        DEBUG = 0,
                        ERROR = 1,
                        FATAL = 2,
                        INFO = 3,
                        PANIC = 4,
                        WARNING = 5
                    }
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Log.Send.Response.IError|null);
                }

                /** Represents a Response. */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Log.Send.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Log.Send.Response.IError|null);

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Log.Send.IResponse): anytype.Rpc.Log.Send.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Log.Send.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Log.Send.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Log.Send.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Log.Send.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Log.Send.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Log.Send.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Log.Send.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Log.Send.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Log.Send.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Log.Send.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Log.Send.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Log.Send.Response.IError): anytype.Rpc.Log.Send.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Log.Send.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Log.Send.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Log.Send.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Log.Send.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Log.Send.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Log.Send.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Log.Send.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Log.Send.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2,
                            NOT_FOUND = 101,
                            TIMEOUT = 102
                        }
                    }
                }
            }
        }

        /** Properties of a Version. */
        interface IVersion {
        }

        /** Represents a Version. */
        class Version implements IVersion {

            /**
             * Constructs a new Version.
             * @param [properties] Properties to set
             */
            constructor(properties?: anytype.Rpc.IVersion);

            /**
             * Creates a new Version instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Version instance
             */
            public static create(properties?: anytype.Rpc.IVersion): anytype.Rpc.Version;

            /**
             * Encodes the specified Version message. Does not implicitly {@link anytype.Rpc.Version.verify|verify} messages.
             * @param message Version message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: anytype.Rpc.IVersion, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Version message, length delimited. Does not implicitly {@link anytype.Rpc.Version.verify|verify} messages.
             * @param message Version message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: anytype.Rpc.IVersion, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Version message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Version
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Version;

            /**
             * Decodes a Version message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Version
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Version;

            /**
             * Verifies a Version message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Version message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Version
             */
            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Version;

            /**
             * Creates a plain object from a Version message. Also converts values to other types if specified.
             * @param message Version
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: anytype.Rpc.Version, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Version to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Version {

            /** Properties of a Get. */
            interface IGet {
            }

            /** Represents a Get. */
            class Get implements IGet {

                /**
                 * Constructs a new Get.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Version.IGet);

                /**
                 * Creates a new Get instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Get instance
                 */
                public static create(properties?: anytype.Rpc.Version.IGet): anytype.Rpc.Version.Get;

                /**
                 * Encodes the specified Get message. Does not implicitly {@link anytype.Rpc.Version.Get.verify|verify} messages.
                 * @param message Get message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Version.IGet, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Get message, length delimited. Does not implicitly {@link anytype.Rpc.Version.Get.verify|verify} messages.
                 * @param message Get message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Version.IGet, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Get message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Get
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Version.Get;

                /**
                 * Decodes a Get message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Get
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Version.Get;

                /**
                 * Verifies a Get message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Get message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Get
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Version.Get;

                /**
                 * Creates a plain object from a Get message. Also converts values to other types if specified.
                 * @param message Get
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Version.Get, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Get to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Get {

                /** Properties of a Request. */
                interface IRequest {
                }

                /** Represents a Request. */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Version.Get.IRequest);

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Version.Get.IRequest): anytype.Rpc.Version.Get.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Version.Get.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Version.Get.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Version.Get.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Version.Get.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Version.Get.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Version.Get.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Version.Get.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Version.Get.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Version.Get.Response.IError|null);

                    /** Response version */
                    version?: (string|null);
                }

                /** Represents a Response. */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Version.Get.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Version.Get.Response.IError|null);

                    /** Response version. */
                    public version: string;

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Version.Get.IResponse): anytype.Rpc.Version.Get.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Version.Get.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Version.Get.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Version.Get.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Version.Get.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Version.Get.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Version.Get.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Version.Get.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Version.Get.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Version.Get.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Version.Get.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Version.Get.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Version.Get.Response.IError): anytype.Rpc.Version.Get.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Version.Get.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Version.Get.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Version.Get.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Version.Get.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Version.Get.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Version.Get.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Version.Get.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Version.Get.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2,
                            VERSION_IS_EMPTY = 3,
                            NOT_FOUND = 101,
                            TIMEOUT = 102
                        }
                    }
                }
            }
        }

        /** Properties of an Ipfs. */
        interface IIpfs {
        }

        /** Represents an Ipfs. */
        class Ipfs implements IIpfs {

            /**
             * Constructs a new Ipfs.
             * @param [properties] Properties to set
             */
            constructor(properties?: anytype.Rpc.IIpfs);

            /**
             * Creates a new Ipfs instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Ipfs instance
             */
            public static create(properties?: anytype.Rpc.IIpfs): anytype.Rpc.Ipfs;

            /**
             * Encodes the specified Ipfs message. Does not implicitly {@link anytype.Rpc.Ipfs.verify|verify} messages.
             * @param message Ipfs message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: anytype.Rpc.IIpfs, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Ipfs message, length delimited. Does not implicitly {@link anytype.Rpc.Ipfs.verify|verify} messages.
             * @param message Ipfs message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: anytype.Rpc.IIpfs, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an Ipfs message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Ipfs
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Ipfs;

            /**
             * Decodes an Ipfs message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Ipfs
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Ipfs;

            /**
             * Verifies an Ipfs message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an Ipfs message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Ipfs
             */
            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Ipfs;

            /**
             * Creates a plain object from an Ipfs message. Also converts values to other types if specified.
             * @param message Ipfs
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: anytype.Rpc.Ipfs, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Ipfs to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Ipfs {

            /** Properties of a File. */
            interface IFile {
            }

            /** Represents a File. */
            class File implements IFile {

                /**
                 * Constructs a new File.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Ipfs.IFile);

                /**
                 * Creates a new File instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns File instance
                 */
                public static create(properties?: anytype.Rpc.Ipfs.IFile): anytype.Rpc.Ipfs.File;

                /**
                 * Encodes the specified File message. Does not implicitly {@link anytype.Rpc.Ipfs.File.verify|verify} messages.
                 * @param message File message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Ipfs.IFile, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified File message, length delimited. Does not implicitly {@link anytype.Rpc.Ipfs.File.verify|verify} messages.
                 * @param message File message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Ipfs.IFile, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a File message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns File
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Ipfs.File;

                /**
                 * Decodes a File message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns File
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Ipfs.File;

                /**
                 * Verifies a File message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a File message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns File
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Ipfs.File;

                /**
                 * Creates a plain object from a File message. Also converts values to other types if specified.
                 * @param message File
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Ipfs.File, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this File to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace File {

                /** Properties of a Get. */
                interface IGet {
                }

                /** Represents a Get. */
                class Get implements IGet {

                    /**
                     * Constructs a new Get.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Ipfs.File.IGet);

                    /**
                     * Creates a new Get instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Get instance
                     */
                    public static create(properties?: anytype.Rpc.Ipfs.File.IGet): anytype.Rpc.Ipfs.File.Get;

                    /**
                     * Encodes the specified Get message. Does not implicitly {@link anytype.Rpc.Ipfs.File.Get.verify|verify} messages.
                     * @param message Get message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Ipfs.File.IGet, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Get message, length delimited. Does not implicitly {@link anytype.Rpc.Ipfs.File.Get.verify|verify} messages.
                     * @param message Get message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Ipfs.File.IGet, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Get message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Get
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Ipfs.File.Get;

                    /**
                     * Decodes a Get message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Get
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Ipfs.File.Get;

                    /**
                     * Verifies a Get message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Get message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Get
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Ipfs.File.Get;

                    /**
                     * Creates a plain object from a Get message. Also converts values to other types if specified.
                     * @param message Get
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Ipfs.File.Get, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Get to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Get {

                    /** Properties of a Request. */
                    interface IRequest {

                        /** Request id */
                        id?: (string|null);
                    }

                    /** Represents a Request. */
                    class Request implements IRequest {

                        /**
                         * Constructs a new Request.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Ipfs.File.Get.IRequest);

                        /** Request id. */
                        public id: string;

                        /**
                         * Creates a new Request instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Request instance
                         */
                        public static create(properties?: anytype.Rpc.Ipfs.File.Get.IRequest): anytype.Rpc.Ipfs.File.Get.Request;

                        /**
                         * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Ipfs.File.Get.Request.verify|verify} messages.
                         * @param message Request message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Ipfs.File.Get.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Ipfs.File.Get.Request.verify|verify} messages.
                         * @param message Request message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Ipfs.File.Get.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Request message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Request
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Ipfs.File.Get.Request;

                        /**
                         * Decodes a Request message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Request
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Ipfs.File.Get.Request;

                        /**
                         * Verifies a Request message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Request message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Request
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Ipfs.File.Get.Request;

                        /**
                         * Creates a plain object from a Request message. Also converts values to other types if specified.
                         * @param message Request
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Ipfs.File.Get.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Request to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Response. */
                    interface IResponse {

                        /** Response error */
                        error?: (anytype.Rpc.Ipfs.File.Get.Response.IError|null);

                        /** Response data */
                        data?: (Uint8Array|null);

                        /** Response media */
                        media?: (string|null);

                        /** Response name */
                        name?: (string|null);
                    }

                    /** Represents a Response. */
                    class Response implements IResponse {

                        /**
                         * Constructs a new Response.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Ipfs.File.Get.IResponse);

                        /** Response error. */
                        public error?: (anytype.Rpc.Ipfs.File.Get.Response.IError|null);

                        /** Response data. */
                        public data: Uint8Array;

                        /** Response media. */
                        public media: string;

                        /** Response name. */
                        public name: string;

                        /**
                         * Creates a new Response instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Response instance
                         */
                        public static create(properties?: anytype.Rpc.Ipfs.File.Get.IResponse): anytype.Rpc.Ipfs.File.Get.Response;

                        /**
                         * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Ipfs.File.Get.Response.verify|verify} messages.
                         * @param message Response message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Ipfs.File.Get.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Ipfs.File.Get.Response.verify|verify} messages.
                         * @param message Response message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Ipfs.File.Get.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Response message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Response
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Ipfs.File.Get.Response;

                        /**
                         * Decodes a Response message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Response
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Ipfs.File.Get.Response;

                        /**
                         * Verifies a Response message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Response message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Response
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Ipfs.File.Get.Response;

                        /**
                         * Creates a plain object from a Response message. Also converts values to other types if specified.
                         * @param message Response
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Ipfs.File.Get.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Response to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Response {

                        /** Properties of an Error. */
                        interface IError {

                            /** Error code */
                            code?: (anytype.Rpc.Ipfs.File.Get.Response.Error.Code|null);

                            /** Error description */
                            description?: (string|null);
                        }

                        /** Represents an Error. */
                        class Error implements IError {

                            /**
                             * Constructs a new Error.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Ipfs.File.Get.Response.IError);

                            /** Error code. */
                            public code: anytype.Rpc.Ipfs.File.Get.Response.Error.Code;

                            /** Error description. */
                            public description: string;

                            /**
                             * Creates a new Error instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Error instance
                             */
                            public static create(properties?: anytype.Rpc.Ipfs.File.Get.Response.IError): anytype.Rpc.Ipfs.File.Get.Response.Error;

                            /**
                             * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Ipfs.File.Get.Response.Error.verify|verify} messages.
                             * @param message Error message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Ipfs.File.Get.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Ipfs.File.Get.Response.Error.verify|verify} messages.
                             * @param message Error message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Ipfs.File.Get.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes an Error message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Error
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Ipfs.File.Get.Response.Error;

                            /**
                             * Decodes an Error message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Error
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Ipfs.File.Get.Response.Error;

                            /**
                             * Verifies an Error message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates an Error message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Error
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Ipfs.File.Get.Response.Error;

                            /**
                             * Creates a plain object from an Error message. Also converts values to other types if specified.
                             * @param message Error
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Ipfs.File.Get.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Error to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Error {

                            /** Code enum. */
                            enum Code {
                                NULL = 0,
                                UNKNOWN_ERROR = 1,
                                BAD_INPUT = 2,
                                NOT_FOUND = 101,
                                TIMEOUT = 102
                            }
                        }
                    }
                }
            }

            /** Properties of an Image. */
            interface IImage {
            }

            /** Represents an Image. */
            class Image implements IImage {

                /**
                 * Constructs a new Image.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Ipfs.IImage);

                /**
                 * Creates a new Image instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Image instance
                 */
                public static create(properties?: anytype.Rpc.Ipfs.IImage): anytype.Rpc.Ipfs.Image;

                /**
                 * Encodes the specified Image message. Does not implicitly {@link anytype.Rpc.Ipfs.Image.verify|verify} messages.
                 * @param message Image message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Ipfs.IImage, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Image message, length delimited. Does not implicitly {@link anytype.Rpc.Ipfs.Image.verify|verify} messages.
                 * @param message Image message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Ipfs.IImage, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Image message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Image
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Ipfs.Image;

                /**
                 * Decodes an Image message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Image
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Ipfs.Image;

                /**
                 * Verifies an Image message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Image message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Image
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Ipfs.Image;

                /**
                 * Creates a plain object from an Image message. Also converts values to other types if specified.
                 * @param message Image
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Ipfs.Image, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Image to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Image {

                /** Properties of a Get. */
                interface IGet {
                }

                /** Represents a Get. */
                class Get implements IGet {

                    /**
                     * Constructs a new Get.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Ipfs.Image.IGet);

                    /**
                     * Creates a new Get instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Get instance
                     */
                    public static create(properties?: anytype.Rpc.Ipfs.Image.IGet): anytype.Rpc.Ipfs.Image.Get;

                    /**
                     * Encodes the specified Get message. Does not implicitly {@link anytype.Rpc.Ipfs.Image.Get.verify|verify} messages.
                     * @param message Get message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Ipfs.Image.IGet, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Get message, length delimited. Does not implicitly {@link anytype.Rpc.Ipfs.Image.Get.verify|verify} messages.
                     * @param message Get message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Ipfs.Image.IGet, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Get message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Get
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Ipfs.Image.Get;

                    /**
                     * Decodes a Get message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Get
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Ipfs.Image.Get;

                    /**
                     * Verifies a Get message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Get message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Get
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Ipfs.Image.Get;

                    /**
                     * Creates a plain object from a Get message. Also converts values to other types if specified.
                     * @param message Get
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Ipfs.Image.Get, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Get to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Get {

                    /** Properties of a Blob. */
                    interface IBlob {
                    }

                    /** Represents a Blob. */
                    class Blob implements IBlob {

                        /**
                         * Constructs a new Blob.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Ipfs.Image.Get.IBlob);

                        /**
                         * Creates a new Blob instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Blob instance
                         */
                        public static create(properties?: anytype.Rpc.Ipfs.Image.Get.IBlob): anytype.Rpc.Ipfs.Image.Get.Blob;

                        /**
                         * Encodes the specified Blob message. Does not implicitly {@link anytype.Rpc.Ipfs.Image.Get.Blob.verify|verify} messages.
                         * @param message Blob message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Ipfs.Image.Get.IBlob, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Blob message, length delimited. Does not implicitly {@link anytype.Rpc.Ipfs.Image.Get.Blob.verify|verify} messages.
                         * @param message Blob message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Ipfs.Image.Get.IBlob, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Blob message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Blob
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Ipfs.Image.Get.Blob;

                        /**
                         * Decodes a Blob message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Blob
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Ipfs.Image.Get.Blob;

                        /**
                         * Verifies a Blob message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Blob message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Blob
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Ipfs.Image.Get.Blob;

                        /**
                         * Creates a plain object from a Blob message. Also converts values to other types if specified.
                         * @param message Blob
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Ipfs.Image.Get.Blob, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Blob to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Blob {

                        /** Properties of a Request. */
                        interface IRequest {

                            /** Request hash */
                            hash?: (string|null);

                            /** Request wantWidth */
                            wantWidth?: (number|null);
                        }

                        /** Represents a Request. */
                        class Request implements IRequest {

                            /**
                             * Constructs a new Request.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Ipfs.Image.Get.Blob.IRequest);

                            /** Request hash. */
                            public hash: string;

                            /** Request wantWidth. */
                            public wantWidth: number;

                            /**
                             * Creates a new Request instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Request instance
                             */
                            public static create(properties?: anytype.Rpc.Ipfs.Image.Get.Blob.IRequest): anytype.Rpc.Ipfs.Image.Get.Blob.Request;

                            /**
                             * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Ipfs.Image.Get.Blob.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Ipfs.Image.Get.Blob.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Ipfs.Image.Get.Blob.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Ipfs.Image.Get.Blob.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Request message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Ipfs.Image.Get.Blob.Request;

                            /**
                             * Decodes a Request message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Ipfs.Image.Get.Blob.Request;

                            /**
                             * Verifies a Request message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Request message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Request
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Ipfs.Image.Get.Blob.Request;

                            /**
                             * Creates a plain object from a Request message. Also converts values to other types if specified.
                             * @param message Request
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Ipfs.Image.Get.Blob.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Request to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        /** Properties of a Response. */
                        interface IResponse {

                            /** Response error */
                            error?: (anytype.Rpc.Ipfs.Image.Get.Blob.Response.IError|null);

                            /** Response blob */
                            blob?: (Uint8Array|null);
                        }

                        /** Represents a Response. */
                        class Response implements IResponse {

                            /**
                             * Constructs a new Response.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Ipfs.Image.Get.Blob.IResponse);

                            /** Response error. */
                            public error?: (anytype.Rpc.Ipfs.Image.Get.Blob.Response.IError|null);

                            /** Response blob. */
                            public blob: Uint8Array;

                            /**
                             * Creates a new Response instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Response instance
                             */
                            public static create(properties?: anytype.Rpc.Ipfs.Image.Get.Blob.IResponse): anytype.Rpc.Ipfs.Image.Get.Blob.Response;

                            /**
                             * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Ipfs.Image.Get.Blob.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Ipfs.Image.Get.Blob.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Ipfs.Image.Get.Blob.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Ipfs.Image.Get.Blob.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Response message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Ipfs.Image.Get.Blob.Response;

                            /**
                             * Decodes a Response message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Ipfs.Image.Get.Blob.Response;

                            /**
                             * Verifies a Response message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Response message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Response
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Ipfs.Image.Get.Blob.Response;

                            /**
                             * Creates a plain object from a Response message. Also converts values to other types if specified.
                             * @param message Response
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Ipfs.Image.Get.Blob.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Response to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Response {

                            /** Properties of an Error. */
                            interface IError {

                                /** Error code */
                                code?: (anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.Code|null);

                                /** Error description */
                                description?: (string|null);
                            }

                            /** Represents an Error. */
                            class Error implements IError {

                                /**
                                 * Constructs a new Error.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: anytype.Rpc.Ipfs.Image.Get.Blob.Response.IError);

                                /** Error code. */
                                public code: anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.Code;

                                /** Error description. */
                                public description: string;

                                /**
                                 * Creates a new Error instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns Error instance
                                 */
                                public static create(properties?: anytype.Rpc.Ipfs.Image.Get.Blob.Response.IError): anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error;

                                /**
                                 * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: anytype.Rpc.Ipfs.Image.Get.Blob.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: anytype.Rpc.Ipfs.Image.Get.Blob.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes an Error message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error;

                                /**
                                 * Decodes an Error message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error;

                                /**
                                 * Verifies an Error message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates an Error message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns Error
                                 */
                                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error;

                                /**
                                 * Creates a plain object from an Error message. Also converts values to other types if specified.
                                 * @param message Error
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this Error to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };
                            }

                            namespace Error {

                                /** Code enum. */
                                enum Code {
                                    NULL = 0,
                                    UNKNOWN_ERROR = 1,
                                    BAD_INPUT = 2,
                                    NOT_FOUND = 101,
                                    TIMEOUT = 102,
                                    NODE_NOT_STARTED = 103
                                }
                            }
                        }
                    }

                    /** Properties of a File. */
                    interface IFile {
                    }

                    /** Represents a File. */
                    class File implements IFile {

                        /**
                         * Constructs a new File.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Ipfs.Image.Get.IFile);

                        /**
                         * Creates a new File instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns File instance
                         */
                        public static create(properties?: anytype.Rpc.Ipfs.Image.Get.IFile): anytype.Rpc.Ipfs.Image.Get.File;

                        /**
                         * Encodes the specified File message. Does not implicitly {@link anytype.Rpc.Ipfs.Image.Get.File.verify|verify} messages.
                         * @param message File message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Ipfs.Image.Get.IFile, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified File message, length delimited. Does not implicitly {@link anytype.Rpc.Ipfs.Image.Get.File.verify|verify} messages.
                         * @param message File message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Ipfs.Image.Get.IFile, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a File message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns File
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Ipfs.Image.Get.File;

                        /**
                         * Decodes a File message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns File
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Ipfs.Image.Get.File;

                        /**
                         * Verifies a File message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a File message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns File
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Ipfs.Image.Get.File;

                        /**
                         * Creates a plain object from a File message. Also converts values to other types if specified.
                         * @param message File
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Ipfs.Image.Get.File, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this File to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace File {

                        /** Properties of a Request. */
                        interface IRequest {

                            /** Request hash */
                            hash?: (string|null);

                            /** Request wantWidth */
                            wantWidth?: (number|null);
                        }

                        /** Represents a Request. */
                        class Request implements IRequest {

                            /**
                             * Constructs a new Request.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Ipfs.Image.Get.File.IRequest);

                            /** Request hash. */
                            public hash: string;

                            /** Request wantWidth. */
                            public wantWidth: number;

                            /**
                             * Creates a new Request instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Request instance
                             */
                            public static create(properties?: anytype.Rpc.Ipfs.Image.Get.File.IRequest): anytype.Rpc.Ipfs.Image.Get.File.Request;

                            /**
                             * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Ipfs.Image.Get.File.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Ipfs.Image.Get.File.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Ipfs.Image.Get.File.Request.verify|verify} messages.
                             * @param message Request message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Ipfs.Image.Get.File.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Request message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Ipfs.Image.Get.File.Request;

                            /**
                             * Decodes a Request message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Request
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Ipfs.Image.Get.File.Request;

                            /**
                             * Verifies a Request message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Request message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Request
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Ipfs.Image.Get.File.Request;

                            /**
                             * Creates a plain object from a Request message. Also converts values to other types if specified.
                             * @param message Request
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Ipfs.Image.Get.File.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Request to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        /** Properties of a Response. */
                        interface IResponse {

                            /** Response error */
                            error?: (anytype.Rpc.Ipfs.Image.Get.File.Response.IError|null);

                            /** Response localPath */
                            localPath?: (string|null);
                        }

                        /** Represents a Response. */
                        class Response implements IResponse {

                            /**
                             * Constructs a new Response.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: anytype.Rpc.Ipfs.Image.Get.File.IResponse);

                            /** Response error. */
                            public error?: (anytype.Rpc.Ipfs.Image.Get.File.Response.IError|null);

                            /** Response localPath. */
                            public localPath: string;

                            /**
                             * Creates a new Response instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Response instance
                             */
                            public static create(properties?: anytype.Rpc.Ipfs.Image.Get.File.IResponse): anytype.Rpc.Ipfs.Image.Get.File.Response;

                            /**
                             * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Ipfs.Image.Get.File.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: anytype.Rpc.Ipfs.Image.Get.File.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Ipfs.Image.Get.File.Response.verify|verify} messages.
                             * @param message Response message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: anytype.Rpc.Ipfs.Image.Get.File.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Response message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Ipfs.Image.Get.File.Response;

                            /**
                             * Decodes a Response message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Response
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Ipfs.Image.Get.File.Response;

                            /**
                             * Verifies a Response message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Response message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Response
                             */
                            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Ipfs.Image.Get.File.Response;

                            /**
                             * Creates a plain object from a Response message. Also converts values to other types if specified.
                             * @param message Response
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: anytype.Rpc.Ipfs.Image.Get.File.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Response to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };
                        }

                        namespace Response {

                            /** Properties of an Error. */
                            interface IError {

                                /** Error code */
                                code?: (anytype.Rpc.Ipfs.Image.Get.File.Response.Error.Code|null);

                                /** Error description */
                                description?: (string|null);
                            }

                            /** Represents an Error. */
                            class Error implements IError {

                                /**
                                 * Constructs a new Error.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: anytype.Rpc.Ipfs.Image.Get.File.Response.IError);

                                /** Error code. */
                                public code: anytype.Rpc.Ipfs.Image.Get.File.Response.Error.Code;

                                /** Error description. */
                                public description: string;

                                /**
                                 * Creates a new Error instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns Error instance
                                 */
                                public static create(properties?: anytype.Rpc.Ipfs.Image.Get.File.Response.IError): anytype.Rpc.Ipfs.Image.Get.File.Response.Error;

                                /**
                                 * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Ipfs.Image.Get.File.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: anytype.Rpc.Ipfs.Image.Get.File.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Ipfs.Image.Get.File.Response.Error.verify|verify} messages.
                                 * @param message Error message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: anytype.Rpc.Ipfs.Image.Get.File.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes an Error message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Ipfs.Image.Get.File.Response.Error;

                                /**
                                 * Decodes an Error message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns Error
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Ipfs.Image.Get.File.Response.Error;

                                /**
                                 * Verifies an Error message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates an Error message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns Error
                                 */
                                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Ipfs.Image.Get.File.Response.Error;

                                /**
                                 * Creates a plain object from an Error message. Also converts values to other types if specified.
                                 * @param message Error
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: anytype.Rpc.Ipfs.Image.Get.File.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this Error to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };
                            }

                            namespace Error {

                                /** Code enum. */
                                enum Code {
                                    NULL = 0,
                                    UNKNOWN_ERROR = 1,
                                    BAD_INPUT = 2,
                                    NOT_FOUND = 101,
                                    TIMEOUT = 102,
                                    NODE_NOT_STARTED = 103
                                }
                            }
                        }
                    }
                }
            }
        }

        /** Properties of a Config. */
        interface IConfig {
        }

        /** Represents a Config. */
        class Config implements IConfig {

            /**
             * Constructs a new Config.
             * @param [properties] Properties to set
             */
            constructor(properties?: anytype.Rpc.IConfig);

            /**
             * Creates a new Config instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Config instance
             */
            public static create(properties?: anytype.Rpc.IConfig): anytype.Rpc.Config;

            /**
             * Encodes the specified Config message. Does not implicitly {@link anytype.Rpc.Config.verify|verify} messages.
             * @param message Config message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: anytype.Rpc.IConfig, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Config message, length delimited. Does not implicitly {@link anytype.Rpc.Config.verify|verify} messages.
             * @param message Config message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: anytype.Rpc.IConfig, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Config message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Config
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Config;

            /**
             * Decodes a Config message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Config
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Config;

            /**
             * Verifies a Config message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Config message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Config
             */
            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Config;

            /**
             * Creates a plain object from a Config message. Also converts values to other types if specified.
             * @param message Config
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: anytype.Rpc.Config, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Config to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Config {

            /** Properties of a Get. */
            interface IGet {
            }

            /** Represents a Get. */
            class Get implements IGet {

                /**
                 * Constructs a new Get.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Config.IGet);

                /**
                 * Creates a new Get instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Get instance
                 */
                public static create(properties?: anytype.Rpc.Config.IGet): anytype.Rpc.Config.Get;

                /**
                 * Encodes the specified Get message. Does not implicitly {@link anytype.Rpc.Config.Get.verify|verify} messages.
                 * @param message Get message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Config.IGet, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Get message, length delimited. Does not implicitly {@link anytype.Rpc.Config.Get.verify|verify} messages.
                 * @param message Get message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Config.IGet, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Get message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Get
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Config.Get;

                /**
                 * Decodes a Get message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Get
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Config.Get;

                /**
                 * Verifies a Get message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Get message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Get
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Config.Get;

                /**
                 * Creates a plain object from a Get message. Also converts values to other types if specified.
                 * @param message Get
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Config.Get, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Get to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Get {

                /** Properties of a Request. */
                interface IRequest {
                }

                /** Represents a Request. */
                class Request implements IRequest {

                    /**
                     * Constructs a new Request.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Config.Get.IRequest);

                    /**
                     * Creates a new Request instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Request instance
                     */
                    public static create(properties?: anytype.Rpc.Config.Get.IRequest): anytype.Rpc.Config.Get.Request;

                    /**
                     * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Config.Get.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Config.Get.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Config.Get.Request.verify|verify} messages.
                     * @param message Request message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Config.Get.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Request message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Config.Get.Request;

                    /**
                     * Decodes a Request message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Request
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Config.Get.Request;

                    /**
                     * Verifies a Request message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Request message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Request
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Config.Get.Request;

                    /**
                     * Creates a plain object from a Request message. Also converts values to other types if specified.
                     * @param message Request
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Config.Get.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Request to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Response. */
                interface IResponse {

                    /** Response error */
                    error?: (anytype.Rpc.Config.Get.Response.IError|null);

                    /** Response homeBlockId */
                    homeBlockId?: (string|null);

                    /** Response gatewayUrl */
                    gatewayUrl?: (string|null);
                }

                /** Represents a Response. */
                class Response implements IResponse {

                    /**
                     * Constructs a new Response.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Config.Get.IResponse);

                    /** Response error. */
                    public error?: (anytype.Rpc.Config.Get.Response.IError|null);

                    /** Response homeBlockId. */
                    public homeBlockId: string;

                    /** Response gatewayUrl. */
                    public gatewayUrl: string;

                    /**
                     * Creates a new Response instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Response instance
                     */
                    public static create(properties?: anytype.Rpc.Config.Get.IResponse): anytype.Rpc.Config.Get.Response;

                    /**
                     * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Config.Get.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Config.Get.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Config.Get.Response.verify|verify} messages.
                     * @param message Response message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Config.Get.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Response message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Config.Get.Response;

                    /**
                     * Decodes a Response message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Response
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Config.Get.Response;

                    /**
                     * Verifies a Response message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Response message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Response
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Config.Get.Response;

                    /**
                     * Creates a plain object from a Response message. Also converts values to other types if specified.
                     * @param message Response
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Config.Get.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Response to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Response {

                    /** Properties of an Error. */
                    interface IError {

                        /** Error code */
                        code?: (anytype.Rpc.Config.Get.Response.Error.Code|null);

                        /** Error description */
                        description?: (string|null);
                    }

                    /** Represents an Error. */
                    class Error implements IError {

                        /**
                         * Constructs a new Error.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Rpc.Config.Get.Response.IError);

                        /** Error code. */
                        public code: anytype.Rpc.Config.Get.Response.Error.Code;

                        /** Error description. */
                        public description: string;

                        /**
                         * Creates a new Error instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Error instance
                         */
                        public static create(properties?: anytype.Rpc.Config.Get.Response.IError): anytype.Rpc.Config.Get.Response.Error;

                        /**
                         * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Config.Get.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Rpc.Config.Get.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Config.Get.Response.Error.verify|verify} messages.
                         * @param message Error message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Rpc.Config.Get.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Error message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Config.Get.Response.Error;

                        /**
                         * Decodes an Error message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Error
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Config.Get.Response.Error;

                        /**
                         * Verifies an Error message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Error message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Error
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Rpc.Config.Get.Response.Error;

                        /**
                         * Creates a plain object from an Error message. Also converts values to other types if specified.
                         * @param message Error
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Rpc.Config.Get.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Error to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Error {

                        /** Code enum. */
                        enum Code {
                            NULL = 0,
                            UNKNOWN_ERROR = 1,
                            BAD_INPUT = 2
                        }
                    }
                }
            }
        }

        /** Properties of a Ping. */
        interface IPing {
        }

        /** Represents a Ping. */
        class Ping implements IPing {

            /**
             * Constructs a new Ping.
             * @param [properties] Properties to set
             */
            constructor(properties?: anytype.Rpc.IPing);

            /**
             * Creates a new Ping instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Ping instance
             */
            public static create(properties?: anytype.Rpc.IPing): anytype.Rpc.Ping;

            /**
             * Encodes the specified Ping message. Does not implicitly {@link anytype.Rpc.Ping.verify|verify} messages.
             * @param message Ping message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: anytype.Rpc.IPing, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Ping message, length delimited. Does not implicitly {@link anytype.Rpc.Ping.verify|verify} messages.
             * @param message Ping message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: anytype.Rpc.IPing, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Ping message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Ping
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Ping;

            /**
             * Decodes a Ping message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Ping
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Ping;

            /**
             * Verifies a Ping message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Ping message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Ping
             */
            public static fromObject(object: { [k: string]: any }): anytype.Rpc.Ping;

            /**
             * Creates a plain object from a Ping message. Also converts values to other types if specified.
             * @param message Ping
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: anytype.Rpc.Ping, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Ping to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Ping {

            /** Properties of a Request. */
            interface IRequest {

                /** Request index */
                index?: (number|null);

                /** Request numberOfEventsToSend */
                numberOfEventsToSend?: (number|null);
            }

            /** Represents a Request. */
            class Request implements IRequest {

                /**
                 * Constructs a new Request.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Ping.IRequest);

                /** Request index. */
                public index: number;

                /** Request numberOfEventsToSend. */
                public numberOfEventsToSend: number;

                /**
                 * Creates a new Request instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Request instance
                 */
                public static create(properties?: anytype.Rpc.Ping.IRequest): anytype.Rpc.Ping.Request;

                /**
                 * Encodes the specified Request message. Does not implicitly {@link anytype.Rpc.Ping.Request.verify|verify} messages.
                 * @param message Request message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Ping.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Request message, length delimited. Does not implicitly {@link anytype.Rpc.Ping.Request.verify|verify} messages.
                 * @param message Request message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Ping.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Request message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Request
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Ping.Request;

                /**
                 * Decodes a Request message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Request
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Ping.Request;

                /**
                 * Verifies a Request message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Request message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Request
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Ping.Request;

                /**
                 * Creates a plain object from a Request message. Also converts values to other types if specified.
                 * @param message Request
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Ping.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Request to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Response. */
            interface IResponse {

                /** Response error */
                error?: (anytype.Rpc.Ping.Response.IError|null);

                /** Response index */
                index?: (number|null);
            }

            /** Represents a Response. */
            class Response implements IResponse {

                /**
                 * Constructs a new Response.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Rpc.Ping.IResponse);

                /** Response error. */
                public error?: (anytype.Rpc.Ping.Response.IError|null);

                /** Response index. */
                public index: number;

                /**
                 * Creates a new Response instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Response instance
                 */
                public static create(properties?: anytype.Rpc.Ping.IResponse): anytype.Rpc.Ping.Response;

                /**
                 * Encodes the specified Response message. Does not implicitly {@link anytype.Rpc.Ping.Response.verify|verify} messages.
                 * @param message Response message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Rpc.Ping.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Response message, length delimited. Does not implicitly {@link anytype.Rpc.Ping.Response.verify|verify} messages.
                 * @param message Response message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Rpc.Ping.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Response message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Response
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Ping.Response;

                /**
                 * Decodes a Response message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Response
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Ping.Response;

                /**
                 * Verifies a Response message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Response message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Response
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Rpc.Ping.Response;

                /**
                 * Creates a plain object from a Response message. Also converts values to other types if specified.
                 * @param message Response
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Rpc.Ping.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Response to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Response {

                /** Properties of an Error. */
                interface IError {

                    /** Error code */
                    code?: (anytype.Rpc.Ping.Response.Error.Code|null);

                    /** Error description */
                    description?: (string|null);
                }

                /** Represents an Error. */
                class Error implements IError {

                    /**
                     * Constructs a new Error.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Rpc.Ping.Response.IError);

                    /** Error code. */
                    public code: anytype.Rpc.Ping.Response.Error.Code;

                    /** Error description. */
                    public description: string;

                    /**
                     * Creates a new Error instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Error instance
                     */
                    public static create(properties?: anytype.Rpc.Ping.Response.IError): anytype.Rpc.Ping.Response.Error;

                    /**
                     * Encodes the specified Error message. Does not implicitly {@link anytype.Rpc.Ping.Response.Error.verify|verify} messages.
                     * @param message Error message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Rpc.Ping.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Error message, length delimited. Does not implicitly {@link anytype.Rpc.Ping.Response.Error.verify|verify} messages.
                     * @param message Error message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Rpc.Ping.Response.IError, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an Error message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Error
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Rpc.Ping.Response.Error;

                    /**
                     * Decodes an Error message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Error
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Rpc.Ping.Response.Error;

                    /**
                     * Verifies an Error message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an Error message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Error
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Rpc.Ping.Response.Error;

                    /**
                     * Creates a plain object from an Error message. Also converts values to other types if specified.
                     * @param message Error
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Rpc.Ping.Response.Error, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Error to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Error {

                    /** Code enum. */
                    enum Code {
                        NULL = 0,
                        UNKNOWN_ERROR = 1,
                        BAD_INPUT = 2
                    }
                }
            }
        }
    }

    /** Properties of an Empty. */
    interface IEmpty {
    }

    /** Represents an Empty. */
    class Empty implements IEmpty {

        /**
         * Constructs a new Empty.
         * @param [properties] Properties to set
         */
        constructor(properties?: anytype.IEmpty);

        /**
         * Creates a new Empty instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Empty instance
         */
        public static create(properties?: anytype.IEmpty): anytype.Empty;

        /**
         * Encodes the specified Empty message. Does not implicitly {@link anytype.Empty.verify|verify} messages.
         * @param message Empty message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: anytype.IEmpty, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified Empty message, length delimited. Does not implicitly {@link anytype.Empty.verify|verify} messages.
         * @param message Empty message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: anytype.IEmpty, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes an Empty message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Empty
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Empty;

        /**
         * Decodes an Empty message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Empty
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Empty;

        /**
         * Verifies an Empty message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates an Empty message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Empty
         */
        public static fromObject(object: { [k: string]: any }): anytype.Empty;

        /**
         * Creates a plain object from an Empty message. Also converts values to other types if specified.
         * @param message Empty
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: anytype.Empty, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this Empty to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of an Event. */
    interface IEvent {

        /** Event messages */
        messages?: (anytype.Event.IMessage[]|null);

        /** Event contextId */
        contextId?: (string|null);

        /** Event initiator */
        initiator?: (anytype.model.IAccount|null);
    }

    /** Represents an Event. */
    class Event implements IEvent {

        /**
         * Constructs a new Event.
         * @param [properties] Properties to set
         */
        constructor(properties?: anytype.IEvent);

        /** Event messages. */
        public messages: anytype.Event.IMessage[];

        /** Event contextId. */
        public contextId: string;

        /** Event initiator. */
        public initiator?: (anytype.model.IAccount|null);

        /**
         * Creates a new Event instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Event instance
         */
        public static create(properties?: anytype.IEvent): anytype.Event;

        /**
         * Encodes the specified Event message. Does not implicitly {@link anytype.Event.verify|verify} messages.
         * @param message Event message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: anytype.IEvent, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified Event message, length delimited. Does not implicitly {@link anytype.Event.verify|verify} messages.
         * @param message Event message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: anytype.IEvent, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes an Event message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Event
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event;

        /**
         * Decodes an Event message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Event
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event;

        /**
         * Verifies an Event message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates an Event message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Event
         */
        public static fromObject(object: { [k: string]: any }): anytype.Event;

        /**
         * Creates a plain object from an Event message. Also converts values to other types if specified.
         * @param message Event
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: anytype.Event, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this Event to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    namespace Event {

        /** Properties of a Message. */
        interface IMessage {

            /** Message accountShow */
            accountShow?: (anytype.Event.Account.IShow|null);

            /** Message blockAdd */
            blockAdd?: (anytype.Event.Block.IAdd|null);

            /** Message blockDelete */
            blockDelete?: (anytype.Event.Block.IDelete|null);

            /** Message filesUpload */
            filesUpload?: (anytype.Event.Block.IFilesUpload|null);

            /** Message marksInfo */
            marksInfo?: (anytype.Event.Block.IMarksInfo|null);

            /** Message blockSetFields */
            blockSetFields?: (anytype.Event.Block.Set.IFields|null);

            /** Message blockSetChildrenIds */
            blockSetChildrenIds?: (anytype.Event.Block.Set.IChildrenIds|null);

            /** Message blockSetRestrictions */
            blockSetRestrictions?: (anytype.Event.Block.Set.IRestrictions|null);

            /** Message blockSetIsArchived */
            blockSetIsArchived?: (anytype.Event.Block.Set.IIsArchived|null);

            /** Message blockSetText */
            blockSetText?: (anytype.Event.Block.Set.IText|null);

            /** Message blockSetFile */
            blockSetFile?: (anytype.Event.Block.Set.IFile|null);

            /** Message blockSetIcon */
            blockSetIcon?: (anytype.Event.Block.Set.IIcon|null);

            /** Message blockSetLink */
            blockSetLink?: (anytype.Event.Block.Set.ILink|null);

            /** Message blockShow */
            blockShow?: (anytype.Event.Block.IShow|null);

            /** Message userBlockJoin */
            userBlockJoin?: (anytype.Event.User.Block.IJoin|null);

            /** Message userBlockLeft */
            userBlockLeft?: (anytype.Event.User.Block.ILeft|null);

            /** Message userBlockSelectRange */
            userBlockSelectRange?: (anytype.Event.User.Block.ISelectRange|null);

            /** Message userBlockTextRange */
            userBlockTextRange?: (anytype.Event.User.Block.ITextRange|null);

            /** Message ping */
            ping?: (anytype.Event.IPing|null);
        }

        /** Represents a Message. */
        class Message implements IMessage {

            /**
             * Constructs a new Message.
             * @param [properties] Properties to set
             */
            constructor(properties?: anytype.Event.IMessage);

            /** Message accountShow. */
            public accountShow?: (anytype.Event.Account.IShow|null);

            /** Message blockAdd. */
            public blockAdd?: (anytype.Event.Block.IAdd|null);

            /** Message blockDelete. */
            public blockDelete?: (anytype.Event.Block.IDelete|null);

            /** Message filesUpload. */
            public filesUpload?: (anytype.Event.Block.IFilesUpload|null);

            /** Message marksInfo. */
            public marksInfo?: (anytype.Event.Block.IMarksInfo|null);

            /** Message blockSetFields. */
            public blockSetFields?: (anytype.Event.Block.Set.IFields|null);

            /** Message blockSetChildrenIds. */
            public blockSetChildrenIds?: (anytype.Event.Block.Set.IChildrenIds|null);

            /** Message blockSetRestrictions. */
            public blockSetRestrictions?: (anytype.Event.Block.Set.IRestrictions|null);

            /** Message blockSetIsArchived. */
            public blockSetIsArchived?: (anytype.Event.Block.Set.IIsArchived|null);

            /** Message blockSetText. */
            public blockSetText?: (anytype.Event.Block.Set.IText|null);

            /** Message blockSetFile. */
            public blockSetFile?: (anytype.Event.Block.Set.IFile|null);

            /** Message blockSetIcon. */
            public blockSetIcon?: (anytype.Event.Block.Set.IIcon|null);

            /** Message blockSetLink. */
            public blockSetLink?: (anytype.Event.Block.Set.ILink|null);

            /** Message blockShow. */
            public blockShow?: (anytype.Event.Block.IShow|null);

            /** Message userBlockJoin. */
            public userBlockJoin?: (anytype.Event.User.Block.IJoin|null);

            /** Message userBlockLeft. */
            public userBlockLeft?: (anytype.Event.User.Block.ILeft|null);

            /** Message userBlockSelectRange. */
            public userBlockSelectRange?: (anytype.Event.User.Block.ISelectRange|null);

            /** Message userBlockTextRange. */
            public userBlockTextRange?: (anytype.Event.User.Block.ITextRange|null);

            /** Message ping. */
            public ping?: (anytype.Event.IPing|null);

            /** Message value. */
            public value?: ("accountShow"|"blockAdd"|"blockDelete"|"filesUpload"|"marksInfo"|"blockSetFields"|"blockSetChildrenIds"|"blockSetRestrictions"|"blockSetIsArchived"|"blockSetText"|"blockSetFile"|"blockSetIcon"|"blockSetLink"|"blockShow"|"userBlockJoin"|"userBlockLeft"|"userBlockSelectRange"|"userBlockTextRange"|"ping");

            /**
             * Creates a new Message instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Message instance
             */
            public static create(properties?: anytype.Event.IMessage): anytype.Event.Message;

            /**
             * Encodes the specified Message message. Does not implicitly {@link anytype.Event.Message.verify|verify} messages.
             * @param message Message message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: anytype.Event.IMessage, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Message message, length delimited. Does not implicitly {@link anytype.Event.Message.verify|verify} messages.
             * @param message Message message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: anytype.Event.IMessage, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Message message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Message
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Message;

            /**
             * Decodes a Message message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Message
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Message;

            /**
             * Verifies a Message message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Message message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Message
             */
            public static fromObject(object: { [k: string]: any }): anytype.Event.Message;

            /**
             * Creates a plain object from a Message message. Also converts values to other types if specified.
             * @param message Message
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: anytype.Event.Message, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Message to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an Account. */
        interface IAccount {
        }

        /** Represents an Account. */
        class Account implements IAccount {

            /**
             * Constructs a new Account.
             * @param [properties] Properties to set
             */
            constructor(properties?: anytype.Event.IAccount);

            /**
             * Creates a new Account instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Account instance
             */
            public static create(properties?: anytype.Event.IAccount): anytype.Event.Account;

            /**
             * Encodes the specified Account message. Does not implicitly {@link anytype.Event.Account.verify|verify} messages.
             * @param message Account message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: anytype.Event.IAccount, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Account message, length delimited. Does not implicitly {@link anytype.Event.Account.verify|verify} messages.
             * @param message Account message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: anytype.Event.IAccount, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an Account message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Account
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Account;

            /**
             * Decodes an Account message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Account
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Account;

            /**
             * Verifies an Account message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an Account message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Account
             */
            public static fromObject(object: { [k: string]: any }): anytype.Event.Account;

            /**
             * Creates a plain object from an Account message. Also converts values to other types if specified.
             * @param message Account
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: anytype.Event.Account, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Account to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Account {

            /** Properties of a Show. */
            interface IShow {

                /** Show index */
                index?: (number|null);

                /** Show account */
                account?: (anytype.model.IAccount|null);
            }

            /** Message, that will be sent to the front on each account found after an AccountRecoverRequest */
            class Show implements IShow {

                /**
                 * Constructs a new Show.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Event.Account.IShow);

                /** Show index. */
                public index: number;

                /** Show account. */
                public account?: (anytype.model.IAccount|null);

                /**
                 * Creates a new Show instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Show instance
                 */
                public static create(properties?: anytype.Event.Account.IShow): anytype.Event.Account.Show;

                /**
                 * Encodes the specified Show message. Does not implicitly {@link anytype.Event.Account.Show.verify|verify} messages.
                 * @param message Show message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Event.Account.IShow, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Show message, length delimited. Does not implicitly {@link anytype.Event.Account.Show.verify|verify} messages.
                 * @param message Show message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Event.Account.IShow, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Show message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Show
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Account.Show;

                /**
                 * Decodes a Show message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Show
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Account.Show;

                /**
                 * Verifies a Show message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Show message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Show
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Event.Account.Show;

                /**
                 * Creates a plain object from a Show message. Also converts values to other types if specified.
                 * @param message Show
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Event.Account.Show, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Show to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a Block. */
        interface IBlock {
        }

        /** Represents a Block. */
        class Block implements IBlock {

            /**
             * Constructs a new Block.
             * @param [properties] Properties to set
             */
            constructor(properties?: anytype.Event.IBlock);

            /**
             * Creates a new Block instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Block instance
             */
            public static create(properties?: anytype.Event.IBlock): anytype.Event.Block;

            /**
             * Encodes the specified Block message. Does not implicitly {@link anytype.Event.Block.verify|verify} messages.
             * @param message Block message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: anytype.Event.IBlock, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Block message, length delimited. Does not implicitly {@link anytype.Event.Block.verify|verify} messages.
             * @param message Block message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: anytype.Event.IBlock, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Block message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Block
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block;

            /**
             * Decodes a Block message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Block
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block;

            /**
             * Verifies a Block message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Block message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Block
             */
            public static fromObject(object: { [k: string]: any }): anytype.Event.Block;

            /**
             * Creates a plain object from a Block message. Also converts values to other types if specified.
             * @param message Block
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: anytype.Event.Block, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Block to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Block {

            /** Properties of an Add. */
            interface IAdd {

                /** Add blocks */
                blocks?: (anytype.model.IBlock[]|null);
            }

            /** Represents an Add. */
            class Add implements IAdd {

                /**
                 * Constructs a new Add.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Event.Block.IAdd);

                /** Add blocks. */
                public blocks: anytype.model.IBlock[];

                /**
                 * Creates a new Add instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Add instance
                 */
                public static create(properties?: anytype.Event.Block.IAdd): anytype.Event.Block.Add;

                /**
                 * Encodes the specified Add message. Does not implicitly {@link anytype.Event.Block.Add.verify|verify} messages.
                 * @param message Add message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Event.Block.IAdd, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Add message, length delimited. Does not implicitly {@link anytype.Event.Block.Add.verify|verify} messages.
                 * @param message Add message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Event.Block.IAdd, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Add message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Add
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Add;

                /**
                 * Decodes an Add message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Add
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Add;

                /**
                 * Verifies an Add message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Add message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Add
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Add;

                /**
                 * Creates a plain object from an Add message. Also converts values to other types if specified.
                 * @param message Add
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Event.Block.Add, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Add to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Show. */
            interface IShow {

                /** Show rootId */
                rootId?: (string|null);

                /** Show blocks */
                blocks?: (anytype.model.IBlock[]|null);
            }

            /** Represents a Show. */
            class Show implements IShow {

                /**
                 * Constructs a new Show.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Event.Block.IShow);

                /** Show rootId. */
                public rootId: string;

                /** Show blocks. */
                public blocks: anytype.model.IBlock[];

                /**
                 * Creates a new Show instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Show instance
                 */
                public static create(properties?: anytype.Event.Block.IShow): anytype.Event.Block.Show;

                /**
                 * Encodes the specified Show message. Does not implicitly {@link anytype.Event.Block.Show.verify|verify} messages.
                 * @param message Show message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Event.Block.IShow, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Show message, length delimited. Does not implicitly {@link anytype.Event.Block.Show.verify|verify} messages.
                 * @param message Show message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Event.Block.IShow, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Show message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Show
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Show;

                /**
                 * Decodes a Show message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Show
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Show;

                /**
                 * Verifies a Show message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Show message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Show
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Show;

                /**
                 * Creates a plain object from a Show message. Also converts values to other types if specified.
                 * @param message Show
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Event.Block.Show, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Show to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a FilesUpload. */
            interface IFilesUpload {

                /** FilesUpload blockId */
                blockId?: (string|null);

                /** FilesUpload filePath */
                filePath?: (string[]|null);
            }

            /**
             * Middleware to front end event message, that will be sent on one of this scenarios:
             * Precondition: user A opened a block
             * 1. User A drops a set of files/pictures/videos
             * 2. User A creates a MediaBlock and drops a single media, that corresponds to its type.
             */
            class FilesUpload implements IFilesUpload {

                /**
                 * Constructs a new FilesUpload.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Event.Block.IFilesUpload);

                /** FilesUpload blockId. */
                public blockId: string;

                /** FilesUpload filePath. */
                public filePath: string[];

                /**
                 * Creates a new FilesUpload instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns FilesUpload instance
                 */
                public static create(properties?: anytype.Event.Block.IFilesUpload): anytype.Event.Block.FilesUpload;

                /**
                 * Encodes the specified FilesUpload message. Does not implicitly {@link anytype.Event.Block.FilesUpload.verify|verify} messages.
                 * @param message FilesUpload message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Event.Block.IFilesUpload, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified FilesUpload message, length delimited. Does not implicitly {@link anytype.Event.Block.FilesUpload.verify|verify} messages.
                 * @param message FilesUpload message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Event.Block.IFilesUpload, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a FilesUpload message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns FilesUpload
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.FilesUpload;

                /**
                 * Decodes a FilesUpload message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns FilesUpload
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.FilesUpload;

                /**
                 * Verifies a FilesUpload message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a FilesUpload message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns FilesUpload
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Event.Block.FilesUpload;

                /**
                 * Creates a plain object from a FilesUpload message. Also converts values to other types if specified.
                 * @param message FilesUpload
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Event.Block.FilesUpload, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this FilesUpload to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Delete. */
            interface IDelete {

                /** Delete blockId */
                blockId?: (string|null);
            }

            /** Represents a Delete. */
            class Delete implements IDelete {

                /**
                 * Constructs a new Delete.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Event.Block.IDelete);

                /** Delete blockId. */
                public blockId: string;

                /**
                 * Creates a new Delete instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Delete instance
                 */
                public static create(properties?: anytype.Event.Block.IDelete): anytype.Event.Block.Delete;

                /**
                 * Encodes the specified Delete message. Does not implicitly {@link anytype.Event.Block.Delete.verify|verify} messages.
                 * @param message Delete message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Event.Block.IDelete, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Delete message, length delimited. Does not implicitly {@link anytype.Event.Block.Delete.verify|verify} messages.
                 * @param message Delete message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Event.Block.IDelete, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Delete message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Delete
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Delete;

                /**
                 * Decodes a Delete message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Delete
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Delete;

                /**
                 * Verifies a Delete message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Delete message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Delete
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Delete;

                /**
                 * Creates a plain object from a Delete message. Also converts values to other types if specified.
                 * @param message Delete
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Event.Block.Delete, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Delete to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a MarksInfo. */
            interface IMarksInfo {

                /** MarksInfo marksInRange */
                marksInRange?: (anytype.model.Block.Content.Text.Mark.Type[]|null);
            }

            /** Represents a MarksInfo. */
            class MarksInfo implements IMarksInfo {

                /**
                 * Constructs a new MarksInfo.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Event.Block.IMarksInfo);

                /** MarksInfo marksInRange. */
                public marksInRange: anytype.model.Block.Content.Text.Mark.Type[];

                /**
                 * Creates a new MarksInfo instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns MarksInfo instance
                 */
                public static create(properties?: anytype.Event.Block.IMarksInfo): anytype.Event.Block.MarksInfo;

                /**
                 * Encodes the specified MarksInfo message. Does not implicitly {@link anytype.Event.Block.MarksInfo.verify|verify} messages.
                 * @param message MarksInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Event.Block.IMarksInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified MarksInfo message, length delimited. Does not implicitly {@link anytype.Event.Block.MarksInfo.verify|verify} messages.
                 * @param message MarksInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Event.Block.IMarksInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a MarksInfo message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns MarksInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.MarksInfo;

                /**
                 * Decodes a MarksInfo message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns MarksInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.MarksInfo;

                /**
                 * Verifies a MarksInfo message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a MarksInfo message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns MarksInfo
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Event.Block.MarksInfo;

                /**
                 * Creates a plain object from a MarksInfo message. Also converts values to other types if specified.
                 * @param message MarksInfo
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Event.Block.MarksInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this MarksInfo to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Set. */
            interface ISet {
            }

            /** Represents a Set. */
            class Set implements ISet {

                /**
                 * Constructs a new Set.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Event.Block.ISet);

                /**
                 * Creates a new Set instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Set instance
                 */
                public static create(properties?: anytype.Event.Block.ISet): anytype.Event.Block.Set;

                /**
                 * Encodes the specified Set message. Does not implicitly {@link anytype.Event.Block.Set.verify|verify} messages.
                 * @param message Set message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Event.Block.ISet, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Set message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.verify|verify} messages.
                 * @param message Set message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Event.Block.ISet, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Set message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Set
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set;

                /**
                 * Decodes a Set message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Set
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set;

                /**
                 * Verifies a Set message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Set message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Set
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set;

                /**
                 * Creates a plain object from a Set message. Also converts values to other types if specified.
                 * @param message Set
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Event.Block.Set, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Set to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Set {

                /** Properties of a Fields. */
                interface IFields {

                    /** Fields id */
                    id?: (string|null);

                    /** Fields fields */
                    fields?: (google.protobuf.IStruct|null);
                }

                /** Represents a Fields. */
                class Fields implements IFields {

                    /**
                     * Constructs a new Fields.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Event.Block.Set.IFields);

                    /** Fields id. */
                    public id: string;

                    /** Fields fields. */
                    public fields?: (google.protobuf.IStruct|null);

                    /**
                     * Creates a new Fields instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Fields instance
                     */
                    public static create(properties?: anytype.Event.Block.Set.IFields): anytype.Event.Block.Set.Fields;

                    /**
                     * Encodes the specified Fields message. Does not implicitly {@link anytype.Event.Block.Set.Fields.verify|verify} messages.
                     * @param message Fields message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Event.Block.Set.IFields, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Fields message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.Fields.verify|verify} messages.
                     * @param message Fields message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Event.Block.Set.IFields, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Fields message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Fields
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.Fields;

                    /**
                     * Decodes a Fields message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Fields
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.Fields;

                    /**
                     * Verifies a Fields message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Fields message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Fields
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.Fields;

                    /**
                     * Creates a plain object from a Fields message. Also converts values to other types if specified.
                     * @param message Fields
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Event.Block.Set.Fields, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Fields to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a ChildrenIds. */
                interface IChildrenIds {

                    /** ChildrenIds id */
                    id?: (string|null);

                    /** ChildrenIds childrenIds */
                    childrenIds?: (string[]|null);
                }

                /** Represents a ChildrenIds. */
                class ChildrenIds implements IChildrenIds {

                    /**
                     * Constructs a new ChildrenIds.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Event.Block.Set.IChildrenIds);

                    /** ChildrenIds id. */
                    public id: string;

                    /** ChildrenIds childrenIds. */
                    public childrenIds: string[];

                    /**
                     * Creates a new ChildrenIds instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns ChildrenIds instance
                     */
                    public static create(properties?: anytype.Event.Block.Set.IChildrenIds): anytype.Event.Block.Set.ChildrenIds;

                    /**
                     * Encodes the specified ChildrenIds message. Does not implicitly {@link anytype.Event.Block.Set.ChildrenIds.verify|verify} messages.
                     * @param message ChildrenIds message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Event.Block.Set.IChildrenIds, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified ChildrenIds message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.ChildrenIds.verify|verify} messages.
                     * @param message ChildrenIds message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Event.Block.Set.IChildrenIds, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a ChildrenIds message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns ChildrenIds
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.ChildrenIds;

                    /**
                     * Decodes a ChildrenIds message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns ChildrenIds
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.ChildrenIds;

                    /**
                     * Verifies a ChildrenIds message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a ChildrenIds message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns ChildrenIds
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.ChildrenIds;

                    /**
                     * Creates a plain object from a ChildrenIds message. Also converts values to other types if specified.
                     * @param message ChildrenIds
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Event.Block.Set.ChildrenIds, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this ChildrenIds to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Restrictions. */
                interface IRestrictions {

                    /** Restrictions id */
                    id?: (string|null);

                    /** Restrictions restrictions */
                    restrictions?: (anytype.model.Block.IRestrictions|null);
                }

                /** Represents a Restrictions. */
                class Restrictions implements IRestrictions {

                    /**
                     * Constructs a new Restrictions.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Event.Block.Set.IRestrictions);

                    /** Restrictions id. */
                    public id: string;

                    /** Restrictions restrictions. */
                    public restrictions?: (anytype.model.Block.IRestrictions|null);

                    /**
                     * Creates a new Restrictions instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Restrictions instance
                     */
                    public static create(properties?: anytype.Event.Block.Set.IRestrictions): anytype.Event.Block.Set.Restrictions;

                    /**
                     * Encodes the specified Restrictions message. Does not implicitly {@link anytype.Event.Block.Set.Restrictions.verify|verify} messages.
                     * @param message Restrictions message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Event.Block.Set.IRestrictions, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Restrictions message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.Restrictions.verify|verify} messages.
                     * @param message Restrictions message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Event.Block.Set.IRestrictions, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Restrictions message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Restrictions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.Restrictions;

                    /**
                     * Decodes a Restrictions message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Restrictions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.Restrictions;

                    /**
                     * Verifies a Restrictions message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Restrictions message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Restrictions
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.Restrictions;

                    /**
                     * Creates a plain object from a Restrictions message. Also converts values to other types if specified.
                     * @param message Restrictions
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Event.Block.Set.Restrictions, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Restrictions to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of an IsArchived. */
                interface IIsArchived {

                    /** IsArchived id */
                    id?: (string|null);

                    /** IsArchived IsArchived */
                    IsArchived?: (boolean|null);
                }

                /** Represents an IsArchived. */
                class IsArchived implements IIsArchived {

                    /**
                     * Constructs a new IsArchived.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Event.Block.Set.IIsArchived);

                    /** IsArchived id. */
                    public id: string;

                    /** IsArchived IsArchived. */
                    public IsArchived: boolean;

                    /**
                     * Creates a new IsArchived instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns IsArchived instance
                     */
                    public static create(properties?: anytype.Event.Block.Set.IIsArchived): anytype.Event.Block.Set.IsArchived;

                    /**
                     * Encodes the specified IsArchived message. Does not implicitly {@link anytype.Event.Block.Set.IsArchived.verify|verify} messages.
                     * @param message IsArchived message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Event.Block.Set.IIsArchived, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified IsArchived message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.IsArchived.verify|verify} messages.
                     * @param message IsArchived message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Event.Block.Set.IIsArchived, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an IsArchived message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns IsArchived
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.IsArchived;

                    /**
                     * Decodes an IsArchived message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns IsArchived
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.IsArchived;

                    /**
                     * Verifies an IsArchived message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an IsArchived message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns IsArchived
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.IsArchived;

                    /**
                     * Creates a plain object from an IsArchived message. Also converts values to other types if specified.
                     * @param message IsArchived
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Event.Block.Set.IsArchived, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this IsArchived to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Text. */
                interface IText {

                    /** Text id */
                    id?: (string|null);

                    /** Text text */
                    text?: (anytype.Event.Block.Set.Text.IText|null);

                    /** Text style */
                    style?: (anytype.Event.Block.Set.Text.IStyle|null);

                    /** Text marks */
                    marks?: (anytype.Event.Block.Set.Text.IMarks|null);

                    /** Text checked */
                    checked?: (anytype.Event.Block.Set.Text.IChecked|null);

                    /** Text color */
                    color?: (anytype.Event.Block.Set.Text.IColor|null);

                    /** Text backgroundColor */
                    backgroundColor?: (anytype.Event.Block.Set.Text.IBackgroundColor|null);
                }

                /** Represents a Text. */
                class Text implements IText {

                    /**
                     * Constructs a new Text.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Event.Block.Set.IText);

                    /** Text id. */
                    public id: string;

                    /** Text text. */
                    public text?: (anytype.Event.Block.Set.Text.IText|null);

                    /** Text style. */
                    public style?: (anytype.Event.Block.Set.Text.IStyle|null);

                    /** Text marks. */
                    public marks?: (anytype.Event.Block.Set.Text.IMarks|null);

                    /** Text checked. */
                    public checked?: (anytype.Event.Block.Set.Text.IChecked|null);

                    /** Text color. */
                    public color?: (anytype.Event.Block.Set.Text.IColor|null);

                    /** Text backgroundColor. */
                    public backgroundColor?: (anytype.Event.Block.Set.Text.IBackgroundColor|null);

                    /**
                     * Creates a new Text instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Text instance
                     */
                    public static create(properties?: anytype.Event.Block.Set.IText): anytype.Event.Block.Set.Text;

                    /**
                     * Encodes the specified Text message. Does not implicitly {@link anytype.Event.Block.Set.Text.verify|verify} messages.
                     * @param message Text message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Event.Block.Set.IText, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Text message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.Text.verify|verify} messages.
                     * @param message Text message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Event.Block.Set.IText, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Text message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Text
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.Text;

                    /**
                     * Decodes a Text message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Text
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.Text;

                    /**
                     * Verifies a Text message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Text message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Text
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.Text;

                    /**
                     * Creates a plain object from a Text message. Also converts values to other types if specified.
                     * @param message Text
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Event.Block.Set.Text, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Text to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Text {

                    /** Properties of a Text. */
                    interface IText {

                        /** Text value */
                        value?: (string|null);
                    }

                    /** Represents a Text. */
                    class Text implements IText {

                        /**
                         * Constructs a new Text.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Event.Block.Set.Text.IText);

                        /** Text value. */
                        public value: string;

                        /**
                         * Creates a new Text instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Text instance
                         */
                        public static create(properties?: anytype.Event.Block.Set.Text.IText): anytype.Event.Block.Set.Text.Text;

                        /**
                         * Encodes the specified Text message. Does not implicitly {@link anytype.Event.Block.Set.Text.Text.verify|verify} messages.
                         * @param message Text message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Event.Block.Set.Text.IText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Text message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.Text.Text.verify|verify} messages.
                         * @param message Text message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Event.Block.Set.Text.IText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Text message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Text
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.Text.Text;

                        /**
                         * Decodes a Text message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Text
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.Text.Text;

                        /**
                         * Verifies a Text message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Text message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Text
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.Text.Text;

                        /**
                         * Creates a plain object from a Text message. Also converts values to other types if specified.
                         * @param message Text
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Event.Block.Set.Text.Text, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Text to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Style. */
                    interface IStyle {

                        /** Style value */
                        value?: (anytype.model.Block.Content.Text.Style|null);
                    }

                    /** Represents a Style. */
                    class Style implements IStyle {

                        /**
                         * Constructs a new Style.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Event.Block.Set.Text.IStyle);

                        /** Style value. */
                        public value: anytype.model.Block.Content.Text.Style;

                        /**
                         * Creates a new Style instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Style instance
                         */
                        public static create(properties?: anytype.Event.Block.Set.Text.IStyle): anytype.Event.Block.Set.Text.Style;

                        /**
                         * Encodes the specified Style message. Does not implicitly {@link anytype.Event.Block.Set.Text.Style.verify|verify} messages.
                         * @param message Style message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Event.Block.Set.Text.IStyle, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Style message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.Text.Style.verify|verify} messages.
                         * @param message Style message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Event.Block.Set.Text.IStyle, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Style message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Style
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.Text.Style;

                        /**
                         * Decodes a Style message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Style
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.Text.Style;

                        /**
                         * Verifies a Style message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Style message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Style
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.Text.Style;

                        /**
                         * Creates a plain object from a Style message. Also converts values to other types if specified.
                         * @param message Style
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Event.Block.Set.Text.Style, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Style to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Marks. */
                    interface IMarks {

                        /** Marks value */
                        value?: (anytype.model.Block.Content.Text.IMarks|null);
                    }

                    /** Represents a Marks. */
                    class Marks implements IMarks {

                        /**
                         * Constructs a new Marks.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Event.Block.Set.Text.IMarks);

                        /** Marks value. */
                        public value?: (anytype.model.Block.Content.Text.IMarks|null);

                        /**
                         * Creates a new Marks instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Marks instance
                         */
                        public static create(properties?: anytype.Event.Block.Set.Text.IMarks): anytype.Event.Block.Set.Text.Marks;

                        /**
                         * Encodes the specified Marks message. Does not implicitly {@link anytype.Event.Block.Set.Text.Marks.verify|verify} messages.
                         * @param message Marks message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Event.Block.Set.Text.IMarks, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Marks message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.Text.Marks.verify|verify} messages.
                         * @param message Marks message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Event.Block.Set.Text.IMarks, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Marks message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Marks
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.Text.Marks;

                        /**
                         * Decodes a Marks message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Marks
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.Text.Marks;

                        /**
                         * Verifies a Marks message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Marks message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Marks
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.Text.Marks;

                        /**
                         * Creates a plain object from a Marks message. Also converts values to other types if specified.
                         * @param message Marks
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Event.Block.Set.Text.Marks, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Marks to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Checked. */
                    interface IChecked {

                        /** Checked value */
                        value?: (boolean|null);
                    }

                    /** Represents a Checked. */
                    class Checked implements IChecked {

                        /**
                         * Constructs a new Checked.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Event.Block.Set.Text.IChecked);

                        /** Checked value. */
                        public value: boolean;

                        /**
                         * Creates a new Checked instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Checked instance
                         */
                        public static create(properties?: anytype.Event.Block.Set.Text.IChecked): anytype.Event.Block.Set.Text.Checked;

                        /**
                         * Encodes the specified Checked message. Does not implicitly {@link anytype.Event.Block.Set.Text.Checked.verify|verify} messages.
                         * @param message Checked message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Event.Block.Set.Text.IChecked, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Checked message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.Text.Checked.verify|verify} messages.
                         * @param message Checked message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Event.Block.Set.Text.IChecked, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Checked message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Checked
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.Text.Checked;

                        /**
                         * Decodes a Checked message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Checked
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.Text.Checked;

                        /**
                         * Verifies a Checked message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Checked message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Checked
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.Text.Checked;

                        /**
                         * Creates a plain object from a Checked message. Also converts values to other types if specified.
                         * @param message Checked
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Event.Block.Set.Text.Checked, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Checked to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Color. */
                    interface IColor {

                        /** Color value */
                        value?: (string|null);
                    }

                    /** Represents a Color. */
                    class Color implements IColor {

                        /**
                         * Constructs a new Color.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Event.Block.Set.Text.IColor);

                        /** Color value. */
                        public value: string;

                        /**
                         * Creates a new Color instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Color instance
                         */
                        public static create(properties?: anytype.Event.Block.Set.Text.IColor): anytype.Event.Block.Set.Text.Color;

                        /**
                         * Encodes the specified Color message. Does not implicitly {@link anytype.Event.Block.Set.Text.Color.verify|verify} messages.
                         * @param message Color message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Event.Block.Set.Text.IColor, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Color message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.Text.Color.verify|verify} messages.
                         * @param message Color message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Event.Block.Set.Text.IColor, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Color message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Color
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.Text.Color;

                        /**
                         * Decodes a Color message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Color
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.Text.Color;

                        /**
                         * Verifies a Color message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Color message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Color
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.Text.Color;

                        /**
                         * Creates a plain object from a Color message. Also converts values to other types if specified.
                         * @param message Color
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Event.Block.Set.Text.Color, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Color to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a BackgroundColor. */
                    interface IBackgroundColor {

                        /** BackgroundColor value */
                        value?: (string|null);
                    }

                    /** Represents a BackgroundColor. */
                    class BackgroundColor implements IBackgroundColor {

                        /**
                         * Constructs a new BackgroundColor.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Event.Block.Set.Text.IBackgroundColor);

                        /** BackgroundColor value. */
                        public value: string;

                        /**
                         * Creates a new BackgroundColor instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns BackgroundColor instance
                         */
                        public static create(properties?: anytype.Event.Block.Set.Text.IBackgroundColor): anytype.Event.Block.Set.Text.BackgroundColor;

                        /**
                         * Encodes the specified BackgroundColor message. Does not implicitly {@link anytype.Event.Block.Set.Text.BackgroundColor.verify|verify} messages.
                         * @param message BackgroundColor message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Event.Block.Set.Text.IBackgroundColor, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified BackgroundColor message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.Text.BackgroundColor.verify|verify} messages.
                         * @param message BackgroundColor message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Event.Block.Set.Text.IBackgroundColor, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a BackgroundColor message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns BackgroundColor
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.Text.BackgroundColor;

                        /**
                         * Decodes a BackgroundColor message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns BackgroundColor
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.Text.BackgroundColor;

                        /**
                         * Verifies a BackgroundColor message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a BackgroundColor message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns BackgroundColor
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.Text.BackgroundColor;

                        /**
                         * Creates a plain object from a BackgroundColor message. Also converts values to other types if specified.
                         * @param message BackgroundColor
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Event.Block.Set.Text.BackgroundColor, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this BackgroundColor to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }
                }

                /** Properties of a File. */
                interface IFile {

                    /** File id */
                    id?: (string|null);

                    /** File type */
                    type?: (anytype.Event.Block.Set.File.IType|null);

                    /** File state */
                    state?: (anytype.Event.Block.Set.File.IState|null);

                    /** File mime */
                    mime?: (anytype.Event.Block.Set.File.IMime|null);

                    /** File hash */
                    hash?: (anytype.Event.Block.Set.File.IHash|null);

                    /** File name */
                    name?: (anytype.Event.Block.Set.File.IName|null);

                    /** File size */
                    size?: (anytype.Event.Block.Set.File.ISize|null);
                }

                /** Represents a File. */
                class File implements IFile {

                    /**
                     * Constructs a new File.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Event.Block.Set.IFile);

                    /** File id. */
                    public id: string;

                    /** File type. */
                    public type?: (anytype.Event.Block.Set.File.IType|null);

                    /** File state. */
                    public state?: (anytype.Event.Block.Set.File.IState|null);

                    /** File mime. */
                    public mime?: (anytype.Event.Block.Set.File.IMime|null);

                    /** File hash. */
                    public hash?: (anytype.Event.Block.Set.File.IHash|null);

                    /** File name. */
                    public name?: (anytype.Event.Block.Set.File.IName|null);

                    /** File size. */
                    public size?: (anytype.Event.Block.Set.File.ISize|null);

                    /**
                     * Creates a new File instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns File instance
                     */
                    public static create(properties?: anytype.Event.Block.Set.IFile): anytype.Event.Block.Set.File;

                    /**
                     * Encodes the specified File message. Does not implicitly {@link anytype.Event.Block.Set.File.verify|verify} messages.
                     * @param message File message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Event.Block.Set.IFile, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified File message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.File.verify|verify} messages.
                     * @param message File message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Event.Block.Set.IFile, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a File message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns File
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.File;

                    /**
                     * Decodes a File message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns File
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.File;

                    /**
                     * Verifies a File message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a File message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns File
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.File;

                    /**
                     * Creates a plain object from a File message. Also converts values to other types if specified.
                     * @param message File
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Event.Block.Set.File, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this File to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace File {

                    /** Properties of a Name. */
                    interface IName {

                        /** Name value */
                        value?: (string|null);
                    }

                    /** Represents a Name. */
                    class Name implements IName {

                        /**
                         * Constructs a new Name.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Event.Block.Set.File.IName);

                        /** Name value. */
                        public value: string;

                        /**
                         * Creates a new Name instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Name instance
                         */
                        public static create(properties?: anytype.Event.Block.Set.File.IName): anytype.Event.Block.Set.File.Name;

                        /**
                         * Encodes the specified Name message. Does not implicitly {@link anytype.Event.Block.Set.File.Name.verify|verify} messages.
                         * @param message Name message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Event.Block.Set.File.IName, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Name message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.File.Name.verify|verify} messages.
                         * @param message Name message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Event.Block.Set.File.IName, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Name message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Name
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.File.Name;

                        /**
                         * Decodes a Name message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Name
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.File.Name;

                        /**
                         * Verifies a Name message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Name message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Name
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.File.Name;

                        /**
                         * Creates a plain object from a Name message. Also converts values to other types if specified.
                         * @param message Name
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Event.Block.Set.File.Name, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Name to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Width. */
                    interface IWidth {

                        /** Width value */
                        value?: (number|null);
                    }

                    /** Represents a Width. */
                    class Width implements IWidth {

                        /**
                         * Constructs a new Width.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Event.Block.Set.File.IWidth);

                        /** Width value. */
                        public value: number;

                        /**
                         * Creates a new Width instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Width instance
                         */
                        public static create(properties?: anytype.Event.Block.Set.File.IWidth): anytype.Event.Block.Set.File.Width;

                        /**
                         * Encodes the specified Width message. Does not implicitly {@link anytype.Event.Block.Set.File.Width.verify|verify} messages.
                         * @param message Width message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Event.Block.Set.File.IWidth, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Width message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.File.Width.verify|verify} messages.
                         * @param message Width message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Event.Block.Set.File.IWidth, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Width message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Width
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.File.Width;

                        /**
                         * Decodes a Width message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Width
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.File.Width;

                        /**
                         * Verifies a Width message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Width message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Width
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.File.Width;

                        /**
                         * Creates a plain object from a Width message. Also converts values to other types if specified.
                         * @param message Width
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Event.Block.Set.File.Width, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Width to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a State. */
                    interface IState {

                        /** State value */
                        value?: (anytype.model.Block.Content.File.State|null);
                    }

                    /** Represents a State. */
                    class State implements IState {

                        /**
                         * Constructs a new State.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Event.Block.Set.File.IState);

                        /** State value. */
                        public value: anytype.model.Block.Content.File.State;

                        /**
                         * Creates a new State instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns State instance
                         */
                        public static create(properties?: anytype.Event.Block.Set.File.IState): anytype.Event.Block.Set.File.State;

                        /**
                         * Encodes the specified State message. Does not implicitly {@link anytype.Event.Block.Set.File.State.verify|verify} messages.
                         * @param message State message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Event.Block.Set.File.IState, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified State message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.File.State.verify|verify} messages.
                         * @param message State message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Event.Block.Set.File.IState, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a State message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns State
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.File.State;

                        /**
                         * Decodes a State message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns State
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.File.State;

                        /**
                         * Verifies a State message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a State message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns State
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.File.State;

                        /**
                         * Creates a plain object from a State message. Also converts values to other types if specified.
                         * @param message State
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Event.Block.Set.File.State, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this State to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Type. */
                    interface IType {

                        /** Type value */
                        value?: (anytype.model.Block.Content.File.Type|null);
                    }

                    /** Represents a Type. */
                    class Type implements IType {

                        /**
                         * Constructs a new Type.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Event.Block.Set.File.IType);

                        /** Type value. */
                        public value: anytype.model.Block.Content.File.Type;

                        /**
                         * Creates a new Type instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Type instance
                         */
                        public static create(properties?: anytype.Event.Block.Set.File.IType): anytype.Event.Block.Set.File.Type;

                        /**
                         * Encodes the specified Type message. Does not implicitly {@link anytype.Event.Block.Set.File.Type.verify|verify} messages.
                         * @param message Type message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Event.Block.Set.File.IType, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Type message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.File.Type.verify|verify} messages.
                         * @param message Type message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Event.Block.Set.File.IType, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Type message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Type
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.File.Type;

                        /**
                         * Decodes a Type message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Type
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.File.Type;

                        /**
                         * Verifies a Type message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Type message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Type
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.File.Type;

                        /**
                         * Creates a plain object from a Type message. Also converts values to other types if specified.
                         * @param message Type
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Event.Block.Set.File.Type, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Type to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Hash. */
                    interface IHash {

                        /** Hash value */
                        value?: (string|null);
                    }

                    /** Represents a Hash. */
                    class Hash implements IHash {

                        /**
                         * Constructs a new Hash.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Event.Block.Set.File.IHash);

                        /** Hash value. */
                        public value: string;

                        /**
                         * Creates a new Hash instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Hash instance
                         */
                        public static create(properties?: anytype.Event.Block.Set.File.IHash): anytype.Event.Block.Set.File.Hash;

                        /**
                         * Encodes the specified Hash message. Does not implicitly {@link anytype.Event.Block.Set.File.Hash.verify|verify} messages.
                         * @param message Hash message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Event.Block.Set.File.IHash, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Hash message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.File.Hash.verify|verify} messages.
                         * @param message Hash message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Event.Block.Set.File.IHash, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Hash message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Hash
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.File.Hash;

                        /**
                         * Decodes a Hash message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Hash
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.File.Hash;

                        /**
                         * Verifies a Hash message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Hash message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Hash
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.File.Hash;

                        /**
                         * Creates a plain object from a Hash message. Also converts values to other types if specified.
                         * @param message Hash
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Event.Block.Set.File.Hash, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Hash to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Mime. */
                    interface IMime {

                        /** Mime value */
                        value?: (string|null);
                    }

                    /** Represents a Mime. */
                    class Mime implements IMime {

                        /**
                         * Constructs a new Mime.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Event.Block.Set.File.IMime);

                        /** Mime value. */
                        public value: string;

                        /**
                         * Creates a new Mime instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Mime instance
                         */
                        public static create(properties?: anytype.Event.Block.Set.File.IMime): anytype.Event.Block.Set.File.Mime;

                        /**
                         * Encodes the specified Mime message. Does not implicitly {@link anytype.Event.Block.Set.File.Mime.verify|verify} messages.
                         * @param message Mime message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Event.Block.Set.File.IMime, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Mime message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.File.Mime.verify|verify} messages.
                         * @param message Mime message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Event.Block.Set.File.IMime, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Mime message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Mime
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.File.Mime;

                        /**
                         * Decodes a Mime message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Mime
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.File.Mime;

                        /**
                         * Verifies a Mime message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Mime message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Mime
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.File.Mime;

                        /**
                         * Creates a plain object from a Mime message. Also converts values to other types if specified.
                         * @param message Mime
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Event.Block.Set.File.Mime, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Mime to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Size. */
                    interface ISize {

                        /** Size value */
                        value?: (number|Long|null);
                    }

                    /** Represents a Size. */
                    class Size implements ISize {

                        /**
                         * Constructs a new Size.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Event.Block.Set.File.ISize);

                        /** Size value. */
                        public value: (number|Long);

                        /**
                         * Creates a new Size instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Size instance
                         */
                        public static create(properties?: anytype.Event.Block.Set.File.ISize): anytype.Event.Block.Set.File.Size;

                        /**
                         * Encodes the specified Size message. Does not implicitly {@link anytype.Event.Block.Set.File.Size.verify|verify} messages.
                         * @param message Size message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Event.Block.Set.File.ISize, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Size message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.File.Size.verify|verify} messages.
                         * @param message Size message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Event.Block.Set.File.ISize, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Size message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Size
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.File.Size;

                        /**
                         * Decodes a Size message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Size
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.File.Size;

                        /**
                         * Verifies a Size message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Size message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Size
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.File.Size;

                        /**
                         * Creates a plain object from a Size message. Also converts values to other types if specified.
                         * @param message Size
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Event.Block.Set.File.Size, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Size to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }
                }

                /** Properties of an Icon. */
                interface IIcon {

                    /** Icon id */
                    id?: (string|null);

                    /** Icon name */
                    name?: (anytype.Event.Block.Set.Icon.IName|null);
                }

                /** Represents an Icon. */
                class Icon implements IIcon {

                    /**
                     * Constructs a new Icon.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Event.Block.Set.IIcon);

                    /** Icon id. */
                    public id: string;

                    /** Icon name. */
                    public name?: (anytype.Event.Block.Set.Icon.IName|null);

                    /**
                     * Creates a new Icon instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Icon instance
                     */
                    public static create(properties?: anytype.Event.Block.Set.IIcon): anytype.Event.Block.Set.Icon;

                    /**
                     * Encodes the specified Icon message. Does not implicitly {@link anytype.Event.Block.Set.Icon.verify|verify} messages.
                     * @param message Icon message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Event.Block.Set.IIcon, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Icon message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.Icon.verify|verify} messages.
                     * @param message Icon message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Event.Block.Set.IIcon, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an Icon message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Icon
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.Icon;

                    /**
                     * Decodes an Icon message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Icon
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.Icon;

                    /**
                     * Verifies an Icon message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an Icon message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Icon
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.Icon;

                    /**
                     * Creates a plain object from an Icon message. Also converts values to other types if specified.
                     * @param message Icon
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Event.Block.Set.Icon, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Icon to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Icon {

                    /** Properties of a Name. */
                    interface IName {

                        /** Name value */
                        value?: (string|null);
                    }

                    /** Represents a Name. */
                    class Name implements IName {

                        /**
                         * Constructs a new Name.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Event.Block.Set.Icon.IName);

                        /** Name value. */
                        public value: string;

                        /**
                         * Creates a new Name instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Name instance
                         */
                        public static create(properties?: anytype.Event.Block.Set.Icon.IName): anytype.Event.Block.Set.Icon.Name;

                        /**
                         * Encodes the specified Name message. Does not implicitly {@link anytype.Event.Block.Set.Icon.Name.verify|verify} messages.
                         * @param message Name message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Event.Block.Set.Icon.IName, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Name message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.Icon.Name.verify|verify} messages.
                         * @param message Name message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Event.Block.Set.Icon.IName, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Name message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Name
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.Icon.Name;

                        /**
                         * Decodes a Name message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Name
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.Icon.Name;

                        /**
                         * Verifies a Name message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Name message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Name
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.Icon.Name;

                        /**
                         * Creates a plain object from a Name message. Also converts values to other types if specified.
                         * @param message Name
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Event.Block.Set.Icon.Name, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Name to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }
                }

                /** Properties of a Link. */
                interface ILink {

                    /** Link id */
                    id?: (string|null);

                    /** Link targetBlockId */
                    targetBlockId?: (anytype.Event.Block.Set.Link.ITargetBlockId|null);

                    /** Link style */
                    style?: (anytype.Event.Block.Set.Link.IStyle|null);

                    /** Link fields */
                    fields?: (anytype.Event.Block.Set.Link.IFields|null);
                }

                /** Represents a Link. */
                class Link implements ILink {

                    /**
                     * Constructs a new Link.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Event.Block.Set.ILink);

                    /** Link id. */
                    public id: string;

                    /** Link targetBlockId. */
                    public targetBlockId?: (anytype.Event.Block.Set.Link.ITargetBlockId|null);

                    /** Link style. */
                    public style?: (anytype.Event.Block.Set.Link.IStyle|null);

                    /** Link fields. */
                    public fields?: (anytype.Event.Block.Set.Link.IFields|null);

                    /**
                     * Creates a new Link instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Link instance
                     */
                    public static create(properties?: anytype.Event.Block.Set.ILink): anytype.Event.Block.Set.Link;

                    /**
                     * Encodes the specified Link message. Does not implicitly {@link anytype.Event.Block.Set.Link.verify|verify} messages.
                     * @param message Link message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Event.Block.Set.ILink, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Link message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.Link.verify|verify} messages.
                     * @param message Link message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Event.Block.Set.ILink, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Link message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Link
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.Link;

                    /**
                     * Decodes a Link message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Link
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.Link;

                    /**
                     * Verifies a Link message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Link message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Link
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.Link;

                    /**
                     * Creates a plain object from a Link message. Also converts values to other types if specified.
                     * @param message Link
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Event.Block.Set.Link, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Link to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Link {

                    /** Properties of a TargetBlockId. */
                    interface ITargetBlockId {

                        /** TargetBlockId value */
                        value?: (string|null);
                    }

                    /** Represents a TargetBlockId. */
                    class TargetBlockId implements ITargetBlockId {

                        /**
                         * Constructs a new TargetBlockId.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Event.Block.Set.Link.ITargetBlockId);

                        /** TargetBlockId value. */
                        public value: string;

                        /**
                         * Creates a new TargetBlockId instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns TargetBlockId instance
                         */
                        public static create(properties?: anytype.Event.Block.Set.Link.ITargetBlockId): anytype.Event.Block.Set.Link.TargetBlockId;

                        /**
                         * Encodes the specified TargetBlockId message. Does not implicitly {@link anytype.Event.Block.Set.Link.TargetBlockId.verify|verify} messages.
                         * @param message TargetBlockId message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Event.Block.Set.Link.ITargetBlockId, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified TargetBlockId message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.Link.TargetBlockId.verify|verify} messages.
                         * @param message TargetBlockId message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Event.Block.Set.Link.ITargetBlockId, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a TargetBlockId message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns TargetBlockId
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.Link.TargetBlockId;

                        /**
                         * Decodes a TargetBlockId message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns TargetBlockId
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.Link.TargetBlockId;

                        /**
                         * Verifies a TargetBlockId message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a TargetBlockId message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns TargetBlockId
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.Link.TargetBlockId;

                        /**
                         * Creates a plain object from a TargetBlockId message. Also converts values to other types if specified.
                         * @param message TargetBlockId
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Event.Block.Set.Link.TargetBlockId, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this TargetBlockId to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Style. */
                    interface IStyle {

                        /** Style value */
                        value?: (anytype.model.Block.Content.Link.Style|null);
                    }

                    /** Represents a Style. */
                    class Style implements IStyle {

                        /**
                         * Constructs a new Style.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Event.Block.Set.Link.IStyle);

                        /** Style value. */
                        public value: anytype.model.Block.Content.Link.Style;

                        /**
                         * Creates a new Style instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Style instance
                         */
                        public static create(properties?: anytype.Event.Block.Set.Link.IStyle): anytype.Event.Block.Set.Link.Style;

                        /**
                         * Encodes the specified Style message. Does not implicitly {@link anytype.Event.Block.Set.Link.Style.verify|verify} messages.
                         * @param message Style message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Event.Block.Set.Link.IStyle, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Style message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.Link.Style.verify|verify} messages.
                         * @param message Style message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Event.Block.Set.Link.IStyle, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Style message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Style
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.Link.Style;

                        /**
                         * Decodes a Style message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Style
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.Link.Style;

                        /**
                         * Verifies a Style message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Style message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Style
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.Link.Style;

                        /**
                         * Creates a plain object from a Style message. Also converts values to other types if specified.
                         * @param message Style
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Event.Block.Set.Link.Style, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Style to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Fields. */
                    interface IFields {

                        /** Fields value */
                        value?: (google.protobuf.IStruct|null);
                    }

                    /** Represents a Fields. */
                    class Fields implements IFields {

                        /**
                         * Constructs a new Fields.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.Event.Block.Set.Link.IFields);

                        /** Fields value. */
                        public value?: (google.protobuf.IStruct|null);

                        /**
                         * Creates a new Fields instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Fields instance
                         */
                        public static create(properties?: anytype.Event.Block.Set.Link.IFields): anytype.Event.Block.Set.Link.Fields;

                        /**
                         * Encodes the specified Fields message. Does not implicitly {@link anytype.Event.Block.Set.Link.Fields.verify|verify} messages.
                         * @param message Fields message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.Event.Block.Set.Link.IFields, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Fields message, length delimited. Does not implicitly {@link anytype.Event.Block.Set.Link.Fields.verify|verify} messages.
                         * @param message Fields message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.Event.Block.Set.Link.IFields, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Fields message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Fields
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Block.Set.Link.Fields;

                        /**
                         * Decodes a Fields message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Fields
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Block.Set.Link.Fields;

                        /**
                         * Verifies a Fields message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Fields message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Fields
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.Event.Block.Set.Link.Fields;

                        /**
                         * Creates a plain object from a Fields message. Also converts values to other types if specified.
                         * @param message Fields
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.Event.Block.Set.Link.Fields, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Fields to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }
                }
            }
        }

        /** Properties of a User. */
        interface IUser {
        }

        /** Represents a User. */
        class User implements IUser {

            /**
             * Constructs a new User.
             * @param [properties] Properties to set
             */
            constructor(properties?: anytype.Event.IUser);

            /**
             * Creates a new User instance using the specified properties.
             * @param [properties] Properties to set
             * @returns User instance
             */
            public static create(properties?: anytype.Event.IUser): anytype.Event.User;

            /**
             * Encodes the specified User message. Does not implicitly {@link anytype.Event.User.verify|verify} messages.
             * @param message User message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: anytype.Event.IUser, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified User message, length delimited. Does not implicitly {@link anytype.Event.User.verify|verify} messages.
             * @param message User message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: anytype.Event.IUser, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a User message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns User
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.User;

            /**
             * Decodes a User message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns User
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.User;

            /**
             * Verifies a User message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a User message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns User
             */
            public static fromObject(object: { [k: string]: any }): anytype.Event.User;

            /**
             * Creates a plain object from a User message. Also converts values to other types if specified.
             * @param message User
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: anytype.Event.User, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this User to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace User {

            /** Properties of a Block. */
            interface IBlock {
            }

            /** Represents a Block. */
            class Block implements IBlock {

                /**
                 * Constructs a new Block.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.Event.User.IBlock);

                /**
                 * Creates a new Block instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Block instance
                 */
                public static create(properties?: anytype.Event.User.IBlock): anytype.Event.User.Block;

                /**
                 * Encodes the specified Block message. Does not implicitly {@link anytype.Event.User.Block.verify|verify} messages.
                 * @param message Block message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.Event.User.IBlock, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Block message, length delimited. Does not implicitly {@link anytype.Event.User.Block.verify|verify} messages.
                 * @param message Block message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.Event.User.IBlock, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Block message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Block
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.User.Block;

                /**
                 * Decodes a Block message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Block
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.User.Block;

                /**
                 * Verifies a Block message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Block message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Block
                 */
                public static fromObject(object: { [k: string]: any }): anytype.Event.User.Block;

                /**
                 * Creates a plain object from a Block message. Also converts values to other types if specified.
                 * @param message Block
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.Event.User.Block, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Block to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Block {

                /** Properties of a Join. */
                interface IJoin {

                    /** Join account */
                    account?: (anytype.Event.IAccount|null);
                }

                /**
                 * Middleware to front end event message, that will be sent in this scenario:
                 * Precondition: user A opened a block
                 * 1. User B opens the same block
                 * 2. User A receives a message about p.1
                 */
                class Join implements IJoin {

                    /**
                     * Constructs a new Join.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Event.User.Block.IJoin);

                    /** Join account. */
                    public account?: (anytype.Event.IAccount|null);

                    /**
                     * Creates a new Join instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Join instance
                     */
                    public static create(properties?: anytype.Event.User.Block.IJoin): anytype.Event.User.Block.Join;

                    /**
                     * Encodes the specified Join message. Does not implicitly {@link anytype.Event.User.Block.Join.verify|verify} messages.
                     * @param message Join message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Event.User.Block.IJoin, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Join message, length delimited. Does not implicitly {@link anytype.Event.User.Block.Join.verify|verify} messages.
                     * @param message Join message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Event.User.Block.IJoin, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Join message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Join
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.User.Block.Join;

                    /**
                     * Decodes a Join message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Join
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.User.Block.Join;

                    /**
                     * Verifies a Join message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Join message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Join
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Event.User.Block.Join;

                    /**
                     * Creates a plain object from a Join message. Also converts values to other types if specified.
                     * @param message Join
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Event.User.Block.Join, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Join to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Left. */
                interface ILeft {

                    /** Left account */
                    account?: (anytype.Event.IAccount|null);
                }

                /**
                 * Middleware to front end event message, that will be sent in this scenario:
                 * Precondition: user A and user B opened the same block
                 * 1. User B closes the block
                 * 2. User A receives a message about p.1
                 */
                class Left implements ILeft {

                    /**
                     * Constructs a new Left.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Event.User.Block.ILeft);

                    /** Left account. */
                    public account?: (anytype.Event.IAccount|null);

                    /**
                     * Creates a new Left instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Left instance
                     */
                    public static create(properties?: anytype.Event.User.Block.ILeft): anytype.Event.User.Block.Left;

                    /**
                     * Encodes the specified Left message. Does not implicitly {@link anytype.Event.User.Block.Left.verify|verify} messages.
                     * @param message Left message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Event.User.Block.ILeft, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Left message, length delimited. Does not implicitly {@link anytype.Event.User.Block.Left.verify|verify} messages.
                     * @param message Left message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Event.User.Block.ILeft, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Left message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Left
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.User.Block.Left;

                    /**
                     * Decodes a Left message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Left
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.User.Block.Left;

                    /**
                     * Verifies a Left message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Left message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Left
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Event.User.Block.Left;

                    /**
                     * Creates a plain object from a Left message. Also converts values to other types if specified.
                     * @param message Left
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Event.User.Block.Left, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Left to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a TextRange. */
                interface ITextRange {

                    /** TextRange account */
                    account?: (anytype.Event.IAccount|null);

                    /** TextRange blockId */
                    blockId?: (string|null);

                    /** TextRange range */
                    range?: (anytype.model.IRange|null);
                }

                /**
                 * Middleware to front end event message, that will be sent in this scenario:
                 * Precondition: user A and user B opened the same block
                 * 1. User B sets cursor or selects a text region into a text block
                 * 2. User A receives a message about p.1
                 */
                class TextRange implements ITextRange {

                    /**
                     * Constructs a new TextRange.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Event.User.Block.ITextRange);

                    /** TextRange account. */
                    public account?: (anytype.Event.IAccount|null);

                    /** TextRange blockId. */
                    public blockId: string;

                    /** TextRange range. */
                    public range?: (anytype.model.IRange|null);

                    /**
                     * Creates a new TextRange instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns TextRange instance
                     */
                    public static create(properties?: anytype.Event.User.Block.ITextRange): anytype.Event.User.Block.TextRange;

                    /**
                     * Encodes the specified TextRange message. Does not implicitly {@link anytype.Event.User.Block.TextRange.verify|verify} messages.
                     * @param message TextRange message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Event.User.Block.ITextRange, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified TextRange message, length delimited. Does not implicitly {@link anytype.Event.User.Block.TextRange.verify|verify} messages.
                     * @param message TextRange message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Event.User.Block.ITextRange, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a TextRange message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns TextRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.User.Block.TextRange;

                    /**
                     * Decodes a TextRange message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns TextRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.User.Block.TextRange;

                    /**
                     * Verifies a TextRange message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a TextRange message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns TextRange
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Event.User.Block.TextRange;

                    /**
                     * Creates a plain object from a TextRange message. Also converts values to other types if specified.
                     * @param message TextRange
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Event.User.Block.TextRange, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this TextRange to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a SelectRange. */
                interface ISelectRange {

                    /** SelectRange account */
                    account?: (anytype.Event.IAccount|null);

                    /** SelectRange blockIdsArray */
                    blockIdsArray?: (string[]|null);
                }

                /**
                 * Middleware to front end event message, that will be sent in this scenario:
                 * Precondition: user A and user B opened the same block
                 * 1. User B selects some inner blocks
                 * 2. User A receives a message about p.1
                 */
                class SelectRange implements ISelectRange {

                    /**
                     * Constructs a new SelectRange.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.Event.User.Block.ISelectRange);

                    /** SelectRange account. */
                    public account?: (anytype.Event.IAccount|null);

                    /** SelectRange blockIdsArray. */
                    public blockIdsArray: string[];

                    /**
                     * Creates a new SelectRange instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns SelectRange instance
                     */
                    public static create(properties?: anytype.Event.User.Block.ISelectRange): anytype.Event.User.Block.SelectRange;

                    /**
                     * Encodes the specified SelectRange message. Does not implicitly {@link anytype.Event.User.Block.SelectRange.verify|verify} messages.
                     * @param message SelectRange message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.Event.User.Block.ISelectRange, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified SelectRange message, length delimited. Does not implicitly {@link anytype.Event.User.Block.SelectRange.verify|verify} messages.
                     * @param message SelectRange message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.Event.User.Block.ISelectRange, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a SelectRange message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns SelectRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.User.Block.SelectRange;

                    /**
                     * Decodes a SelectRange message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns SelectRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.User.Block.SelectRange;

                    /**
                     * Verifies a SelectRange message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a SelectRange message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns SelectRange
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.Event.User.Block.SelectRange;

                    /**
                     * Creates a plain object from a SelectRange message. Also converts values to other types if specified.
                     * @param message SelectRange
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.Event.User.Block.SelectRange, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this SelectRange to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }
        }

        /** Properties of a Ping. */
        interface IPing {

            /** Ping index */
            index?: (number|null);
        }

        /** Represents a Ping. */
        class Ping implements IPing {

            /**
             * Constructs a new Ping.
             * @param [properties] Properties to set
             */
            constructor(properties?: anytype.Event.IPing);

            /** Ping index. */
            public index: number;

            /**
             * Creates a new Ping instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Ping instance
             */
            public static create(properties?: anytype.Event.IPing): anytype.Event.Ping;

            /**
             * Encodes the specified Ping message. Does not implicitly {@link anytype.Event.Ping.verify|verify} messages.
             * @param message Ping message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: anytype.Event.IPing, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Ping message, length delimited. Does not implicitly {@link anytype.Event.Ping.verify|verify} messages.
             * @param message Ping message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: anytype.Event.IPing, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Ping message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Ping
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.Event.Ping;

            /**
             * Decodes a Ping message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Ping
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.Event.Ping;

            /**
             * Verifies a Ping message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Ping message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Ping
             */
            public static fromObject(object: { [k: string]: any }): anytype.Event.Ping;

            /**
             * Creates a plain object from a Ping message. Also converts values to other types if specified.
             * @param message Ping
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: anytype.Event.Ping, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Ping to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }
    }

    /** Represents a ClientCommands */
    class ClientCommands extends $protobuf.rpc.Service {

        /**
         * Constructs a new ClientCommands service.
         * @param rpcImpl RPC implementation
         * @param [requestDelimited=false] Whether requests are length-delimited
         * @param [responseDelimited=false] Whether responses are length-delimited
         */
        constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

        /**
         * Creates new ClientCommands service using the specified rpc implementation.
         * @param rpcImpl RPC implementation
         * @param [requestDelimited=false] Whether requests are length-delimited
         * @param [responseDelimited=false] Whether responses are length-delimited
         * @returns RPC service. Useful where requests and/or responses are streamed.
         */
        public static create(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean): ClientCommands;

        /**
         * Calls WalletCreate.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public walletCreate(request: anytype.Rpc.Wallet.Create.IRequest, callback: anytype.ClientCommands.WalletCreateCallback): void;

        /**
         * Calls WalletCreate.
         * @param request Request message or plain object
         * @returns Promise
         */
        public walletCreate(request: anytype.Rpc.Wallet.Create.IRequest): Promise<anytype.Rpc.Wallet.Create.Response>;

        /**
         * Calls WalletRecover.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public walletRecover(request: anytype.Rpc.Wallet.Recover.IRequest, callback: anytype.ClientCommands.WalletRecoverCallback): void;

        /**
         * Calls WalletRecover.
         * @param request Request message or plain object
         * @returns Promise
         */
        public walletRecover(request: anytype.Rpc.Wallet.Recover.IRequest): Promise<anytype.Rpc.Wallet.Recover.Response>;

        /**
         * Calls AccountRecover.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public accountRecover(request: anytype.Rpc.Account.Recover.IRequest, callback: anytype.ClientCommands.AccountRecoverCallback): void;

        /**
         * Calls AccountRecover.
         * @param request Request message or plain object
         * @returns Promise
         */
        public accountRecover(request: anytype.Rpc.Account.Recover.IRequest): Promise<anytype.Rpc.Account.Recover.Response>;

        /**
         * Calls AccountCreate.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public accountCreate(request: anytype.Rpc.Account.Create.IRequest, callback: anytype.ClientCommands.AccountCreateCallback): void;

        /**
         * Calls AccountCreate.
         * @param request Request message or plain object
         * @returns Promise
         */
        public accountCreate(request: anytype.Rpc.Account.Create.IRequest): Promise<anytype.Rpc.Account.Create.Response>;

        /**
         * Calls AccountSelect.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public accountSelect(request: anytype.Rpc.Account.Select.IRequest, callback: anytype.ClientCommands.AccountSelectCallback): void;

        /**
         * Calls AccountSelect.
         * @param request Request message or plain object
         * @returns Promise
         */
        public accountSelect(request: anytype.Rpc.Account.Select.IRequest): Promise<anytype.Rpc.Account.Select.Response>;

        /**
         * Calls ImageGetBlob.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public imageGetBlob(request: anytype.Rpc.Ipfs.Image.Get.Blob.IRequest, callback: anytype.ClientCommands.ImageGetBlobCallback): void;

        /**
         * Calls ImageGetBlob.
         * @param request Request message or plain object
         * @returns Promise
         */
        public imageGetBlob(request: anytype.Rpc.Ipfs.Image.Get.Blob.IRequest): Promise<anytype.Rpc.Ipfs.Image.Get.Blob.Response>;

        /**
         * Calls VersionGet.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public versionGet(request: anytype.Rpc.Version.Get.IRequest, callback: anytype.ClientCommands.VersionGetCallback): void;

        /**
         * Calls VersionGet.
         * @param request Request message or plain object
         * @returns Promise
         */
        public versionGet(request: anytype.Rpc.Version.Get.IRequest): Promise<anytype.Rpc.Version.Get.Response>;

        /**
         * Calls LogSend.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public logSend(request: anytype.Rpc.Log.Send.IRequest, callback: anytype.ClientCommands.LogSendCallback): void;

        /**
         * Calls LogSend.
         * @param request Request message or plain object
         * @returns Promise
         */
        public logSend(request: anytype.Rpc.Log.Send.IRequest): Promise<anytype.Rpc.Log.Send.Response>;

        /**
         * Calls ConfigGet.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public configGet(request: anytype.Rpc.Config.Get.IRequest, callback: anytype.ClientCommands.ConfigGetCallback): void;

        /**
         * Calls ConfigGet.
         * @param request Request message or plain object
         * @returns Promise
         */
        public configGet(request: anytype.Rpc.Config.Get.IRequest): Promise<anytype.Rpc.Config.Get.Response>;

        /**
         * Calls ExternalDropFiles.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public externalDropFiles(request: anytype.Rpc.ExternalDrop.Files.IRequest, callback: anytype.ClientCommands.ExternalDropFilesCallback): void;

        /**
         * Calls ExternalDropFiles.
         * @param request Request message or plain object
         * @returns Promise
         */
        public externalDropFiles(request: anytype.Rpc.ExternalDrop.Files.IRequest): Promise<anytype.Rpc.ExternalDrop.Files.Response>;

        /**
         * Calls ExternalDropContent.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public externalDropContent(request: anytype.Rpc.ExternalDrop.Content.IRequest, callback: anytype.ClientCommands.ExternalDropContentCallback): void;

        /**
         * Calls ExternalDropContent.
         * @param request Request message or plain object
         * @returns Promise
         */
        public externalDropContent(request: anytype.Rpc.ExternalDrop.Content.IRequest): Promise<anytype.Rpc.ExternalDrop.Content.Response>;

        /**
         * Calls BlockUpload.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockUpload(request: anytype.Rpc.Block.Upload.IRequest, callback: anytype.ClientCommands.BlockUploadCallback): void;

        /**
         * Calls BlockUpload.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockUpload(request: anytype.Rpc.Block.Upload.IRequest): Promise<anytype.Rpc.Block.Upload.Response>;

        /**
         * Calls BlockReplace.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockReplace(request: anytype.Rpc.Block.Replace.IRequest, callback: anytype.ClientCommands.BlockReplaceCallback): void;

        /**
         * Calls BlockReplace.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockReplace(request: anytype.Rpc.Block.Replace.IRequest): Promise<anytype.Rpc.Block.Replace.Response>;

        /**
         * Calls BlockOpen.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockOpen(request: anytype.Rpc.Block.Open.IRequest, callback: anytype.ClientCommands.BlockOpenCallback): void;

        /**
         * Calls BlockOpen.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockOpen(request: anytype.Rpc.Block.Open.IRequest): Promise<anytype.Rpc.Block.Open.Response>;

        /**
         * Calls BlockCreate.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockCreate(request: anytype.Rpc.Block.Create.IRequest, callback: anytype.ClientCommands.BlockCreateCallback): void;

        /**
         * Calls BlockCreate.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockCreate(request: anytype.Rpc.Block.Create.IRequest): Promise<anytype.Rpc.Block.Create.Response>;

        /**
         * Calls BlockCreatePage.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockCreatePage(request: anytype.Rpc.Block.CreatePage.IRequest, callback: anytype.ClientCommands.BlockCreatePageCallback): void;

        /**
         * Calls BlockCreatePage.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockCreatePage(request: anytype.Rpc.Block.CreatePage.IRequest): Promise<anytype.Rpc.Block.CreatePage.Response>;

        /**
         * Calls BlockUnlink.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockUnlink(request: anytype.Rpc.Block.Unlink.IRequest, callback: anytype.ClientCommands.BlockUnlinkCallback): void;

        /**
         * Calls BlockUnlink.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockUnlink(request: anytype.Rpc.Block.Unlink.IRequest): Promise<anytype.Rpc.Block.Unlink.Response>;

        /**
         * Calls BlockClose.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockClose(request: anytype.Rpc.Block.Close.IRequest, callback: anytype.ClientCommands.BlockCloseCallback): void;

        /**
         * Calls BlockClose.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockClose(request: anytype.Rpc.Block.Close.IRequest): Promise<anytype.Rpc.Block.Close.Response>;

        /**
         * Calls BlockDownload.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockDownload(request: anytype.Rpc.Block.Download.IRequest, callback: anytype.ClientCommands.BlockDownloadCallback): void;

        /**
         * Calls BlockDownload.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockDownload(request: anytype.Rpc.Block.Download.IRequest): Promise<anytype.Rpc.Block.Download.Response>;

        /**
         * Calls BlockGetMarks.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockGetMarks(request: anytype.Rpc.Block.Get.Marks.IRequest, callback: anytype.ClientCommands.BlockGetMarksCallback): void;

        /**
         * Calls BlockGetMarks.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockGetMarks(request: anytype.Rpc.Block.Get.Marks.IRequest): Promise<anytype.Rpc.Block.Get.Marks.Response>;

        /**
         * Calls BlockUndo.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockUndo(request: anytype.Rpc.Block.Undo.IRequest, callback: anytype.ClientCommands.BlockUndoCallback): void;

        /**
         * Calls BlockUndo.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockUndo(request: anytype.Rpc.Block.Undo.IRequest): Promise<anytype.Rpc.Block.Undo.Response>;

        /**
         * Calls BlockRedo.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockRedo(request: anytype.Rpc.Block.Redo.IRequest, callback: anytype.ClientCommands.BlockRedoCallback): void;

        /**
         * Calls BlockRedo.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockRedo(request: anytype.Rpc.Block.Redo.IRequest): Promise<anytype.Rpc.Block.Redo.Response>;

        /**
         * Calls BlockSetFields.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockSetFields(request: anytype.Rpc.Block.Set.Fields.IRequest, callback: anytype.ClientCommands.BlockSetFieldsCallback): void;

        /**
         * Calls BlockSetFields.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockSetFields(request: anytype.Rpc.Block.Set.Fields.IRequest): Promise<anytype.Rpc.Block.Set.Fields.Response>;

        /**
         * Calls BlockSetRestrictions.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockSetRestrictions(request: anytype.Rpc.Block.Set.Restrictions.IRequest, callback: anytype.ClientCommands.BlockSetRestrictionsCallback): void;

        /**
         * Calls BlockSetRestrictions.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockSetRestrictions(request: anytype.Rpc.Block.Set.Restrictions.IRequest): Promise<anytype.Rpc.Block.Set.Restrictions.Response>;

        /**
         * Calls BlockSetIsArchived.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockSetIsArchived(request: anytype.Rpc.Block.Set.IsArchived.IRequest, callback: anytype.ClientCommands.BlockSetIsArchivedCallback): void;

        /**
         * Calls BlockSetIsArchived.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockSetIsArchived(request: anytype.Rpc.Block.Set.IsArchived.IRequest): Promise<anytype.Rpc.Block.Set.IsArchived.Response>;

        /**
         * Calls BlockListMove.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockListMove(request: anytype.Rpc.BlockList.Move.IRequest, callback: anytype.ClientCommands.BlockListMoveCallback): void;

        /**
         * Calls BlockListMove.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockListMove(request: anytype.Rpc.BlockList.Move.IRequest): Promise<anytype.Rpc.BlockList.Move.Response>;

        /**
         * Calls BlockListSetFields.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockListSetFields(request: anytype.Rpc.BlockList.Set.Fields.IRequest, callback: anytype.ClientCommands.BlockListSetFieldsCallback): void;

        /**
         * Calls BlockListSetFields.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockListSetFields(request: anytype.Rpc.BlockList.Set.Fields.IRequest): Promise<anytype.Rpc.BlockList.Set.Fields.Response>;

        /**
         * Calls BlockListSetTextStyle.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockListSetTextStyle(request: anytype.Rpc.BlockList.Set.Text.Style.IRequest, callback: anytype.ClientCommands.BlockListSetTextStyleCallback): void;

        /**
         * Calls BlockListSetTextStyle.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockListSetTextStyle(request: anytype.Rpc.BlockList.Set.Text.Style.IRequest): Promise<anytype.Rpc.BlockList.Set.Text.Style.Response>;

        /**
         * Calls BlockListDuplicate.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockListDuplicate(request: anytype.Rpc.BlockList.Duplicate.IRequest, callback: anytype.ClientCommands.BlockListDuplicateCallback): void;

        /**
         * Calls BlockListDuplicate.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockListDuplicate(request: anytype.Rpc.BlockList.Duplicate.IRequest): Promise<anytype.Rpc.BlockList.Duplicate.Response>;

        /**
         * Calls BlockSetTextText.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockSetTextText(request: anytype.Rpc.Block.Set.Text.Text.IRequest, callback: anytype.ClientCommands.BlockSetTextTextCallback): void;

        /**
         * Calls BlockSetTextText.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockSetTextText(request: anytype.Rpc.Block.Set.Text.Text.IRequest): Promise<anytype.Rpc.Block.Set.Text.Text.Response>;

        /**
         * Calls BlockSetTextColor.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockSetTextColor(request: anytype.Rpc.Block.Set.Text.Color.IRequest, callback: anytype.ClientCommands.BlockSetTextColorCallback): void;

        /**
         * Calls BlockSetTextColor.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockSetTextColor(request: anytype.Rpc.Block.Set.Text.Color.IRequest): Promise<anytype.Rpc.Block.Set.Text.Color.Response>;

        /**
         * Calls BlockListSetTextColor.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockListSetTextColor(request: anytype.Rpc.BlockList.Set.Text.Color.IRequest, callback: anytype.ClientCommands.BlockListSetTextColorCallback): void;

        /**
         * Calls BlockListSetTextColor.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockListSetTextColor(request: anytype.Rpc.BlockList.Set.Text.Color.IRequest): Promise<anytype.Rpc.BlockList.Set.Text.Color.Response>;

        /**
         * Calls BlockSetTextBackgroundColor.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockSetTextBackgroundColor(request: anytype.Rpc.Block.Set.Text.BackgroundColor.IRequest, callback: anytype.ClientCommands.BlockSetTextBackgroundColorCallback): void;

        /**
         * Calls BlockSetTextBackgroundColor.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockSetTextBackgroundColor(request: anytype.Rpc.Block.Set.Text.BackgroundColor.IRequest): Promise<anytype.Rpc.Block.Set.Text.BackgroundColor.Response>;

        /**
         * Calls BlockListSetTextBackgroundColor.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockListSetTextBackgroundColor(request: anytype.Rpc.BlockList.Set.Text.BackgroundColor.IRequest, callback: anytype.ClientCommands.BlockListSetTextBackgroundColorCallback): void;

        /**
         * Calls BlockListSetTextBackgroundColor.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockListSetTextBackgroundColor(request: anytype.Rpc.BlockList.Set.Text.BackgroundColor.IRequest): Promise<anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response>;

        /**
         * Calls BlockSetTextStyle.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockSetTextStyle(request: anytype.Rpc.Block.Set.Text.Style.IRequest, callback: anytype.ClientCommands.BlockSetTextStyleCallback): void;

        /**
         * Calls BlockSetTextStyle.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockSetTextStyle(request: anytype.Rpc.Block.Set.Text.Style.IRequest): Promise<anytype.Rpc.Block.Set.Text.Style.Response>;

        /**
         * Calls BlockSetTextChecked.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockSetTextChecked(request: anytype.Rpc.Block.Set.Text.Checked.IRequest, callback: anytype.ClientCommands.BlockSetTextCheckedCallback): void;

        /**
         * Calls BlockSetTextChecked.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockSetTextChecked(request: anytype.Rpc.Block.Set.Text.Checked.IRequest): Promise<anytype.Rpc.Block.Set.Text.Checked.Response>;

        /**
         * Calls BlockSplit.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockSplit(request: anytype.Rpc.Block.Split.IRequest, callback: anytype.ClientCommands.BlockSplitCallback): void;

        /**
         * Calls BlockSplit.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockSplit(request: anytype.Rpc.Block.Split.IRequest): Promise<anytype.Rpc.Block.Split.Response>;

        /**
         * Calls BlockMerge.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockMerge(request: anytype.Rpc.Block.Merge.IRequest, callback: anytype.ClientCommands.BlockMergeCallback): void;

        /**
         * Calls BlockMerge.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockMerge(request: anytype.Rpc.Block.Merge.IRequest): Promise<anytype.Rpc.Block.Merge.Response>;

        /**
         * Calls BlockCopy.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockCopy(request: anytype.Rpc.Block.Copy.IRequest, callback: anytype.ClientCommands.BlockCopyCallback): void;

        /**
         * Calls BlockCopy.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockCopy(request: anytype.Rpc.Block.Copy.IRequest): Promise<anytype.Rpc.Block.Copy.Response>;

        /**
         * Calls BlockPaste.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockPaste(request: anytype.Rpc.Block.Paste.IRequest, callback: anytype.ClientCommands.BlockPasteCallback): void;

        /**
         * Calls BlockPaste.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockPaste(request: anytype.Rpc.Block.Paste.IRequest): Promise<anytype.Rpc.Block.Paste.Response>;

        /**
         * Calls BlockSetFileName.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockSetFileName(request: anytype.Rpc.Block.Set.File.Name.IRequest, callback: anytype.ClientCommands.BlockSetFileNameCallback): void;

        /**
         * Calls BlockSetFileName.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockSetFileName(request: anytype.Rpc.Block.Set.File.Name.IRequest): Promise<anytype.Rpc.Block.Set.File.Name.Response>;

        /**
         * Calls BlockSetImageName.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockSetImageName(request: anytype.Rpc.Block.Set.Image.Name.IRequest, callback: anytype.ClientCommands.BlockSetImageNameCallback): void;

        /**
         * Calls BlockSetImageName.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockSetImageName(request: anytype.Rpc.Block.Set.Image.Name.IRequest): Promise<anytype.Rpc.Block.Set.Image.Name.Response>;

        /**
         * Calls BlockSetImageWidth.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockSetImageWidth(request: anytype.Rpc.Block.Set.Image.Width.IRequest, callback: anytype.ClientCommands.BlockSetImageWidthCallback): void;

        /**
         * Calls BlockSetImageWidth.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockSetImageWidth(request: anytype.Rpc.Block.Set.Image.Width.IRequest): Promise<anytype.Rpc.Block.Set.Image.Width.Response>;

        /**
         * Calls BlockSetVideoName.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockSetVideoName(request: anytype.Rpc.Block.Set.Video.Name.IRequest, callback: anytype.ClientCommands.BlockSetVideoNameCallback): void;

        /**
         * Calls BlockSetVideoName.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockSetVideoName(request: anytype.Rpc.Block.Set.Video.Name.IRequest): Promise<anytype.Rpc.Block.Set.Video.Name.Response>;

        /**
         * Calls BlockSetVideoWidth.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockSetVideoWidth(request: anytype.Rpc.Block.Set.Video.Width.IRequest, callback: anytype.ClientCommands.BlockSetVideoWidthCallback): void;

        /**
         * Calls BlockSetVideoWidth.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockSetVideoWidth(request: anytype.Rpc.Block.Set.Video.Width.IRequest): Promise<anytype.Rpc.Block.Set.Video.Width.Response>;

        /**
         * Calls BlockSetIconName.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockSetIconName(request: anytype.Rpc.Block.Set.Icon.Name.IRequest, callback: anytype.ClientCommands.BlockSetIconNameCallback): void;

        /**
         * Calls BlockSetIconName.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockSetIconName(request: anytype.Rpc.Block.Set.Icon.Name.IRequest): Promise<anytype.Rpc.Block.Set.Icon.Name.Response>;

        /**
         * Calls BlockSetLinkTargetBlockId.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public blockSetLinkTargetBlockId(request: anytype.Rpc.Block.Set.Link.TargetBlockId.IRequest, callback: anytype.ClientCommands.BlockSetLinkTargetBlockIdCallback): void;

        /**
         * Calls BlockSetLinkTargetBlockId.
         * @param request Request message or plain object
         * @returns Promise
         */
        public blockSetLinkTargetBlockId(request: anytype.Rpc.Block.Set.Link.TargetBlockId.IRequest): Promise<anytype.Rpc.Block.Set.Link.TargetBlockId.Response>;

        /**
         * Calls Ping.
         * @param request Request message or plain object
         * @param callback Node-style callback called with the error, if any, and Response
         */
        public ping(request: anytype.Rpc.Ping.IRequest, callback: anytype.ClientCommands.PingCallback): void;

        /**
         * Calls Ping.
         * @param request Request message or plain object
         * @returns Promise
         */
        public ping(request: anytype.Rpc.Ping.IRequest): Promise<anytype.Rpc.Ping.Response>;

        /**
         * Calls ListenEvents.
         * @param request Empty message or plain object
         * @param callback Node-style callback called with the error, if any, and Event
         */
        public listenEvents(request: anytype.IEmpty, callback: anytype.ClientCommands.ListenEventsCallback): void;

        /**
         * Calls ListenEvents.
         * @param request Empty message or plain object
         * @returns Promise
         */
        public listenEvents(request: anytype.IEmpty): Promise<anytype.Event>;
    }

    namespace ClientCommands {

        /**
         * Callback as used by {@link anytype.ClientCommands#walletCreate}.
         * @param error Error, if any
         * @param [response] Response
         */
        type WalletCreateCallback = (error: (Error|null), response?: anytype.Rpc.Wallet.Create.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#walletRecover}.
         * @param error Error, if any
         * @param [response] Response
         */
        type WalletRecoverCallback = (error: (Error|null), response?: anytype.Rpc.Wallet.Recover.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#accountRecover}.
         * @param error Error, if any
         * @param [response] Response
         */
        type AccountRecoverCallback = (error: (Error|null), response?: anytype.Rpc.Account.Recover.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#accountCreate}.
         * @param error Error, if any
         * @param [response] Response
         */
        type AccountCreateCallback = (error: (Error|null), response?: anytype.Rpc.Account.Create.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#accountSelect}.
         * @param error Error, if any
         * @param [response] Response
         */
        type AccountSelectCallback = (error: (Error|null), response?: anytype.Rpc.Account.Select.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#imageGetBlob}.
         * @param error Error, if any
         * @param [response] Response
         */
        type ImageGetBlobCallback = (error: (Error|null), response?: anytype.Rpc.Ipfs.Image.Get.Blob.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#versionGet}.
         * @param error Error, if any
         * @param [response] Response
         */
        type VersionGetCallback = (error: (Error|null), response?: anytype.Rpc.Version.Get.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#logSend}.
         * @param error Error, if any
         * @param [response] Response
         */
        type LogSendCallback = (error: (Error|null), response?: anytype.Rpc.Log.Send.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#configGet}.
         * @param error Error, if any
         * @param [response] Response
         */
        type ConfigGetCallback = (error: (Error|null), response?: anytype.Rpc.Config.Get.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#externalDropFiles}.
         * @param error Error, if any
         * @param [response] Response
         */
        type ExternalDropFilesCallback = (error: (Error|null), response?: anytype.Rpc.ExternalDrop.Files.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#externalDropContent}.
         * @param error Error, if any
         * @param [response] Response
         */
        type ExternalDropContentCallback = (error: (Error|null), response?: anytype.Rpc.ExternalDrop.Content.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockUpload}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockUploadCallback = (error: (Error|null), response?: anytype.Rpc.Block.Upload.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockReplace}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockReplaceCallback = (error: (Error|null), response?: anytype.Rpc.Block.Replace.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockOpen}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockOpenCallback = (error: (Error|null), response?: anytype.Rpc.Block.Open.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockCreate}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockCreateCallback = (error: (Error|null), response?: anytype.Rpc.Block.Create.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockCreatePage}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockCreatePageCallback = (error: (Error|null), response?: anytype.Rpc.Block.CreatePage.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockUnlink}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockUnlinkCallback = (error: (Error|null), response?: anytype.Rpc.Block.Unlink.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockClose}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockCloseCallback = (error: (Error|null), response?: anytype.Rpc.Block.Close.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockDownload}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockDownloadCallback = (error: (Error|null), response?: anytype.Rpc.Block.Download.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockGetMarks}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockGetMarksCallback = (error: (Error|null), response?: anytype.Rpc.Block.Get.Marks.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockUndo}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockUndoCallback = (error: (Error|null), response?: anytype.Rpc.Block.Undo.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockRedo}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockRedoCallback = (error: (Error|null), response?: anytype.Rpc.Block.Redo.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockSetFields}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockSetFieldsCallback = (error: (Error|null), response?: anytype.Rpc.Block.Set.Fields.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockSetRestrictions}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockSetRestrictionsCallback = (error: (Error|null), response?: anytype.Rpc.Block.Set.Restrictions.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockSetIsArchived}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockSetIsArchivedCallback = (error: (Error|null), response?: anytype.Rpc.Block.Set.IsArchived.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockListMove}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockListMoveCallback = (error: (Error|null), response?: anytype.Rpc.BlockList.Move.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockListSetFields}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockListSetFieldsCallback = (error: (Error|null), response?: anytype.Rpc.BlockList.Set.Fields.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockListSetTextStyle}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockListSetTextStyleCallback = (error: (Error|null), response?: anytype.Rpc.BlockList.Set.Text.Style.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockListDuplicate}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockListDuplicateCallback = (error: (Error|null), response?: anytype.Rpc.BlockList.Duplicate.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockSetTextText}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockSetTextTextCallback = (error: (Error|null), response?: anytype.Rpc.Block.Set.Text.Text.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockSetTextColor}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockSetTextColorCallback = (error: (Error|null), response?: anytype.Rpc.Block.Set.Text.Color.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockListSetTextColor}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockListSetTextColorCallback = (error: (Error|null), response?: anytype.Rpc.BlockList.Set.Text.Color.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockSetTextBackgroundColor}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockSetTextBackgroundColorCallback = (error: (Error|null), response?: anytype.Rpc.Block.Set.Text.BackgroundColor.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockListSetTextBackgroundColor}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockListSetTextBackgroundColorCallback = (error: (Error|null), response?: anytype.Rpc.BlockList.Set.Text.BackgroundColor.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockSetTextStyle}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockSetTextStyleCallback = (error: (Error|null), response?: anytype.Rpc.Block.Set.Text.Style.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockSetTextChecked}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockSetTextCheckedCallback = (error: (Error|null), response?: anytype.Rpc.Block.Set.Text.Checked.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockSplit}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockSplitCallback = (error: (Error|null), response?: anytype.Rpc.Block.Split.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockMerge}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockMergeCallback = (error: (Error|null), response?: anytype.Rpc.Block.Merge.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockCopy}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockCopyCallback = (error: (Error|null), response?: anytype.Rpc.Block.Copy.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockPaste}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockPasteCallback = (error: (Error|null), response?: anytype.Rpc.Block.Paste.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockSetFileName}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockSetFileNameCallback = (error: (Error|null), response?: anytype.Rpc.Block.Set.File.Name.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockSetImageName}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockSetImageNameCallback = (error: (Error|null), response?: anytype.Rpc.Block.Set.Image.Name.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockSetImageWidth}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockSetImageWidthCallback = (error: (Error|null), response?: anytype.Rpc.Block.Set.Image.Width.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockSetVideoName}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockSetVideoNameCallback = (error: (Error|null), response?: anytype.Rpc.Block.Set.Video.Name.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockSetVideoWidth}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockSetVideoWidthCallback = (error: (Error|null), response?: anytype.Rpc.Block.Set.Video.Width.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockSetIconName}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockSetIconNameCallback = (error: (Error|null), response?: anytype.Rpc.Block.Set.Icon.Name.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#blockSetLinkTargetBlockId}.
         * @param error Error, if any
         * @param [response] Response
         */
        type BlockSetLinkTargetBlockIdCallback = (error: (Error|null), response?: anytype.Rpc.Block.Set.Link.TargetBlockId.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#ping}.
         * @param error Error, if any
         * @param [response] Response
         */
        type PingCallback = (error: (Error|null), response?: anytype.Rpc.Ping.Response) => void;

        /**
         * Callback as used by {@link anytype.ClientCommands#listenEvents}.
         * @param error Error, if any
         * @param [response] Event
         */
        type ListenEventsCallback = (error: (Error|null), response?: anytype.Event) => void;
    }

    /** Namespace model. */
    namespace model {

        /** Properties of a Block. */
        interface IBlock {

            /** Block id */
            id?: (string|null);

            /** Block fields */
            fields?: (google.protobuf.IStruct|null);

            /** Block restrictions */
            restrictions?: (anytype.model.Block.IRestrictions|null);

            /** Block childrenIds */
            childrenIds?: (string[]|null);

            /** Block isArchived */
            isArchived?: (boolean|null);

            /** Block dashboard */
            dashboard?: (anytype.model.Block.Content.IDashboard|null);

            /** Block page */
            page?: (anytype.model.Block.Content.IPage|null);

            /** Block dataview */
            dataview?: (anytype.model.Block.Content.IDataview|null);

            /** Block text */
            text?: (anytype.model.Block.Content.IText|null);

            /** Block file */
            file?: (anytype.model.Block.Content.IFile|null);

            /** Block layout */
            layout?: (anytype.model.Block.Content.ILayout|null);

            /** Block div */
            div?: (anytype.model.Block.Content.IDiv|null);

            /** Block bookmark */
            bookmark?: (anytype.model.Block.Content.IBookmark|null);

            /** Block icon */
            icon?: (anytype.model.Block.Content.IIcon|null);

            /** Block link */
            link?: (anytype.model.Block.Content.ILink|null);
        }

        /** Represents a Block. */
        class Block implements IBlock {

            /**
             * Constructs a new Block.
             * @param [properties] Properties to set
             */
            constructor(properties?: anytype.model.IBlock);

            /** Block id. */
            public id: string;

            /** Block fields. */
            public fields?: (google.protobuf.IStruct|null);

            /** Block restrictions. */
            public restrictions?: (anytype.model.Block.IRestrictions|null);

            /** Block childrenIds. */
            public childrenIds: string[];

            /** Block isArchived. */
            public isArchived: boolean;

            /** Block dashboard. */
            public dashboard?: (anytype.model.Block.Content.IDashboard|null);

            /** Block page. */
            public page?: (anytype.model.Block.Content.IPage|null);

            /** Block dataview. */
            public dataview?: (anytype.model.Block.Content.IDataview|null);

            /** Block text. */
            public text?: (anytype.model.Block.Content.IText|null);

            /** Block file. */
            public file?: (anytype.model.Block.Content.IFile|null);

            /** Block layout. */
            public layout?: (anytype.model.Block.Content.ILayout|null);

            /** Block div. */
            public div?: (anytype.model.Block.Content.IDiv|null);

            /** Block bookmark. */
            public bookmark?: (anytype.model.Block.Content.IBookmark|null);

            /** Block icon. */
            public icon?: (anytype.model.Block.Content.IIcon|null);

            /** Block link. */
            public link?: (anytype.model.Block.Content.ILink|null);

            /** Block content. */
            public content?: ("dashboard"|"page"|"dataview"|"text"|"file"|"layout"|"div"|"bookmark"|"icon"|"link");

            /**
             * Creates a new Block instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Block instance
             */
            public static create(properties?: anytype.model.IBlock): anytype.model.Block;

            /**
             * Encodes the specified Block message. Does not implicitly {@link anytype.model.Block.verify|verify} messages.
             * @param message Block message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: anytype.model.IBlock, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Block message, length delimited. Does not implicitly {@link anytype.model.Block.verify|verify} messages.
             * @param message Block message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: anytype.model.IBlock, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Block message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Block
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.model.Block;

            /**
             * Decodes a Block message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Block
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.model.Block;

            /**
             * Verifies a Block message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Block message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Block
             */
            public static fromObject(object: { [k: string]: any }): anytype.model.Block;

            /**
             * Creates a plain object from a Block message. Also converts values to other types if specified.
             * @param message Block
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: anytype.model.Block, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Block to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Block {

            /** Properties of a Restrictions. */
            interface IRestrictions {

                /** Restrictions read */
                read?: (boolean|null);

                /** Restrictions edit */
                edit?: (boolean|null);

                /** Restrictions remove */
                remove?: (boolean|null);

                /** Restrictions drag */
                drag?: (boolean|null);

                /** Restrictions dropOn */
                dropOn?: (boolean|null);
            }

            /** Represents a Restrictions. */
            class Restrictions implements IRestrictions {

                /**
                 * Constructs a new Restrictions.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.model.Block.IRestrictions);

                /** Restrictions read. */
                public read: boolean;

                /** Restrictions edit. */
                public edit: boolean;

                /** Restrictions remove. */
                public remove: boolean;

                /** Restrictions drag. */
                public drag: boolean;

                /** Restrictions dropOn. */
                public dropOn: boolean;

                /**
                 * Creates a new Restrictions instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Restrictions instance
                 */
                public static create(properties?: anytype.model.Block.IRestrictions): anytype.model.Block.Restrictions;

                /**
                 * Encodes the specified Restrictions message. Does not implicitly {@link anytype.model.Block.Restrictions.verify|verify} messages.
                 * @param message Restrictions message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.model.Block.IRestrictions, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Restrictions message, length delimited. Does not implicitly {@link anytype.model.Block.Restrictions.verify|verify} messages.
                 * @param message Restrictions message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.model.Block.IRestrictions, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Restrictions message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Restrictions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.model.Block.Restrictions;

                /**
                 * Decodes a Restrictions message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Restrictions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.model.Block.Restrictions;

                /**
                 * Verifies a Restrictions message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Restrictions message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Restrictions
                 */
                public static fromObject(object: { [k: string]: any }): anytype.model.Block.Restrictions;

                /**
                 * Creates a plain object from a Restrictions message. Also converts values to other types if specified.
                 * @param message Restrictions
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.model.Block.Restrictions, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Restrictions to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Position enum. */
            enum Position {
                None = 0,
                Top = 1,
                Bottom = 2,
                Left = 3,
                Right = 4,
                Inner = 5
            }

            /** Properties of a Content. */
            interface IContent {
            }

            /** Represents a Content. */
            class Content implements IContent {

                /**
                 * Constructs a new Content.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.model.Block.IContent);

                /**
                 * Creates a new Content instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Content instance
                 */
                public static create(properties?: anytype.model.Block.IContent): anytype.model.Block.Content;

                /**
                 * Encodes the specified Content message. Does not implicitly {@link anytype.model.Block.Content.verify|verify} messages.
                 * @param message Content message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.model.Block.IContent, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Content message, length delimited. Does not implicitly {@link anytype.model.Block.Content.verify|verify} messages.
                 * @param message Content message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.model.Block.IContent, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Content message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Content
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.model.Block.Content;

                /**
                 * Decodes a Content message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Content
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.model.Block.Content;

                /**
                 * Verifies a Content message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Content message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Content
                 */
                public static fromObject(object: { [k: string]: any }): anytype.model.Block.Content;

                /**
                 * Creates a plain object from a Content message. Also converts values to other types if specified.
                 * @param message Content
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.model.Block.Content, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Content to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Content {

                /** Properties of a Layout. */
                interface ILayout {

                    /** Layout style */
                    style?: (anytype.model.Block.Content.Layout.Style|null);
                }

                /** Represents a Layout. */
                class Layout implements ILayout {

                    /**
                     * Constructs a new Layout.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.model.Block.Content.ILayout);

                    /** Layout style. */
                    public style: anytype.model.Block.Content.Layout.Style;

                    /**
                     * Creates a new Layout instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Layout instance
                     */
                    public static create(properties?: anytype.model.Block.Content.ILayout): anytype.model.Block.Content.Layout;

                    /**
                     * Encodes the specified Layout message. Does not implicitly {@link anytype.model.Block.Content.Layout.verify|verify} messages.
                     * @param message Layout message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.model.Block.Content.ILayout, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Layout message, length delimited. Does not implicitly {@link anytype.model.Block.Content.Layout.verify|verify} messages.
                     * @param message Layout message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.model.Block.Content.ILayout, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Layout message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Layout
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.model.Block.Content.Layout;

                    /**
                     * Decodes a Layout message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Layout
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.model.Block.Content.Layout;

                    /**
                     * Verifies a Layout message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Layout message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Layout
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.model.Block.Content.Layout;

                    /**
                     * Creates a plain object from a Layout message. Also converts values to other types if specified.
                     * @param message Layout
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.model.Block.Content.Layout, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Layout to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Layout {

                    /** Style enum. */
                    enum Style {
                        Row = 0,
                        Column = 1
                    }
                }

                /** Properties of a Link. */
                interface ILink {

                    /** Link targetBlockId */
                    targetBlockId?: (string|null);

                    /** Link style */
                    style?: (anytype.model.Block.Content.Link.Style|null);

                    /** Link fields */
                    fields?: (google.protobuf.IStruct|null);

                    /** Link isArchived */
                    isArchived?: (boolean|null);
                }

                /** Represents a Link. */
                class Link implements ILink {

                    /**
                     * Constructs a new Link.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.model.Block.Content.ILink);

                    /** Link targetBlockId. */
                    public targetBlockId: string;

                    /** Link style. */
                    public style: anytype.model.Block.Content.Link.Style;

                    /** Link fields. */
                    public fields?: (google.protobuf.IStruct|null);

                    /** Link isArchived. */
                    public isArchived: boolean;

                    /**
                     * Creates a new Link instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Link instance
                     */
                    public static create(properties?: anytype.model.Block.Content.ILink): anytype.model.Block.Content.Link;

                    /**
                     * Encodes the specified Link message. Does not implicitly {@link anytype.model.Block.Content.Link.verify|verify} messages.
                     * @param message Link message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.model.Block.Content.ILink, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Link message, length delimited. Does not implicitly {@link anytype.model.Block.Content.Link.verify|verify} messages.
                     * @param message Link message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.model.Block.Content.ILink, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Link message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Link
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.model.Block.Content.Link;

                    /**
                     * Decodes a Link message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Link
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.model.Block.Content.Link;

                    /**
                     * Verifies a Link message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Link message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Link
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.model.Block.Content.Link;

                    /**
                     * Creates a plain object from a Link message. Also converts values to other types if specified.
                     * @param message Link
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.model.Block.Content.Link, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Link to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Link {

                    /** Style enum. */
                    enum Style {
                        Page = 0,
                        Dataview = 1
                    }
                }

                /** Properties of a Div. */
                interface IDiv {
                }

                /** Represents a Div. */
                class Div implements IDiv {

                    /**
                     * Constructs a new Div.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.model.Block.Content.IDiv);

                    /**
                     * Creates a new Div instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Div instance
                     */
                    public static create(properties?: anytype.model.Block.Content.IDiv): anytype.model.Block.Content.Div;

                    /**
                     * Encodes the specified Div message. Does not implicitly {@link anytype.model.Block.Content.Div.verify|verify} messages.
                     * @param message Div message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.model.Block.Content.IDiv, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Div message, length delimited. Does not implicitly {@link anytype.model.Block.Content.Div.verify|verify} messages.
                     * @param message Div message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.model.Block.Content.IDiv, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Div message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Div
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.model.Block.Content.Div;

                    /**
                     * Decodes a Div message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Div
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.model.Block.Content.Div;

                    /**
                     * Verifies a Div message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Div message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Div
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.model.Block.Content.Div;

                    /**
                     * Creates a plain object from a Div message. Also converts values to other types if specified.
                     * @param message Div
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.model.Block.Content.Div, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Div to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Bookmark. */
                interface IBookmark {
                }

                /** Represents a Bookmark. */
                class Bookmark implements IBookmark {

                    /**
                     * Constructs a new Bookmark.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.model.Block.Content.IBookmark);

                    /**
                     * Creates a new Bookmark instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Bookmark instance
                     */
                    public static create(properties?: anytype.model.Block.Content.IBookmark): anytype.model.Block.Content.Bookmark;

                    /**
                     * Encodes the specified Bookmark message. Does not implicitly {@link anytype.model.Block.Content.Bookmark.verify|verify} messages.
                     * @param message Bookmark message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.model.Block.Content.IBookmark, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Bookmark message, length delimited. Does not implicitly {@link anytype.model.Block.Content.Bookmark.verify|verify} messages.
                     * @param message Bookmark message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.model.Block.Content.IBookmark, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Bookmark message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Bookmark
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.model.Block.Content.Bookmark;

                    /**
                     * Decodes a Bookmark message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Bookmark
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.model.Block.Content.Bookmark;

                    /**
                     * Verifies a Bookmark message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Bookmark message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Bookmark
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.model.Block.Content.Bookmark;

                    /**
                     * Creates a plain object from a Bookmark message. Also converts values to other types if specified.
                     * @param message Bookmark
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.model.Block.Content.Bookmark, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Bookmark to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of an Icon. */
                interface IIcon {

                    /** Icon name */
                    name?: (string|null);
                }

                /** Represents an Icon. */
                class Icon implements IIcon {

                    /**
                     * Constructs a new Icon.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.model.Block.Content.IIcon);

                    /** Icon name. */
                    public name: string;

                    /**
                     * Creates a new Icon instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Icon instance
                     */
                    public static create(properties?: anytype.model.Block.Content.IIcon): anytype.model.Block.Content.Icon;

                    /**
                     * Encodes the specified Icon message. Does not implicitly {@link anytype.model.Block.Content.Icon.verify|verify} messages.
                     * @param message Icon message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.model.Block.Content.IIcon, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Icon message, length delimited. Does not implicitly {@link anytype.model.Block.Content.Icon.verify|verify} messages.
                     * @param message Icon message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.model.Block.Content.IIcon, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an Icon message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Icon
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.model.Block.Content.Icon;

                    /**
                     * Decodes an Icon message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Icon
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.model.Block.Content.Icon;

                    /**
                     * Verifies an Icon message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an Icon message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Icon
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.model.Block.Content.Icon;

                    /**
                     * Creates a plain object from an Icon message. Also converts values to other types if specified.
                     * @param message Icon
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.model.Block.Content.Icon, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Icon to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Dashboard. */
                interface IDashboard {

                    /** Dashboard style */
                    style?: (anytype.model.Block.Content.Dashboard.Style|null);
                }

                /** Represents a Dashboard. */
                class Dashboard implements IDashboard {

                    /**
                     * Constructs a new Dashboard.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.model.Block.Content.IDashboard);

                    /** Dashboard style. */
                    public style: anytype.model.Block.Content.Dashboard.Style;

                    /**
                     * Creates a new Dashboard instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Dashboard instance
                     */
                    public static create(properties?: anytype.model.Block.Content.IDashboard): anytype.model.Block.Content.Dashboard;

                    /**
                     * Encodes the specified Dashboard message. Does not implicitly {@link anytype.model.Block.Content.Dashboard.verify|verify} messages.
                     * @param message Dashboard message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.model.Block.Content.IDashboard, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Dashboard message, length delimited. Does not implicitly {@link anytype.model.Block.Content.Dashboard.verify|verify} messages.
                     * @param message Dashboard message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.model.Block.Content.IDashboard, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Dashboard message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Dashboard
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.model.Block.Content.Dashboard;

                    /**
                     * Decodes a Dashboard message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Dashboard
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.model.Block.Content.Dashboard;

                    /**
                     * Verifies a Dashboard message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Dashboard message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Dashboard
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.model.Block.Content.Dashboard;

                    /**
                     * Creates a plain object from a Dashboard message. Also converts values to other types if specified.
                     * @param message Dashboard
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.model.Block.Content.Dashboard, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Dashboard to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Dashboard {

                    /** Style enum. */
                    enum Style {
                        MainScreen = 0,
                        Archive = 1
                    }
                }

                /** Properties of a Dataview. */
                interface IDataview {
                }

                /** Represents a Dataview. */
                class Dataview implements IDataview {

                    /**
                     * Constructs a new Dataview.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.model.Block.Content.IDataview);

                    /**
                     * Creates a new Dataview instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Dataview instance
                     */
                    public static create(properties?: anytype.model.Block.Content.IDataview): anytype.model.Block.Content.Dataview;

                    /**
                     * Encodes the specified Dataview message. Does not implicitly {@link anytype.model.Block.Content.Dataview.verify|verify} messages.
                     * @param message Dataview message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.model.Block.Content.IDataview, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Dataview message, length delimited. Does not implicitly {@link anytype.model.Block.Content.Dataview.verify|verify} messages.
                     * @param message Dataview message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.model.Block.Content.IDataview, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Dataview message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Dataview
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.model.Block.Content.Dataview;

                    /**
                     * Decodes a Dataview message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Dataview
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.model.Block.Content.Dataview;

                    /**
                     * Verifies a Dataview message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Dataview message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Dataview
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.model.Block.Content.Dataview;

                    /**
                     * Creates a plain object from a Dataview message. Also converts values to other types if specified.
                     * @param message Dataview
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.model.Block.Content.Dataview, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Dataview to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Text. */
                interface IText {

                    /** Text text */
                    text?: (string|null);

                    /** Text style */
                    style?: (anytype.model.Block.Content.Text.Style|null);

                    /** Text marks */
                    marks?: (anytype.model.Block.Content.Text.IMarks|null);

                    /** Text checked */
                    checked?: (boolean|null);

                    /** Text color */
                    color?: (string|null);

                    /** Text backgroundColor */
                    backgroundColor?: (string|null);
                }

                /** Represents a Text. */
                class Text implements IText {

                    /**
                     * Constructs a new Text.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.model.Block.Content.IText);

                    /** Text text. */
                    public text: string;

                    /** Text style. */
                    public style: anytype.model.Block.Content.Text.Style;

                    /** Text marks. */
                    public marks?: (anytype.model.Block.Content.Text.IMarks|null);

                    /** Text checked. */
                    public checked: boolean;

                    /** Text color. */
                    public color: string;

                    /** Text backgroundColor. */
                    public backgroundColor: string;

                    /**
                     * Creates a new Text instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Text instance
                     */
                    public static create(properties?: anytype.model.Block.Content.IText): anytype.model.Block.Content.Text;

                    /**
                     * Encodes the specified Text message. Does not implicitly {@link anytype.model.Block.Content.Text.verify|verify} messages.
                     * @param message Text message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.model.Block.Content.IText, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Text message, length delimited. Does not implicitly {@link anytype.model.Block.Content.Text.verify|verify} messages.
                     * @param message Text message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.model.Block.Content.IText, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Text message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Text
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.model.Block.Content.Text;

                    /**
                     * Decodes a Text message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Text
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.model.Block.Content.Text;

                    /**
                     * Verifies a Text message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Text message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Text
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.model.Block.Content.Text;

                    /**
                     * Creates a plain object from a Text message. Also converts values to other types if specified.
                     * @param message Text
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.model.Block.Content.Text, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Text to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Text {

                    /** Properties of a Marks. */
                    interface IMarks {

                        /** Marks marks */
                        marks?: (anytype.model.Block.Content.Text.IMark[]|null);
                    }

                    /** Represents a Marks. */
                    class Marks implements IMarks {

                        /**
                         * Constructs a new Marks.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.model.Block.Content.Text.IMarks);

                        /** Marks marks. */
                        public marks: anytype.model.Block.Content.Text.IMark[];

                        /**
                         * Creates a new Marks instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Marks instance
                         */
                        public static create(properties?: anytype.model.Block.Content.Text.IMarks): anytype.model.Block.Content.Text.Marks;

                        /**
                         * Encodes the specified Marks message. Does not implicitly {@link anytype.model.Block.Content.Text.Marks.verify|verify} messages.
                         * @param message Marks message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.model.Block.Content.Text.IMarks, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Marks message, length delimited. Does not implicitly {@link anytype.model.Block.Content.Text.Marks.verify|verify} messages.
                         * @param message Marks message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.model.Block.Content.Text.IMarks, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Marks message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Marks
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.model.Block.Content.Text.Marks;

                        /**
                         * Decodes a Marks message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Marks
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.model.Block.Content.Text.Marks;

                        /**
                         * Verifies a Marks message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Marks message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Marks
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.model.Block.Content.Text.Marks;

                        /**
                         * Creates a plain object from a Marks message. Also converts values to other types if specified.
                         * @param message Marks
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.model.Block.Content.Text.Marks, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Marks to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a Mark. */
                    interface IMark {

                        /** Mark range */
                        range?: (anytype.model.IRange|null);

                        /** Mark type */
                        type?: (anytype.model.Block.Content.Text.Mark.Type|null);

                        /** Mark param */
                        param?: (string|null);
                    }

                    /** Represents a Mark. */
                    class Mark implements IMark {

                        /**
                         * Constructs a new Mark.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: anytype.model.Block.Content.Text.IMark);

                        /** Mark range. */
                        public range?: (anytype.model.IRange|null);

                        /** Mark type. */
                        public type: anytype.model.Block.Content.Text.Mark.Type;

                        /** Mark param. */
                        public param: string;

                        /**
                         * Creates a new Mark instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Mark instance
                         */
                        public static create(properties?: anytype.model.Block.Content.Text.IMark): anytype.model.Block.Content.Text.Mark;

                        /**
                         * Encodes the specified Mark message. Does not implicitly {@link anytype.model.Block.Content.Text.Mark.verify|verify} messages.
                         * @param message Mark message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: anytype.model.Block.Content.Text.IMark, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Mark message, length delimited. Does not implicitly {@link anytype.model.Block.Content.Text.Mark.verify|verify} messages.
                         * @param message Mark message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: anytype.model.Block.Content.Text.IMark, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Mark message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Mark
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.model.Block.Content.Text.Mark;

                        /**
                         * Decodes a Mark message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Mark
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.model.Block.Content.Text.Mark;

                        /**
                         * Verifies a Mark message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Mark message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Mark
                         */
                        public static fromObject(object: { [k: string]: any }): anytype.model.Block.Content.Text.Mark;

                        /**
                         * Creates a plain object from a Mark message. Also converts values to other types if specified.
                         * @param message Mark
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: anytype.model.Block.Content.Text.Mark, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Mark to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    namespace Mark {

                        /** Type enum. */
                        enum Type {
                            Strikethrough = 0,
                            Keyboard = 1,
                            Italic = 2,
                            Bold = 3,
                            Underscored = 4,
                            Link = 5,
                            TextColor = 6,
                            BackgroundColor = 7
                        }
                    }

                    /** Style enum. */
                    enum Style {
                        Paragraph = 0,
                        Header1 = 1,
                        Header2 = 2,
                        Header3 = 3,
                        Header4 = 4,
                        Quote = 5,
                        Code = 6,
                        Title = 7,
                        Checkbox = 8,
                        Marked = 9,
                        Numbered = 10,
                        Toggle = 11
                    }
                }

                /** Properties of a File. */
                interface IFile {

                    /** File hash */
                    hash?: (string|null);

                    /** File name */
                    name?: (string|null);

                    /** File type */
                    type?: (anytype.model.Block.Content.File.Type|null);

                    /** File mime */
                    mime?: (string|null);

                    /** File size */
                    size?: (number|Long|null);

                    /** File addedAt */
                    addedAt?: (number|Long|null);

                    /** File state */
                    state?: (anytype.model.Block.Content.File.State|null);
                }

                /** Represents a File. */
                class File implements IFile {

                    /**
                     * Constructs a new File.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.model.Block.Content.IFile);

                    /** File hash. */
                    public hash: string;

                    /** File name. */
                    public name: string;

                    /** File type. */
                    public type: anytype.model.Block.Content.File.Type;

                    /** File mime. */
                    public mime: string;

                    /** File size. */
                    public size: (number|Long);

                    /** File addedAt. */
                    public addedAt: (number|Long);

                    /** File state. */
                    public state: anytype.model.Block.Content.File.State;

                    /**
                     * Creates a new File instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns File instance
                     */
                    public static create(properties?: anytype.model.Block.Content.IFile): anytype.model.Block.Content.File;

                    /**
                     * Encodes the specified File message. Does not implicitly {@link anytype.model.Block.Content.File.verify|verify} messages.
                     * @param message File message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.model.Block.Content.IFile, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified File message, length delimited. Does not implicitly {@link anytype.model.Block.Content.File.verify|verify} messages.
                     * @param message File message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.model.Block.Content.IFile, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a File message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns File
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.model.Block.Content.File;

                    /**
                     * Decodes a File message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns File
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.model.Block.Content.File;

                    /**
                     * Verifies a File message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a File message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns File
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.model.Block.Content.File;

                    /**
                     * Creates a plain object from a File message. Also converts values to other types if specified.
                     * @param message File
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.model.Block.Content.File, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this File to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace File {

                    /** Type enum. */
                    enum Type {
                        None = 0,
                        File = 1,
                        Image = 2,
                        Video = 3
                    }

                    /** State enum. */
                    enum State {
                        Empty = 0,
                        Uploading = 1,
                        Done = 2,
                        Error = 3
                    }
                }

                /** Properties of a Page. */
                interface IPage {

                    /** Page style */
                    style?: (anytype.model.Block.Content.Page.Style|null);
                }

                /** Represents a Page. */
                class Page implements IPage {

                    /**
                     * Constructs a new Page.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: anytype.model.Block.Content.IPage);

                    /** Page style. */
                    public style: anytype.model.Block.Content.Page.Style;

                    /**
                     * Creates a new Page instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Page instance
                     */
                    public static create(properties?: anytype.model.Block.Content.IPage): anytype.model.Block.Content.Page;

                    /**
                     * Encodes the specified Page message. Does not implicitly {@link anytype.model.Block.Content.Page.verify|verify} messages.
                     * @param message Page message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: anytype.model.Block.Content.IPage, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Page message, length delimited. Does not implicitly {@link anytype.model.Block.Content.Page.verify|verify} messages.
                     * @param message Page message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: anytype.model.Block.Content.IPage, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Page message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Page
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.model.Block.Content.Page;

                    /**
                     * Decodes a Page message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Page
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.model.Block.Content.Page;

                    /**
                     * Verifies a Page message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Page message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Page
                     */
                    public static fromObject(object: { [k: string]: any }): anytype.model.Block.Content.Page;

                    /**
                     * Creates a plain object from a Page message. Also converts values to other types if specified.
                     * @param message Page
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: anytype.model.Block.Content.Page, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Page to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace Page {

                    /** Style enum. */
                    enum Style {
                        Empty = 0,
                        Task = 1,
                        Set = 2
                    }
                }
            }
        }

        /** Properties of a BlockMetaOnly. */
        interface IBlockMetaOnly {

            /** BlockMetaOnly id */
            id?: (string|null);

            /** BlockMetaOnly fields */
            fields?: (google.protobuf.IStruct|null);

            /** BlockMetaOnly isArchived */
            isArchived?: (boolean|null);
        }

        /** Represents a BlockMetaOnly. */
        class BlockMetaOnly implements IBlockMetaOnly {

            /**
             * Constructs a new BlockMetaOnly.
             * @param [properties] Properties to set
             */
            constructor(properties?: anytype.model.IBlockMetaOnly);

            /** BlockMetaOnly id. */
            public id: string;

            /** BlockMetaOnly fields. */
            public fields?: (google.protobuf.IStruct|null);

            /** BlockMetaOnly isArchived. */
            public isArchived: boolean;

            /**
             * Creates a new BlockMetaOnly instance using the specified properties.
             * @param [properties] Properties to set
             * @returns BlockMetaOnly instance
             */
            public static create(properties?: anytype.model.IBlockMetaOnly): anytype.model.BlockMetaOnly;

            /**
             * Encodes the specified BlockMetaOnly message. Does not implicitly {@link anytype.model.BlockMetaOnly.verify|verify} messages.
             * @param message BlockMetaOnly message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: anytype.model.IBlockMetaOnly, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified BlockMetaOnly message, length delimited. Does not implicitly {@link anytype.model.BlockMetaOnly.verify|verify} messages.
             * @param message BlockMetaOnly message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: anytype.model.IBlockMetaOnly, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a BlockMetaOnly message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns BlockMetaOnly
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.model.BlockMetaOnly;

            /**
             * Decodes a BlockMetaOnly message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns BlockMetaOnly
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.model.BlockMetaOnly;

            /**
             * Verifies a BlockMetaOnly message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a BlockMetaOnly message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns BlockMetaOnly
             */
            public static fromObject(object: { [k: string]: any }): anytype.model.BlockMetaOnly;

            /**
             * Creates a plain object from a BlockMetaOnly message. Also converts values to other types if specified.
             * @param message BlockMetaOnly
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: anytype.model.BlockMetaOnly, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this BlockMetaOnly to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Range. */
        interface IRange {

            /** Range from */
            from?: (number|null);

            /** Range to */
            to?: (number|null);
        }

        /** Represents a Range. */
        class Range implements IRange {

            /**
             * Constructs a new Range.
             * @param [properties] Properties to set
             */
            constructor(properties?: anytype.model.IRange);

            /** Range from. */
            public from: number;

            /** Range to. */
            public to: number;

            /**
             * Creates a new Range instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Range instance
             */
            public static create(properties?: anytype.model.IRange): anytype.model.Range;

            /**
             * Encodes the specified Range message. Does not implicitly {@link anytype.model.Range.verify|verify} messages.
             * @param message Range message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: anytype.model.IRange, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Range message, length delimited. Does not implicitly {@link anytype.model.Range.verify|verify} messages.
             * @param message Range message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: anytype.model.IRange, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Range message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Range
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.model.Range;

            /**
             * Decodes a Range message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Range
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.model.Range;

            /**
             * Verifies a Range message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Range message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Range
             */
            public static fromObject(object: { [k: string]: any }): anytype.model.Range;

            /**
             * Creates a plain object from a Range message. Also converts values to other types if specified.
             * @param message Range
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: anytype.model.Range, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Range to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an Account. */
        interface IAccount {

            /** Account id */
            id?: (string|null);

            /** Account name */
            name?: (string|null);

            /** Account avatar */
            avatar?: (anytype.model.Account.IAvatar|null);
        }

        /** Contains basic information about a user account */
        class Account implements IAccount {

            /**
             * Constructs a new Account.
             * @param [properties] Properties to set
             */
            constructor(properties?: anytype.model.IAccount);

            /** Account id. */
            public id: string;

            /** Account name. */
            public name: string;

            /** Account avatar. */
            public avatar?: (anytype.model.Account.IAvatar|null);

            /**
             * Creates a new Account instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Account instance
             */
            public static create(properties?: anytype.model.IAccount): anytype.model.Account;

            /**
             * Encodes the specified Account message. Does not implicitly {@link anytype.model.Account.verify|verify} messages.
             * @param message Account message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: anytype.model.IAccount, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Account message, length delimited. Does not implicitly {@link anytype.model.Account.verify|verify} messages.
             * @param message Account message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: anytype.model.IAccount, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an Account message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Account
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.model.Account;

            /**
             * Decodes an Account message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Account
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.model.Account;

            /**
             * Verifies an Account message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an Account message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Account
             */
            public static fromObject(object: { [k: string]: any }): anytype.model.Account;

            /**
             * Creates a plain object from an Account message. Also converts values to other types if specified.
             * @param message Account
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: anytype.model.Account, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Account to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Account {

            /** Properties of an Avatar. */
            interface IAvatar {

                /** Avatar image */
                image?: (anytype.model.Block.Content.IFile|null);

                /** Avatar color */
                color?: (string|null);
            }

            /** Avatar of a user's account. It could be an image or color */
            class Avatar implements IAvatar {

                /**
                 * Constructs a new Avatar.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: anytype.model.Account.IAvatar);

                /** Avatar image. */
                public image?: (anytype.model.Block.Content.IFile|null);

                /** Avatar color. */
                public color: string;

                /** Avatar avatar. */
                public avatar?: ("image"|"color");

                /**
                 * Creates a new Avatar instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Avatar instance
                 */
                public static create(properties?: anytype.model.Account.IAvatar): anytype.model.Account.Avatar;

                /**
                 * Encodes the specified Avatar message. Does not implicitly {@link anytype.model.Account.Avatar.verify|verify} messages.
                 * @param message Avatar message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: anytype.model.Account.IAvatar, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Avatar message, length delimited. Does not implicitly {@link anytype.model.Account.Avatar.verify|verify} messages.
                 * @param message Avatar message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: anytype.model.Account.IAvatar, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Avatar message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Avatar
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): anytype.model.Account.Avatar;

                /**
                 * Decodes an Avatar message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Avatar
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): anytype.model.Account.Avatar;

                /**
                 * Verifies an Avatar message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Avatar message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Avatar
                 */
                public static fromObject(object: { [k: string]: any }): anytype.model.Account.Avatar;

                /**
                 * Creates a plain object from an Avatar message. Also converts values to other types if specified.
                 * @param message Avatar
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: anytype.model.Account.Avatar, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Avatar to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }
}

/** Namespace google. */
export namespace google {

    /** Namespace protobuf. */
    namespace protobuf {

        /** Properties of a Struct. */
        interface IStruct {

            /** Struct fields */
            fields?: ({ [k: string]: google.protobuf.IValue }|null);
        }

        /** Represents a Struct. */
        class Struct implements IStruct {

            /**
             * Constructs a new Struct.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IStruct);

            /** Struct fields. */
            public fields: { [k: string]: google.protobuf.IValue };

            /**
             * Creates a new Struct instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Struct instance
             */
            public static create(properties?: google.protobuf.IStruct): google.protobuf.Struct;

            /**
             * Encodes the specified Struct message. Does not implicitly {@link google.protobuf.Struct.verify|verify} messages.
             * @param message Struct message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IStruct, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Struct message, length delimited. Does not implicitly {@link google.protobuf.Struct.verify|verify} messages.
             * @param message Struct message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IStruct, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Struct message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Struct
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.Struct;

            /**
             * Decodes a Struct message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Struct
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.Struct;

            /**
             * Verifies a Struct message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Struct message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Struct
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.Struct;

            /**
             * Creates a plain object from a Struct message. Also converts values to other types if specified.
             * @param message Struct
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.Struct, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Struct to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Value. */
        interface IValue {

            /** Value nullValue */
            nullValue?: (google.protobuf.NullValue|null);

            /** Value numberValue */
            numberValue?: (number|null);

            /** Value stringValue */
            stringValue?: (string|null);

            /** Value boolValue */
            boolValue?: (boolean|null);

            /** Value structValue */
            structValue?: (google.protobuf.IStruct|null);

            /** Value listValue */
            listValue?: (google.protobuf.IListValue|null);
        }

        /** Represents a Value. */
        class Value implements IValue {

            /**
             * Constructs a new Value.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IValue);

            /** Value nullValue. */
            public nullValue: google.protobuf.NullValue;

            /** Value numberValue. */
            public numberValue: number;

            /** Value stringValue. */
            public stringValue: string;

            /** Value boolValue. */
            public boolValue: boolean;

            /** Value structValue. */
            public structValue?: (google.protobuf.IStruct|null);

            /** Value listValue. */
            public listValue?: (google.protobuf.IListValue|null);

            /** Value kind. */
            public kind?: ("nullValue"|"numberValue"|"stringValue"|"boolValue"|"structValue"|"listValue");

            /**
             * Creates a new Value instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Value instance
             */
            public static create(properties?: google.protobuf.IValue): google.protobuf.Value;

            /**
             * Encodes the specified Value message. Does not implicitly {@link google.protobuf.Value.verify|verify} messages.
             * @param message Value message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IValue, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Value message, length delimited. Does not implicitly {@link google.protobuf.Value.verify|verify} messages.
             * @param message Value message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IValue, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Value message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.Value;

            /**
             * Decodes a Value message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.Value;

            /**
             * Verifies a Value message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Value message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Value
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.Value;

            /**
             * Creates a plain object from a Value message. Also converts values to other types if specified.
             * @param message Value
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.Value, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Value to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** NullValue enum. */
        enum NullValue {
            NULL_VALUE = 0
        }

        /** Properties of a ListValue. */
        interface IListValue {

            /** ListValue values */
            values?: (google.protobuf.IValue[]|null);
        }

        /** Represents a ListValue. */
        class ListValue implements IListValue {

            /**
             * Constructs a new ListValue.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IListValue);

            /** ListValue values. */
            public values: google.protobuf.IValue[];

            /**
             * Creates a new ListValue instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ListValue instance
             */
            public static create(properties?: google.protobuf.IListValue): google.protobuf.ListValue;

            /**
             * Encodes the specified ListValue message. Does not implicitly {@link google.protobuf.ListValue.verify|verify} messages.
             * @param message ListValue message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IListValue, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ListValue message, length delimited. Does not implicitly {@link google.protobuf.ListValue.verify|verify} messages.
             * @param message ListValue message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IListValue, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ListValue message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ListValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.ListValue;

            /**
             * Decodes a ListValue message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ListValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.ListValue;

            /**
             * Verifies a ListValue message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ListValue message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ListValue
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.ListValue;

            /**
             * Creates a plain object from a ListValue message. Also converts values to other types if specified.
             * @param message ListValue
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.ListValue, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ListValue to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }
    }
}
