
./src/ts/component/popup/feedback.tsx

54: Describe the bug:		<Label text="Describe the bug:" />
55: Ex. I pressed Enter and this happened [...]		<Textarea ref={(ref: any) => { this.refObject.text1 = ref; }} placeHolder="Ex. I pressed Enter and this happened [...]" />
58: Steps to reproduce the behavior:		<Label text="Steps to reproduce the behavior:" />
59: 1. Go to '...'&#10;2. Click on '....'&#10;3. See error		<Textarea ref={(ref: any) => { this.refObject.text2 = ref; }} placeHolder="1. Go to '...'&#10;2. Click on '....'&#10;3. See error" />
69: Is your feature request related to a problem? Please describe:		<Label text="Is your feature request related to a problem? Please describe:" />
70: Ex. I'm always frustrated when [...]		<Textarea ref={(ref: any) => { this.refObject.text1 = ref; }} placeHolder="Ex. I'm always frustrated when [...]" />
73: Describe the solution you'd like:		<Label text="Describe the solution you'd like:" />
74: A clear and concise description of what you want to happen.		<Textarea ref={(ref: any) => { this.refObject.text2 = ref; }} placeHolder="A clear and concise description of what you want to happen." />
84: Got a question or need help? Please ask:		<Label text="Got a question or need help? Please ask:" />
98: Your feedback was sent		<Title text="Your feedback was sent" />
99: Thank you for making the new web together!<br />If you left email we will get in touch soon.		<Label text="Thank you for making the new web together!<br />If you left email we will get in touch soon." />
100: Back to dashboard		<Button className="orange" text="Back to dashboard" onClick={() => { this.props.close(); }} />
104: Feedback		<Title text="Feedback" />
118: Link to screenshots or video:		<Label text="Link to screenshots or video:" />
119: If applicable, add screenshots to help explain your problem. (Optional)		<Input ref={(ref: any) => { this.refObject.link = ref; }} placeHolder="If applicable, add screenshots to help explain your problem. (Optional)" />
123: Contacts:		<Label text="Contacts:" />
125: Name (Optional)		<Input ref={(ref: any) => { this.refObject.name = ref; }} placeHolder="Name (Optional)" />
126: E-mail (Optional)		<Input ref={(ref: any) => { this.refObject.email = ref; }} placeHolder="E-mail (Optional)" />
131: Submit		<Button className="orange submit" type="input" text="Submit" />

./src/ts/component/popup/prompt.tsx

30: Ok		<Button type="input" text="Ok" className="orange" />
31: Cancel		<Button text="Cancel" className="grey" onClick={this.onCancel} />

./src/ts/component/popup/settings.tsx

72: Settings		<Title text="Settings" />
77: Wallpaper		<Label text="Wallpaper" />
83: Keychain phrase		<Label text="Keychain phrase" />
89: Pin code		<Label text="Pin code" />
98: Import		<Label text="Import" />
134: Wallpaper		<Title text="Wallpaper" />
137: Choose or upload the wallpaper. For best results upload high resolution images.		<Label text="Choose or upload the wallpaper. For best results upload high resolution images." />
144: Pictures		<Label className="name" text="Pictures" />
153: Colours		<Label className="name" text="Colours" />
168: Keychain phrase		<Title text="Keychain phrase" />
169: Your Keychain phrase protects your account. You’ll need it to sign in if you don’t have access to your devices. Keep it in a safe place.		<Label text="Your Keychain phrase protects your account. You’ll need it to sign in if you don’t have access to your devices. Keep it in a safe place." />
171: witch collapse practice feed shame open despair creek road again ice least lake tree young address brain envelope		<Textarea ref={(ref: any) => this.phraseRef = ref} value={authStore.phrase} onFocus={this.onFocusPhrase} placeHolder="witch collapse practice feed shame open despair creek road again ice least lake tree young address brain envelope" readOnly={true} />
175: I've written it down		<Button text="I've written it down" className="orange" onClick={() => {	this.onConfirmPhrase();	}} />
186: Pin code		<Title text="Pin code" />
187: The pin code will protect your keychain phrase. As we do not store your keychain phrase or pin code and do not ask your e-mail or phone number,  id recovery without your pin code or keychain phrase. So, please, remember your pin code		<Label text="The pin code will protect your keychain phrase. As we do not store your keychain phrase or pin code and do not ask your e-mail or phone number,  id recovery without your pin code or keychain phrase. So, please, remember your pin code" />
191: Turn pin code off		<Button text="Turn pin code off" className="blank" onClick={() => {
195: Change pin code		<Button text="Change pin code" className="blank" onClick={() => {
202: Turn pin code on		<Button text="Turn pin code on" className="blank" onClick={() => {
216: Pin code		<Title text="Pin code" />
217: The pin code will protect your secret phrase. As we do not store your secret phrase or pin code and do not ask your e-mail or phone number, there is no id recovery without your pin code or secret phrase. So, please, remember your pin code.		<Label text="The pin code will protect your secret phrase. As we do not store your secret phrase or pin code and do not ask your e-mail or phone number, there is no id recovery without your pin code or secret phrase. So, please, remember your pin code." />
227: Pin code		<Title text="Pin code" />
228: To continue, first verify that it’s you. Enter current pin code		<Label text="To continue, first verify that it’s you. Enter current pin code" />
268: Import		<Title text="Import" />
269: Choose application or format, which data you want to import		<Label text="Choose application or format, which data you want to import" />
284: How to import from Notion		<Title text="How to import from Notion" />
285: First you need to export data.		<Label text="First you need to export data." />
298: After that you need to select Zip archive and Anytype will do the rest.		<Label className="last" text="After that you need to select Zip archive and Anytype will do the rest." />
300: Import data		<Button text="Import data" className="orange" onClick={() => { this.onImport('notion'); }} />

./src/ts/component/menu/search.tsx

34: Search...		<Input ref={(ref: any) => { this.ref = ref; }} value={value} placeHolder="Search..." onKeyDown={this.onKeyDown} onKeyUp={this.onKeyUp} />

./src/ts/component/menu/smile.tsx

105: Type to filter...		<Input ref={(ref: any) => { this.ref = ref; }} placeHolder="Type to filter..." value={filter} onKeyUp={(e: any) => { this.onKeyUp(e, false); }} />

./src/ts/component/menu/dataview/account.tsx

49: Find a person...		<Input ref={(ref: any) => { this.filterRef = ref; }} onKeyUp={this.onKeyUp} placeHolder="Find a person..." />

./src/ts/component/menu/dataview/filter.tsx

80: dd.mm.yyyy		placeHolder="dd.mm.yyyy"
95: Value		placeHolder="Value"

./src/ts/component/menu/dataview/relation/edit.tsx

72: Relation name		<Input value={relation ? relation.name : ''} placeHolder="Relation name"  />

./src/ts/component/menu/dataview/view/edit.tsx

39: View name		placeHolder="View name"

./src/ts/component/menu/dataview/tag/edit.tsx

23: Option name		<Input value={value} placeHolder="Option name"  />

./src/ts/component/menu/dataview/tag/list.tsx

63: Create or select an option		<Input ref={(ref: any) => { this.ref = ref; }} onKeyUp={this.onKeyUp} placeHolder="Create or select an option" />

./src/ts/component/menu/block/action.tsx

70: Type to filter...		<Input ref={(ref: any) => { this.ref = ref; }} placeHolder="Type to filter..." onFocus={this.onFilterFocus} onBlur={this.onFilterBlur} onChange={this.onFilterChange} />

./src/ts/component/menu/block/link.tsx

24: Enter link URL		<Input ref={(ref: any) => { this.ref = ref; }} value={value} placeHolder="Enter link URL" />

./src/ts/component/block/file.tsx

64: Error		<Error text="Error" />

./src/ts/component/block/image.tsx

70: Error		<Error text="Error" />

./src/ts/component/block/video.tsx

73: Error		<Error text="Error" />

./src/ts/component/block/dataview/cell/text.tsx

54: dd.mm.yyyy		<Input ref={(ref: any) => { this.ref = ref; }} id="input" {...item} mask="99.99.9999" maskOptions={{ alias: 'datetime', inputFormat: 'dd.mm.yyyy' }} placeHolder="dd.mm.yyyy" onKeyUp={this.onKeyUpDate} />
