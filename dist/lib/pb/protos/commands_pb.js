// source: pb/protos/commands.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb = require('../../vendor/github.com/anytypeio/go-anytype-library/pb/model/protos/models_pb.js');
goog.object.extend(proto, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb);
var vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_localstore_pb = require('../../vendor/github.com/anytypeio/go-anytype-library/pb/model/protos/localstore_pb.js');
goog.object.extend(proto, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_localstore_pb);
var pb_protos_events_pb = require('../../pb/protos/events_pb.js');
goog.object.extend(proto, pb_protos_events_pb);
var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
goog.exportSymbol('proto.anytype.Empty', null, global);
goog.exportSymbol('proto.anytype.Rpc', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account.Create', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account.Create.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account.Create.Request.AvatarCase', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account.Create.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account.Create.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account.Create.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account.Recover', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account.Recover.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account.Recover.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account.Recover.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account.Recover.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account.Select', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account.Select.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account.Select.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account.Select.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account.Select.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account.Stop', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account.Stop.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account.Stop.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account.Stop.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Account.Stop.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Bookmark', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Bookmark.CreateAndFetch', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Bookmark.Fetch', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Bookmark.Fetch.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Bookmark.Fetch.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Close', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Close.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Close.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Close.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Close.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Copy', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Copy.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Copy.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Copy.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Copy.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Create', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Create.Dataview', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Create.Dataview.View', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Create.Dataview.View.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Create.Dataview.View.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Create.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Create.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Create.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Create.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.CreatePage', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.CreatePage.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.CreatePage.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.CreatePage.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.CreatePage.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Cut', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Cut.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Cut.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Cut.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Cut.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Delete', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Delete.Dataview', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Delete.Dataview.View', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Delete.Dataview.View.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Delete.Dataview.View.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Download', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Download.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Download.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Download.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Download.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Export', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Export.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Export.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Export.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Export.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.File', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.File.CreateAndUpload', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.File.CreateAndUpload.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.File.CreateAndUpload.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Get', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Get.Marks', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Get.Marks.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Get.Marks.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Get.Marks.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Get.Marks.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.GetPublicWebURL', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.GetPublicWebURL.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.GetPublicWebURL.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.ImportMarkdown', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.ImportMarkdown.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.ImportMarkdown.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.ImportMarkdown.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Merge', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Merge.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Merge.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Merge.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Merge.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Open', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Open.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Open.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Open.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Open.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.OpenBreadcrumbs', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.OpenBreadcrumbs.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.OpenBreadcrumbs.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Paste', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Paste.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Paste.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Paste.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Paste.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Redo', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Redo.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Redo.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Redo.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Redo.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Replace', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Replace.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Replace.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Replace.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Replace.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Dataview', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Dataview.ActiveView', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Dataview.View', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Dataview.View.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Dataview.View.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Details', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Details.Detail', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Details.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Details.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Details.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Details.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Fields', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Fields.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Fields.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Fields.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Fields.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.File', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.File.Name', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.File.Name.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.File.Name.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.File.Name.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.File.Name.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Image', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Image.Name', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Image.Name.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Image.Name.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Image.Name.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Image.Width', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Image.Width.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Image.Width.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Image.Width.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Link', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Link.TargetBlockId', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Page', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Page.IsArchived', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Page.IsArchived.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Page.IsArchived.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Restrictions', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Restrictions.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Restrictions.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Restrictions.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Text', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Text.Checked', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Text.Checked.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Text.Checked.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Text.Color', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Text.Color.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Text.Color.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Text.Color.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Text.Style', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Text.Style.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Text.Style.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Text.Style.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Text.Text', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Text.Text.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Text.Text.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Text.Text.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Video', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Video.Name', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Video.Name.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Video.Name.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Video.Name.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Video.Width', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Video.Width.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Video.Width.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Video.Width.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.SetBreadcrumbs', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.SetBreadcrumbs.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.SetBreadcrumbs.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Split', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Split.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Split.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Split.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Split.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Undo', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Undo.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Undo.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Undo.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Undo.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Unlink', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Unlink.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Unlink.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Unlink.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Unlink.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Upload', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Upload.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Upload.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Upload.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Block.Upload.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.ConvertChildrenToPages', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Delete', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Delete.Page', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Delete.Page.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Delete.Page.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Delete.Page.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Duplicate', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Duplicate.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Duplicate.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Duplicate.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Duplicate.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Move', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Move.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Move.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Move.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Move.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.MoveToNewPage', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.MoveToNewPage.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.MoveToNewPage.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Align', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Align.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Align.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Align.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Align.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.BackgroundColor', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Div', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Div.Style', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Div.Style.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Div.Style.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Fields', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Fields.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Fields.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Fields.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Page', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Page.IsArchived', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Text', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Text.Color', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Text.Color.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Text.Color.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Text.Mark', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Text.Mark.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Text.Mark.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Text.Style', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Text.Style.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Text.Style.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Config', null, global);
goog.exportSymbol('proto.anytype.Rpc.Config.Get', null, global);
goog.exportSymbol('proto.anytype.Rpc.Config.Get.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Config.Get.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Config.Get.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Config.Get.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.ExternalDrop', null, global);
goog.exportSymbol('proto.anytype.Rpc.ExternalDrop.Content', null, global);
goog.exportSymbol('proto.anytype.Rpc.ExternalDrop.Content.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.ExternalDrop.Content.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.ExternalDrop.Content.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.ExternalDrop.Content.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.ExternalDrop.Files', null, global);
goog.exportSymbol('proto.anytype.Rpc.ExternalDrop.Files.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.ExternalDrop.Files.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.ExternalDrop.Files.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.ExternalDrop.Files.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ipfs', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ipfs.File', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ipfs.File.Get', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ipfs.File.Get.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ipfs.File.Get.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ipfs.File.Get.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ipfs.File.Get.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ipfs.Image', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ipfs.Image.Get', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ipfs.Image.Get.Blob', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ipfs.Image.Get.File', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ipfs.Image.Get.File.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ipfs.Image.Get.File.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.LinkPreview', null, global);
goog.exportSymbol('proto.anytype.Rpc.LinkPreview.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.LinkPreview.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.LinkPreview.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.LinkPreview.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Log', null, global);
goog.exportSymbol('proto.anytype.Rpc.Log.Send', null, global);
goog.exportSymbol('proto.anytype.Rpc.Log.Send.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Log.Send.Request.Level', null, global);
goog.exportSymbol('proto.anytype.Rpc.Log.Send.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Log.Send.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Log.Send.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Navigation', null, global);
goog.exportSymbol('proto.anytype.Rpc.Navigation.GetPageInfoWithLinks', null, global);
goog.exportSymbol('proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Navigation.ListPages', null, global);
goog.exportSymbol('proto.anytype.Rpc.Navigation.ListPages.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Navigation.ListPages.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Navigation.ListPages.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Navigation.ListPages.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ping', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ping.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ping.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ping.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Ping.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Process', null, global);
goog.exportSymbol('proto.anytype.Rpc.Process.Cancel', null, global);
goog.exportSymbol('proto.anytype.Rpc.Process.Cancel.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Process.Cancel.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Process.Cancel.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Process.Cancel.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Shutdown', null, global);
goog.exportSymbol('proto.anytype.Rpc.Shutdown.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Shutdown.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Shutdown.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Shutdown.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.UploadFile', null, global);
goog.exportSymbol('proto.anytype.Rpc.UploadFile.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.UploadFile.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.UploadFile.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.UploadFile.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Version', null, global);
goog.exportSymbol('proto.anytype.Rpc.Version.Get', null, global);
goog.exportSymbol('proto.anytype.Rpc.Version.Get.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Version.Get.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Version.Get.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Version.Get.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Wallet', null, global);
goog.exportSymbol('proto.anytype.Rpc.Wallet.Create', null, global);
goog.exportSymbol('proto.anytype.Rpc.Wallet.Create.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Wallet.Create.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Wallet.Create.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Wallet.Create.Response.Error.Code', null, global);
goog.exportSymbol('proto.anytype.Rpc.Wallet.Recover', null, global);
goog.exportSymbol('proto.anytype.Rpc.Wallet.Recover.Request', null, global);
goog.exportSymbol('proto.anytype.Rpc.Wallet.Recover.Response', null, global);
goog.exportSymbol('proto.anytype.Rpc.Wallet.Recover.Response.Error', null, global);
goog.exportSymbol('proto.anytype.Rpc.Wallet.Recover.Response.Error.Code', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.displayName = 'proto.anytype.Rpc';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.ExternalDrop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.ExternalDrop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.ExternalDrop.displayName = 'proto.anytype.Rpc.ExternalDrop';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.ExternalDrop.Files = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.ExternalDrop.Files, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.ExternalDrop.Files.displayName = 'proto.anytype.Rpc.ExternalDrop.Files';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.ExternalDrop.Files.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.ExternalDrop.Files.Request.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.ExternalDrop.Files.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.ExternalDrop.Files.Request.displayName = 'proto.anytype.Rpc.ExternalDrop.Files.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.ExternalDrop.Files.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.ExternalDrop.Files.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.ExternalDrop.Files.Response.displayName = 'proto.anytype.Rpc.ExternalDrop.Files.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.ExternalDrop.Files.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.ExternalDrop.Files.Response.Error.displayName = 'proto.anytype.Rpc.ExternalDrop.Files.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.ExternalDrop.Content = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.ExternalDrop.Content, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.ExternalDrop.Content.displayName = 'proto.anytype.Rpc.ExternalDrop.Content';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.ExternalDrop.Content.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.ExternalDrop.Content.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.ExternalDrop.Content.Request.displayName = 'proto.anytype.Rpc.ExternalDrop.Content.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.ExternalDrop.Content.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.ExternalDrop.Content.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.ExternalDrop.Content.Response.displayName = 'proto.anytype.Rpc.ExternalDrop.Content.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.ExternalDrop.Content.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.ExternalDrop.Content.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.ExternalDrop.Content.Response.Error.displayName = 'proto.anytype.Rpc.ExternalDrop.Content.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.displayName = 'proto.anytype.Rpc.BlockList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.ConvertChildrenToPages, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.ConvertChildrenToPages.displayName = 'proto.anytype.Rpc.BlockList.ConvertChildrenToPages';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request.displayName = 'proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.displayName = 'proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.displayName = 'proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Move = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Move, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Move.displayName = 'proto.anytype.Rpc.BlockList.Move';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Move.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.BlockList.Move.Request.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Move.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Move.Request.displayName = 'proto.anytype.Rpc.BlockList.Move.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Move.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Move.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Move.Response.displayName = 'proto.anytype.Rpc.BlockList.Move.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Move.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Move.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Move.Response.Error.displayName = 'proto.anytype.Rpc.BlockList.Move.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.MoveToNewPage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.MoveToNewPage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.MoveToNewPage.displayName = 'proto.anytype.Rpc.BlockList.MoveToNewPage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.BlockList.MoveToNewPage.Request.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.MoveToNewPage.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.MoveToNewPage.Request.displayName = 'proto.anytype.Rpc.BlockList.MoveToNewPage.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.MoveToNewPage.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.MoveToNewPage.Response.displayName = 'proto.anytype.Rpc.BlockList.MoveToNewPage.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.displayName = 'proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Duplicate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Duplicate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Duplicate.displayName = 'proto.anytype.Rpc.BlockList.Duplicate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Duplicate.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.BlockList.Duplicate.Request.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Duplicate.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Duplicate.Request.displayName = 'proto.anytype.Rpc.BlockList.Duplicate.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Duplicate.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.BlockList.Duplicate.Response.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Duplicate.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Duplicate.Response.displayName = 'proto.anytype.Rpc.BlockList.Duplicate.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Duplicate.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Duplicate.Response.Error.displayName = 'proto.anytype.Rpc.BlockList.Duplicate.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.displayName = 'proto.anytype.Rpc.BlockList.Set';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Page = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Page, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Page.displayName = 'proto.anytype.Rpc.BlockList.Set.Page';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Page.IsArchived, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Page.IsArchived.displayName = 'proto.anytype.Rpc.BlockList.Set.Page.IsArchived';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request.displayName = 'proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.displayName = 'proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.displayName = 'proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Text = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Text, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Text.displayName = 'proto.anytype.Rpc.BlockList.Set.Text';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Text.Style = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Text.Style, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Text.Style.displayName = 'proto.anytype.Rpc.BlockList.Set.Text.Style';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.BlockList.Set.Text.Style.Request.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Text.Style.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Text.Style.Request.displayName = 'proto.anytype.Rpc.BlockList.Set.Text.Style.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Text.Style.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Text.Style.Response.displayName = 'proto.anytype.Rpc.BlockList.Set.Text.Style.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.displayName = 'proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Text.Color = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Text.Color, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Text.Color.displayName = 'proto.anytype.Rpc.BlockList.Set.Text.Color';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.BlockList.Set.Text.Color.Request.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Text.Color.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Text.Color.Request.displayName = 'proto.anytype.Rpc.BlockList.Set.Text.Color.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Text.Color.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Text.Color.Response.displayName = 'proto.anytype.Rpc.BlockList.Set.Text.Color.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.displayName = 'proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Text.Mark, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Text.Mark.displayName = 'proto.anytype.Rpc.BlockList.Set.Text.Mark';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Text.Mark.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.displayName = 'proto.anytype.Rpc.BlockList.Set.Text.Mark.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Text.Mark.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.displayName = 'proto.anytype.Rpc.BlockList.Set.Text.Mark.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.displayName = 'proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.BackgroundColor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.BackgroundColor.displayName = 'proto.anytype.Rpc.BlockList.Set.BackgroundColor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request.displayName = 'proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.displayName = 'proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.displayName = 'proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Align = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Align, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Align.displayName = 'proto.anytype.Rpc.BlockList.Set.Align';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Align.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.BlockList.Set.Align.Request.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Align.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Align.Request.displayName = 'proto.anytype.Rpc.BlockList.Set.Align.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Align.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Align.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Align.Response.displayName = 'proto.anytype.Rpc.BlockList.Set.Align.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Align.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Align.Response.Error.displayName = 'proto.anytype.Rpc.BlockList.Set.Align.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Fields = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Fields, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Fields.displayName = 'proto.anytype.Rpc.BlockList.Set.Fields';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.BlockList.Set.Fields.Request.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Fields.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Fields.Request.displayName = 'proto.anytype.Rpc.BlockList.Set.Fields.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField.displayName = 'proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Fields.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Fields.Response.displayName = 'proto.anytype.Rpc.BlockList.Set.Fields.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Fields.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.displayName = 'proto.anytype.Rpc.BlockList.Set.Fields.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Div = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Div, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Div.displayName = 'proto.anytype.Rpc.BlockList.Set.Div';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Div.Style = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Div.Style, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Div.Style.displayName = 'proto.anytype.Rpc.BlockList.Set.Div.Style';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.BlockList.Set.Div.Style.Request.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Div.Style.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Div.Style.Request.displayName = 'proto.anytype.Rpc.BlockList.Set.Div.Style.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Div.Style.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Div.Style.Response.displayName = 'proto.anytype.Rpc.BlockList.Set.Div.Style.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.displayName = 'proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Delete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Delete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Delete.displayName = 'proto.anytype.Rpc.BlockList.Delete';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Delete.Page = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Delete.Page, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Delete.Page.displayName = 'proto.anytype.Rpc.BlockList.Delete.Page';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Delete.Page.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.BlockList.Delete.Page.Request.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Delete.Page.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Delete.Page.Request.displayName = 'proto.anytype.Rpc.BlockList.Delete.Page.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Delete.Page.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Delete.Page.Response.displayName = 'proto.anytype.Rpc.BlockList.Delete.Page.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.BlockList.Delete.Page.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.displayName = 'proto.anytype.Rpc.BlockList.Delete.Page.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.displayName = 'proto.anytype.Rpc.Block';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Replace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Replace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Replace.displayName = 'proto.anytype.Rpc.Block.Replace';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Replace.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Replace.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Replace.Request.displayName = 'proto.anytype.Rpc.Block.Replace.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Replace.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Replace.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Replace.Response.displayName = 'proto.anytype.Rpc.Block.Replace.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Replace.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Replace.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Replace.Response.Error.displayName = 'proto.anytype.Rpc.Block.Replace.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Split = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Split, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Split.displayName = 'proto.anytype.Rpc.Block.Split';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Split.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Split.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Split.Request.displayName = 'proto.anytype.Rpc.Block.Split.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Split.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Split.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Split.Response.displayName = 'proto.anytype.Rpc.Block.Split.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Split.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Split.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Split.Response.Error.displayName = 'proto.anytype.Rpc.Block.Split.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Merge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Merge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Merge.displayName = 'proto.anytype.Rpc.Block.Merge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Merge.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Merge.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Merge.Request.displayName = 'proto.anytype.Rpc.Block.Merge.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Merge.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Merge.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Merge.Response.displayName = 'proto.anytype.Rpc.Block.Merge.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Merge.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Merge.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Merge.Response.Error.displayName = 'proto.anytype.Rpc.Block.Merge.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Copy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Copy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Copy.displayName = 'proto.anytype.Rpc.Block.Copy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Copy.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.Block.Copy.Request.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.Block.Copy.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Copy.Request.displayName = 'proto.anytype.Rpc.Block.Copy.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Copy.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.Block.Copy.Response.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.Block.Copy.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Copy.Response.displayName = 'proto.anytype.Rpc.Block.Copy.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Copy.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Copy.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Copy.Response.Error.displayName = 'proto.anytype.Rpc.Block.Copy.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Paste = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Paste, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Paste.displayName = 'proto.anytype.Rpc.Block.Paste';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Paste.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.Block.Paste.Request.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.Block.Paste.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Paste.Request.displayName = 'proto.anytype.Rpc.Block.Paste.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Paste.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.Block.Paste.Response.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.Block.Paste.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Paste.Response.displayName = 'proto.anytype.Rpc.Block.Paste.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Paste.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Paste.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Paste.Response.Error.displayName = 'proto.anytype.Rpc.Block.Paste.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Cut = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Cut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Cut.displayName = 'proto.anytype.Rpc.Block.Cut';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Cut.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.Block.Cut.Request.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.Block.Cut.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Cut.Request.displayName = 'proto.anytype.Rpc.Block.Cut.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Cut.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.Block.Cut.Response.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.Block.Cut.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Cut.Response.displayName = 'proto.anytype.Rpc.Block.Cut.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Cut.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Cut.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Cut.Response.Error.displayName = 'proto.anytype.Rpc.Block.Cut.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.ImportMarkdown = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.ImportMarkdown, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.ImportMarkdown.displayName = 'proto.anytype.Rpc.Block.ImportMarkdown';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.ImportMarkdown.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.ImportMarkdown.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.ImportMarkdown.Request.displayName = 'proto.anytype.Rpc.Block.ImportMarkdown.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.Block.ImportMarkdown.Response.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.Block.ImportMarkdown.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.ImportMarkdown.Response.displayName = 'proto.anytype.Rpc.Block.ImportMarkdown.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.ImportMarkdown.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.displayName = 'proto.anytype.Rpc.Block.ImportMarkdown.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Export = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Export, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Export.displayName = 'proto.anytype.Rpc.Block.Export';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Export.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.Block.Export.Request.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.Block.Export.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Export.Request.displayName = 'proto.anytype.Rpc.Block.Export.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Export.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Export.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Export.Response.displayName = 'proto.anytype.Rpc.Block.Export.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Export.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Export.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Export.Response.Error.displayName = 'proto.anytype.Rpc.Block.Export.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Upload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Upload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Upload.displayName = 'proto.anytype.Rpc.Block.Upload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Upload.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Upload.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Upload.Request.displayName = 'proto.anytype.Rpc.Block.Upload.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Upload.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Upload.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Upload.Response.displayName = 'proto.anytype.Rpc.Block.Upload.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Upload.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Upload.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Upload.Response.Error.displayName = 'proto.anytype.Rpc.Block.Upload.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Download = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Download, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Download.displayName = 'proto.anytype.Rpc.Block.Download';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Download.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Download.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Download.Request.displayName = 'proto.anytype.Rpc.Block.Download.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Download.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Download.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Download.Response.displayName = 'proto.anytype.Rpc.Block.Download.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Download.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Download.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Download.Response.Error.displayName = 'proto.anytype.Rpc.Block.Download.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.displayName = 'proto.anytype.Rpc.Block.Set';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Fields = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Fields, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Fields.displayName = 'proto.anytype.Rpc.Block.Set.Fields';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Fields.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Fields.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Fields.Request.displayName = 'proto.anytype.Rpc.Block.Set.Fields.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Fields.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Fields.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Fields.Response.displayName = 'proto.anytype.Rpc.Block.Set.Fields.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Fields.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Fields.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Fields.Response.Error.displayName = 'proto.anytype.Rpc.Block.Set.Fields.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Details = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Details, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Details.displayName = 'proto.anytype.Rpc.Block.Set.Details';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Details.Detail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Details.Detail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Details.Detail.displayName = 'proto.anytype.Rpc.Block.Set.Details.Detail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Details.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.Block.Set.Details.Request.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Details.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Details.Request.displayName = 'proto.anytype.Rpc.Block.Set.Details.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Details.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Details.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Details.Response.displayName = 'proto.anytype.Rpc.Block.Set.Details.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Details.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Details.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Details.Response.Error.displayName = 'proto.anytype.Rpc.Block.Set.Details.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Restrictions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Restrictions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Restrictions.displayName = 'proto.anytype.Rpc.Block.Set.Restrictions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Restrictions.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Restrictions.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Restrictions.Request.displayName = 'proto.anytype.Rpc.Block.Set.Restrictions.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Restrictions.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Restrictions.Response.displayName = 'proto.anytype.Rpc.Block.Set.Restrictions.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Restrictions.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.displayName = 'proto.anytype.Rpc.Block.Set.Restrictions.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Page = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Page, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Page.displayName = 'proto.anytype.Rpc.Block.Set.Page';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Page.IsArchived, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Page.IsArchived.displayName = 'proto.anytype.Rpc.Block.Set.Page.IsArchived';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Page.IsArchived.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Page.IsArchived.Request.displayName = 'proto.anytype.Rpc.Block.Set.Page.IsArchived.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Page.IsArchived.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.displayName = 'proto.anytype.Rpc.Block.Set.Page.IsArchived.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.displayName = 'proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Text = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Text, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Text.displayName = 'proto.anytype.Rpc.Block.Set.Text';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Text.Text = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Text.Text, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Text.Text.displayName = 'proto.anytype.Rpc.Block.Set.Text.Text';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Text.Text.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Text.Text.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Text.Text.Request.displayName = 'proto.anytype.Rpc.Block.Set.Text.Text.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Text.Text.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Text.Text.Response.displayName = 'proto.anytype.Rpc.Block.Set.Text.Text.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Text.Text.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.displayName = 'proto.anytype.Rpc.Block.Set.Text.Text.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Text.Color = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Text.Color, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Text.Color.displayName = 'proto.anytype.Rpc.Block.Set.Text.Color';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Text.Color.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Text.Color.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Text.Color.Request.displayName = 'proto.anytype.Rpc.Block.Set.Text.Color.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Text.Color.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Text.Color.Response.displayName = 'proto.anytype.Rpc.Block.Set.Text.Color.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Text.Color.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.displayName = 'proto.anytype.Rpc.Block.Set.Text.Color.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Text.Style = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Text.Style, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Text.Style.displayName = 'proto.anytype.Rpc.Block.Set.Text.Style';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Text.Style.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Text.Style.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Text.Style.Request.displayName = 'proto.anytype.Rpc.Block.Set.Text.Style.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Text.Style.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Text.Style.Response.displayName = 'proto.anytype.Rpc.Block.Set.Text.Style.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Text.Style.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.displayName = 'proto.anytype.Rpc.Block.Set.Text.Style.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Text.Checked = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Text.Checked, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Text.Checked.displayName = 'proto.anytype.Rpc.Block.Set.Text.Checked';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Text.Checked.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Text.Checked.Request.displayName = 'proto.anytype.Rpc.Block.Set.Text.Checked.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Text.Checked.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Text.Checked.Response.displayName = 'proto.anytype.Rpc.Block.Set.Text.Checked.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.displayName = 'proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.File = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.File, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.File.displayName = 'proto.anytype.Rpc.Block.Set.File';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.File.Name = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.File.Name, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.File.Name.displayName = 'proto.anytype.Rpc.Block.Set.File.Name';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.File.Name.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.File.Name.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.File.Name.Request.displayName = 'proto.anytype.Rpc.Block.Set.File.Name.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.File.Name.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.File.Name.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.File.Name.Response.displayName = 'proto.anytype.Rpc.Block.Set.File.Name.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.File.Name.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.File.Name.Response.Error.displayName = 'proto.anytype.Rpc.Block.Set.File.Name.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Image.displayName = 'proto.anytype.Rpc.Block.Set.Image';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Image.Name = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Image.Name, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Image.Name.displayName = 'proto.anytype.Rpc.Block.Set.Image.Name';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Image.Name.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Image.Name.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Image.Name.Request.displayName = 'proto.anytype.Rpc.Block.Set.Image.Name.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Image.Name.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Image.Name.Response.displayName = 'proto.anytype.Rpc.Block.Set.Image.Name.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Image.Name.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.displayName = 'proto.anytype.Rpc.Block.Set.Image.Name.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Image.Width = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Image.Width, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Image.Width.displayName = 'proto.anytype.Rpc.Block.Set.Image.Width';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Image.Width.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Image.Width.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Image.Width.Request.displayName = 'proto.anytype.Rpc.Block.Set.Image.Width.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Image.Width.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Image.Width.Response.displayName = 'proto.anytype.Rpc.Block.Set.Image.Width.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Image.Width.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.displayName = 'proto.anytype.Rpc.Block.Set.Image.Width.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Video = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Video, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Video.displayName = 'proto.anytype.Rpc.Block.Set.Video';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Video.Name = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Video.Name, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Video.Name.displayName = 'proto.anytype.Rpc.Block.Set.Video.Name';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Video.Name.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Video.Name.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Video.Name.Request.displayName = 'proto.anytype.Rpc.Block.Set.Video.Name.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Video.Name.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Video.Name.Response.displayName = 'proto.anytype.Rpc.Block.Set.Video.Name.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Video.Name.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.displayName = 'proto.anytype.Rpc.Block.Set.Video.Name.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Video.Width = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Video.Width, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Video.Width.displayName = 'proto.anytype.Rpc.Block.Set.Video.Width';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Video.Width.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Video.Width.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Video.Width.Request.displayName = 'proto.anytype.Rpc.Block.Set.Video.Width.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Video.Width.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Video.Width.Response.displayName = 'proto.anytype.Rpc.Block.Set.Video.Width.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Video.Width.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.displayName = 'proto.anytype.Rpc.Block.Set.Video.Width.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Link = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Link, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Link.displayName = 'proto.anytype.Rpc.Block.Set.Link';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Link.TargetBlockId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Link.TargetBlockId.displayName = 'proto.anytype.Rpc.Block.Set.Link.TargetBlockId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request.displayName = 'proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.displayName = 'proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.displayName = 'proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Dataview = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Dataview, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Dataview.displayName = 'proto.anytype.Rpc.Block.Set.Dataview';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Dataview.View = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Dataview.View, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Dataview.View.displayName = 'proto.anytype.Rpc.Block.Set.Dataview.View';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Dataview.View.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Dataview.View.Request.displayName = 'proto.anytype.Rpc.Block.Set.Dataview.View.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Dataview.View.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Dataview.View.Response.displayName = 'proto.anytype.Rpc.Block.Set.Dataview.View.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.displayName = 'proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Dataview.ActiveView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Dataview.ActiveView.displayName = 'proto.anytype.Rpc.Block.Set.Dataview.ActiveView';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request.displayName = 'proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.displayName = 'proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.displayName = 'proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Bookmark = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Bookmark, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Bookmark.displayName = 'proto.anytype.Rpc.Block.Bookmark';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Bookmark.Fetch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Bookmark.Fetch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Bookmark.Fetch.displayName = 'proto.anytype.Rpc.Block.Bookmark.Fetch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Bookmark.Fetch.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Bookmark.Fetch.Request.displayName = 'proto.anytype.Rpc.Block.Bookmark.Fetch.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Bookmark.Fetch.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Bookmark.Fetch.Response.displayName = 'proto.anytype.Rpc.Block.Bookmark.Fetch.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.displayName = 'proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Bookmark.CreateAndFetch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.displayName = 'proto.anytype.Rpc.Block.Bookmark.CreateAndFetch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request.displayName = 'proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.displayName = 'proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.displayName = 'proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.File = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.File, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.File.displayName = 'proto.anytype.Rpc.Block.File';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.File.CreateAndUpload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.File.CreateAndUpload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.File.CreateAndUpload.displayName = 'proto.anytype.Rpc.Block.File.CreateAndUpload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.File.CreateAndUpload.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.File.CreateAndUpload.Request.displayName = 'proto.anytype.Rpc.Block.File.CreateAndUpload.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.File.CreateAndUpload.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.File.CreateAndUpload.Response.displayName = 'proto.anytype.Rpc.Block.File.CreateAndUpload.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.displayName = 'proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Get = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Get, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Get.displayName = 'proto.anytype.Rpc.Block.Get';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Get.Marks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Get.Marks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Get.Marks.displayName = 'proto.anytype.Rpc.Block.Get.Marks';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Get.Marks.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Get.Marks.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Get.Marks.Request.displayName = 'proto.anytype.Rpc.Block.Get.Marks.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Get.Marks.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Get.Marks.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Get.Marks.Response.displayName = 'proto.anytype.Rpc.Block.Get.Marks.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Get.Marks.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Get.Marks.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Get.Marks.Response.Error.displayName = 'proto.anytype.Rpc.Block.Get.Marks.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Undo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Undo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Undo.displayName = 'proto.anytype.Rpc.Block.Undo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Undo.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Undo.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Undo.Request.displayName = 'proto.anytype.Rpc.Block.Undo.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Undo.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Undo.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Undo.Response.displayName = 'proto.anytype.Rpc.Block.Undo.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Undo.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Undo.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Undo.Response.Error.displayName = 'proto.anytype.Rpc.Block.Undo.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Redo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Redo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Redo.displayName = 'proto.anytype.Rpc.Block.Redo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Redo.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Redo.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Redo.Request.displayName = 'proto.anytype.Rpc.Block.Redo.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Redo.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Redo.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Redo.Response.displayName = 'proto.anytype.Rpc.Block.Redo.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Redo.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Redo.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Redo.Response.Error.displayName = 'proto.anytype.Rpc.Block.Redo.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Open = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Open, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Open.displayName = 'proto.anytype.Rpc.Block.Open';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Open.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Open.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Open.Request.displayName = 'proto.anytype.Rpc.Block.Open.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Open.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Open.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Open.Response.displayName = 'proto.anytype.Rpc.Block.Open.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Open.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Open.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Open.Response.Error.displayName = 'proto.anytype.Rpc.Block.Open.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.GetPublicWebURL = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.GetPublicWebURL, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.GetPublicWebURL.displayName = 'proto.anytype.Rpc.Block.GetPublicWebURL';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.GetPublicWebURL.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.GetPublicWebURL.Request.displayName = 'proto.anytype.Rpc.Block.GetPublicWebURL.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.GetPublicWebURL.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.GetPublicWebURL.Response.displayName = 'proto.anytype.Rpc.Block.GetPublicWebURL.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.displayName = 'proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.OpenBreadcrumbs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.OpenBreadcrumbs.displayName = 'proto.anytype.Rpc.Block.OpenBreadcrumbs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.OpenBreadcrumbs.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.OpenBreadcrumbs.Request.displayName = 'proto.anytype.Rpc.Block.OpenBreadcrumbs.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.OpenBreadcrumbs.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.displayName = 'proto.anytype.Rpc.Block.OpenBreadcrumbs.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.displayName = 'proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.SetBreadcrumbs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.SetBreadcrumbs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.SetBreadcrumbs.displayName = 'proto.anytype.Rpc.Block.SetBreadcrumbs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.Block.SetBreadcrumbs.Request.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.Block.SetBreadcrumbs.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.SetBreadcrumbs.Request.displayName = 'proto.anytype.Rpc.Block.SetBreadcrumbs.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.SetBreadcrumbs.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.SetBreadcrumbs.Response.displayName = 'proto.anytype.Rpc.Block.SetBreadcrumbs.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.displayName = 'proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Create = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Create, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Create.displayName = 'proto.anytype.Rpc.Block.Create';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Create.Dataview = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Create.Dataview, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Create.Dataview.displayName = 'proto.anytype.Rpc.Block.Create.Dataview';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Create.Dataview.View = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Create.Dataview.View, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Create.Dataview.View.displayName = 'proto.anytype.Rpc.Block.Create.Dataview.View';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Create.Dataview.View.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Create.Dataview.View.Request.displayName = 'proto.anytype.Rpc.Block.Create.Dataview.View.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Create.Dataview.View.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Create.Dataview.View.Response.displayName = 'proto.anytype.Rpc.Block.Create.Dataview.View.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.displayName = 'proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Create.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Create.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Create.Request.displayName = 'proto.anytype.Rpc.Block.Create.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Create.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Create.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Create.Response.displayName = 'proto.anytype.Rpc.Block.Create.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Create.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Create.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Create.Response.Error.displayName = 'proto.anytype.Rpc.Block.Create.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.CreatePage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.CreatePage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.CreatePage.displayName = 'proto.anytype.Rpc.Block.CreatePage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.CreatePage.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.CreatePage.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.CreatePage.Request.displayName = 'proto.anytype.Rpc.Block.CreatePage.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.CreatePage.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.CreatePage.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.CreatePage.Response.displayName = 'proto.anytype.Rpc.Block.CreatePage.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.CreatePage.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.CreatePage.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.CreatePage.Response.Error.displayName = 'proto.anytype.Rpc.Block.CreatePage.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Unlink = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Unlink, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Unlink.displayName = 'proto.anytype.Rpc.Block.Unlink';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Unlink.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.Block.Unlink.Request.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.Block.Unlink.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Unlink.Request.displayName = 'proto.anytype.Rpc.Block.Unlink.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Unlink.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Unlink.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Unlink.Response.displayName = 'proto.anytype.Rpc.Block.Unlink.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Unlink.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Unlink.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Unlink.Response.Error.displayName = 'proto.anytype.Rpc.Block.Unlink.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Delete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Delete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Delete.displayName = 'proto.anytype.Rpc.Block.Delete';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Delete.Dataview = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Delete.Dataview, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Delete.Dataview.displayName = 'proto.anytype.Rpc.Block.Delete.Dataview';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Delete.Dataview.View = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Delete.Dataview.View, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Delete.Dataview.View.displayName = 'proto.anytype.Rpc.Block.Delete.Dataview.View';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Delete.Dataview.View.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Delete.Dataview.View.Request.displayName = 'proto.anytype.Rpc.Block.Delete.Dataview.View.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Delete.Dataview.View.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Delete.Dataview.View.Response.displayName = 'proto.anytype.Rpc.Block.Delete.Dataview.View.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.displayName = 'proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Close = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Close, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Close.displayName = 'proto.anytype.Rpc.Block.Close';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Close.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Close.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Close.Request.displayName = 'proto.anytype.Rpc.Block.Close.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Close.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Close.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Close.Response.displayName = 'proto.anytype.Rpc.Block.Close.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Block.Close.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Block.Close.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Block.Close.Response.Error.displayName = 'proto.anytype.Rpc.Block.Close.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Wallet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Wallet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Wallet.displayName = 'proto.anytype.Rpc.Wallet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Wallet.Create = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Wallet.Create, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Wallet.Create.displayName = 'proto.anytype.Rpc.Wallet.Create';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Wallet.Create.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Wallet.Create.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Wallet.Create.Request.displayName = 'proto.anytype.Rpc.Wallet.Create.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Wallet.Create.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Wallet.Create.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Wallet.Create.Response.displayName = 'proto.anytype.Rpc.Wallet.Create.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Wallet.Create.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Wallet.Create.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Wallet.Create.Response.Error.displayName = 'proto.anytype.Rpc.Wallet.Create.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Wallet.Recover = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Wallet.Recover, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Wallet.Recover.displayName = 'proto.anytype.Rpc.Wallet.Recover';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Wallet.Recover.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Wallet.Recover.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Wallet.Recover.Request.displayName = 'proto.anytype.Rpc.Wallet.Recover.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Wallet.Recover.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Wallet.Recover.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Wallet.Recover.Response.displayName = 'proto.anytype.Rpc.Wallet.Recover.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Wallet.Recover.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Wallet.Recover.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Wallet.Recover.Response.Error.displayName = 'proto.anytype.Rpc.Wallet.Recover.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Account = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Account.displayName = 'proto.anytype.Rpc.Account';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Account.Create = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Account.Create, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Account.Create.displayName = 'proto.anytype.Rpc.Account.Create';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Account.Create.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.anytype.Rpc.Account.Create.Request.oneofGroups_);
};
goog.inherits(proto.anytype.Rpc.Account.Create.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Account.Create.Request.displayName = 'proto.anytype.Rpc.Account.Create.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Account.Create.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Account.Create.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Account.Create.Response.displayName = 'proto.anytype.Rpc.Account.Create.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Account.Create.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Account.Create.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Account.Create.Response.Error.displayName = 'proto.anytype.Rpc.Account.Create.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Account.Recover = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Account.Recover, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Account.Recover.displayName = 'proto.anytype.Rpc.Account.Recover';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Account.Recover.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Account.Recover.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Account.Recover.Request.displayName = 'proto.anytype.Rpc.Account.Recover.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Account.Recover.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Account.Recover.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Account.Recover.Response.displayName = 'proto.anytype.Rpc.Account.Recover.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Account.Recover.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Account.Recover.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Account.Recover.Response.Error.displayName = 'proto.anytype.Rpc.Account.Recover.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Account.Select = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Account.Select, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Account.Select.displayName = 'proto.anytype.Rpc.Account.Select';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Account.Select.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Account.Select.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Account.Select.Request.displayName = 'proto.anytype.Rpc.Account.Select.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Account.Select.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Account.Select.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Account.Select.Response.displayName = 'proto.anytype.Rpc.Account.Select.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Account.Select.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Account.Select.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Account.Select.Response.Error.displayName = 'proto.anytype.Rpc.Account.Select.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Account.Stop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Account.Stop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Account.Stop.displayName = 'proto.anytype.Rpc.Account.Stop';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Account.Stop.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Account.Stop.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Account.Stop.Request.displayName = 'proto.anytype.Rpc.Account.Stop.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Account.Stop.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Account.Stop.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Account.Stop.Response.displayName = 'proto.anytype.Rpc.Account.Stop.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Account.Stop.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Account.Stop.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Account.Stop.Response.Error.displayName = 'proto.anytype.Rpc.Account.Stop.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Log = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Log, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Log.displayName = 'proto.anytype.Rpc.Log';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Log.Send = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Log.Send, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Log.Send.displayName = 'proto.anytype.Rpc.Log.Send';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Log.Send.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Log.Send.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Log.Send.Request.displayName = 'proto.anytype.Rpc.Log.Send.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Log.Send.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Log.Send.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Log.Send.Response.displayName = 'proto.anytype.Rpc.Log.Send.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Log.Send.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Log.Send.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Log.Send.Response.Error.displayName = 'proto.anytype.Rpc.Log.Send.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Version = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Version, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Version.displayName = 'proto.anytype.Rpc.Version';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Version.Get = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Version.Get, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Version.Get.displayName = 'proto.anytype.Rpc.Version.Get';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Version.Get.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Version.Get.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Version.Get.Request.displayName = 'proto.anytype.Rpc.Version.Get.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Version.Get.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Version.Get.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Version.Get.Response.displayName = 'proto.anytype.Rpc.Version.Get.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Version.Get.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Version.Get.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Version.Get.Response.Error.displayName = 'proto.anytype.Rpc.Version.Get.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Ipfs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Ipfs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Ipfs.displayName = 'proto.anytype.Rpc.Ipfs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Ipfs.File = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Ipfs.File, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Ipfs.File.displayName = 'proto.anytype.Rpc.Ipfs.File';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Ipfs.File.Get = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Ipfs.File.Get, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Ipfs.File.Get.displayName = 'proto.anytype.Rpc.Ipfs.File.Get';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Ipfs.File.Get.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Ipfs.File.Get.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Ipfs.File.Get.Request.displayName = 'proto.anytype.Rpc.Ipfs.File.Get.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Ipfs.File.Get.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Ipfs.File.Get.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Ipfs.File.Get.Response.displayName = 'proto.anytype.Rpc.Ipfs.File.Get.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Ipfs.File.Get.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Ipfs.File.Get.Response.Error.displayName = 'proto.anytype.Rpc.Ipfs.File.Get.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Ipfs.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Ipfs.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Ipfs.Image.displayName = 'proto.anytype.Rpc.Ipfs.Image';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Ipfs.Image.Get = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Ipfs.Image.Get, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Ipfs.Image.Get.displayName = 'proto.anytype.Rpc.Ipfs.Image.Get';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Ipfs.Image.Get.Blob, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Ipfs.Image.Get.Blob.displayName = 'proto.anytype.Rpc.Ipfs.Image.Get.Blob';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request.displayName = 'proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.displayName = 'proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.displayName = 'proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Ipfs.Image.Get.File = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Ipfs.Image.Get.File, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Ipfs.Image.Get.File.displayName = 'proto.anytype.Rpc.Ipfs.Image.Get.File';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Ipfs.Image.Get.File.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Ipfs.Image.Get.File.Request.displayName = 'proto.anytype.Rpc.Ipfs.Image.Get.File.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Ipfs.Image.Get.File.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Ipfs.Image.Get.File.Response.displayName = 'proto.anytype.Rpc.Ipfs.Image.Get.File.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.displayName = 'proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Shutdown = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Shutdown, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Shutdown.displayName = 'proto.anytype.Rpc.Shutdown';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Shutdown.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Shutdown.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Shutdown.Request.displayName = 'proto.anytype.Rpc.Shutdown.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Shutdown.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Shutdown.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Shutdown.Response.displayName = 'proto.anytype.Rpc.Shutdown.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Shutdown.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Shutdown.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Shutdown.Response.Error.displayName = 'proto.anytype.Rpc.Shutdown.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Config.displayName = 'proto.anytype.Rpc.Config';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Config.Get = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Config.Get, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Config.Get.displayName = 'proto.anytype.Rpc.Config.Get';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Config.Get.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Config.Get.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Config.Get.Request.displayName = 'proto.anytype.Rpc.Config.Get.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Config.Get.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Config.Get.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Config.Get.Response.displayName = 'proto.anytype.Rpc.Config.Get.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Config.Get.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Config.Get.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Config.Get.Response.Error.displayName = 'proto.anytype.Rpc.Config.Get.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Ping.displayName = 'proto.anytype.Rpc.Ping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Ping.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Ping.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Ping.Request.displayName = 'proto.anytype.Rpc.Ping.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Ping.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Ping.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Ping.Response.displayName = 'proto.anytype.Rpc.Ping.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Ping.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Ping.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Ping.Response.Error.displayName = 'proto.anytype.Rpc.Ping.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Process = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Process, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Process.displayName = 'proto.anytype.Rpc.Process';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Process.Cancel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Process.Cancel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Process.Cancel.displayName = 'proto.anytype.Rpc.Process.Cancel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Process.Cancel.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Process.Cancel.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Process.Cancel.Request.displayName = 'proto.anytype.Rpc.Process.Cancel.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Process.Cancel.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Process.Cancel.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Process.Cancel.Response.displayName = 'proto.anytype.Rpc.Process.Cancel.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Process.Cancel.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Process.Cancel.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Process.Cancel.Response.Error.displayName = 'proto.anytype.Rpc.Process.Cancel.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.LinkPreview = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.LinkPreview, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.LinkPreview.displayName = 'proto.anytype.Rpc.LinkPreview';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.LinkPreview.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.LinkPreview.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.LinkPreview.Request.displayName = 'proto.anytype.Rpc.LinkPreview.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.LinkPreview.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.LinkPreview.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.LinkPreview.Response.displayName = 'proto.anytype.Rpc.LinkPreview.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.LinkPreview.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.LinkPreview.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.LinkPreview.Response.Error.displayName = 'proto.anytype.Rpc.LinkPreview.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.UploadFile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.UploadFile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.UploadFile.displayName = 'proto.anytype.Rpc.UploadFile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.UploadFile.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.UploadFile.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.UploadFile.Request.displayName = 'proto.anytype.Rpc.UploadFile.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.UploadFile.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.UploadFile.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.UploadFile.Response.displayName = 'proto.anytype.Rpc.UploadFile.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.UploadFile.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.UploadFile.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.UploadFile.Response.Error.displayName = 'proto.anytype.Rpc.UploadFile.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Navigation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Navigation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Navigation.displayName = 'proto.anytype.Rpc.Navigation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Navigation.ListPages = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Navigation.ListPages, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Navigation.ListPages.displayName = 'proto.anytype.Rpc.Navigation.ListPages';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Navigation.ListPages.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Navigation.ListPages.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Navigation.ListPages.Request.displayName = 'proto.anytype.Rpc.Navigation.ListPages.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Navigation.ListPages.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anytype.Rpc.Navigation.ListPages.Response.repeatedFields_, null);
};
goog.inherits(proto.anytype.Rpc.Navigation.ListPages.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Navigation.ListPages.Response.displayName = 'proto.anytype.Rpc.Navigation.ListPages.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Navigation.ListPages.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Navigation.ListPages.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Navigation.ListPages.Response.Error.displayName = 'proto.anytype.Rpc.Navigation.ListPages.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Navigation.GetPageInfoWithLinks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.displayName = 'proto.anytype.Rpc.Navigation.GetPageInfoWithLinks';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request.displayName = 'proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.displayName = 'proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.displayName = 'proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anytype.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anytype.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anytype.Empty.displayName = 'proto.anytype.Empty';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc}
 */
proto.anytype.Rpc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc;
  return proto.anytype.Rpc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc}
 */
proto.anytype.Rpc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.ExternalDrop.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.ExternalDrop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.ExternalDrop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.ExternalDrop.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.ExternalDrop}
 */
proto.anytype.Rpc.ExternalDrop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.ExternalDrop;
  return proto.anytype.Rpc.ExternalDrop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.ExternalDrop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.ExternalDrop}
 */
proto.anytype.Rpc.ExternalDrop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.ExternalDrop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.ExternalDrop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.ExternalDrop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.ExternalDrop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.ExternalDrop.Files.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.ExternalDrop.Files.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.ExternalDrop.Files} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.ExternalDrop.Files.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.ExternalDrop.Files}
 */
proto.anytype.Rpc.ExternalDrop.Files.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.ExternalDrop.Files;
  return proto.anytype.Rpc.ExternalDrop.Files.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.ExternalDrop.Files} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.ExternalDrop.Files}
 */
proto.anytype.Rpc.ExternalDrop.Files.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.ExternalDrop.Files.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.ExternalDrop.Files.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.ExternalDrop.Files} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.ExternalDrop.Files.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.ExternalDrop.Files.Request.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.ExternalDrop.Files.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.ExternalDrop.Files.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.ExternalDrop.Files.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.ExternalDrop.Files.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    droptargetid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    position: jspb.Message.getFieldWithDefault(msg, 3, 0),
    localfilepathsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.ExternalDrop.Files.Request}
 */
proto.anytype.Rpc.ExternalDrop.Files.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.ExternalDrop.Files.Request;
  return proto.anytype.Rpc.ExternalDrop.Files.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.ExternalDrop.Files.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.ExternalDrop.Files.Request}
 */
proto.anytype.Rpc.ExternalDrop.Files.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDroptargetid(value);
      break;
    case 3:
      var value = /** @type {!proto.anytype.model.Block.Position} */ (reader.readEnum());
      msg.setPosition(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addLocalfilepaths(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.ExternalDrop.Files.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.ExternalDrop.Files.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.ExternalDrop.Files.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.ExternalDrop.Files.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDroptargetid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getLocalfilepathsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.ExternalDrop.Files.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.ExternalDrop.Files.Request} returns this
 */
proto.anytype.Rpc.ExternalDrop.Files.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dropTargetId = 2;
 * @return {string}
 */
proto.anytype.Rpc.ExternalDrop.Files.Request.prototype.getDroptargetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.ExternalDrop.Files.Request} returns this
 */
proto.anytype.Rpc.ExternalDrop.Files.Request.prototype.setDroptargetid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional model.Block.Position position = 3;
 * @return {!proto.anytype.model.Block.Position}
 */
proto.anytype.Rpc.ExternalDrop.Files.Request.prototype.getPosition = function() {
  return /** @type {!proto.anytype.model.Block.Position} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.anytype.model.Block.Position} value
 * @return {!proto.anytype.Rpc.ExternalDrop.Files.Request} returns this
 */
proto.anytype.Rpc.ExternalDrop.Files.Request.prototype.setPosition = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated string localFilePaths = 4;
 * @return {!Array<string>}
 */
proto.anytype.Rpc.ExternalDrop.Files.Request.prototype.getLocalfilepathsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anytype.Rpc.ExternalDrop.Files.Request} returns this
 */
proto.anytype.Rpc.ExternalDrop.Files.Request.prototype.setLocalfilepathsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.ExternalDrop.Files.Request} returns this
 */
proto.anytype.Rpc.ExternalDrop.Files.Request.prototype.addLocalfilepaths = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.ExternalDrop.Files.Request} returns this
 */
proto.anytype.Rpc.ExternalDrop.Files.Request.prototype.clearLocalfilepathsList = function() {
  return this.setLocalfilepathsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.ExternalDrop.Files.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.ExternalDrop.Files.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.ExternalDrop.Files.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.ExternalDrop.Files.Response}
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.ExternalDrop.Files.Response;
  return proto.anytype.Rpc.ExternalDrop.Files.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.ExternalDrop.Files.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.ExternalDrop.Files.Response}
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.ExternalDrop.Files.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.ExternalDrop.Files.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.ExternalDrop.Files.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.ExternalDrop.Files.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.ExternalDrop.Files.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.ExternalDrop.Files.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.ExternalDrop.Files.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.ExternalDrop.Files.Response.Error}
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.ExternalDrop.Files.Response.Error;
  return proto.anytype.Rpc.ExternalDrop.Files.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.ExternalDrop.Files.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.ExternalDrop.Files.Response.Error}
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.ExternalDrop.Files.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.ExternalDrop.Files.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.ExternalDrop.Files.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.ExternalDrop.Files.Response.Error.Code}
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.ExternalDrop.Files.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.ExternalDrop.Files.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.ExternalDrop.Files.Response.Error} returns this
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.ExternalDrop.Files.Response.Error} returns this
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.ExternalDrop.Files.Response.Error}
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.ExternalDrop.Files.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.ExternalDrop.Files.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.ExternalDrop.Files.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.ExternalDrop.Files.Response} returns this
*/
proto.anytype.Rpc.ExternalDrop.Files.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.ExternalDrop.Files.Response} returns this
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.ExternalDrop.Files.Response} returns this
*/
proto.anytype.Rpc.ExternalDrop.Files.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.ExternalDrop.Files.Response} returns this
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.ExternalDrop.Files.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.ExternalDrop.Content.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.ExternalDrop.Content.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.ExternalDrop.Content} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.ExternalDrop.Content.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.ExternalDrop.Content}
 */
proto.anytype.Rpc.ExternalDrop.Content.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.ExternalDrop.Content;
  return proto.anytype.Rpc.ExternalDrop.Content.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.ExternalDrop.Content} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.ExternalDrop.Content}
 */
proto.anytype.Rpc.ExternalDrop.Content.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.ExternalDrop.Content.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.ExternalDrop.Content.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.ExternalDrop.Content} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.ExternalDrop.Content.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.ExternalDrop.Content.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.ExternalDrop.Content.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.ExternalDrop.Content.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.ExternalDrop.Content.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    focusedblockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.ExternalDrop.Content.Request}
 */
proto.anytype.Rpc.ExternalDrop.Content.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.ExternalDrop.Content.Request;
  return proto.anytype.Rpc.ExternalDrop.Content.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.ExternalDrop.Content.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.ExternalDrop.Content.Request}
 */
proto.anytype.Rpc.ExternalDrop.Content.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFocusedblockid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.ExternalDrop.Content.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.ExternalDrop.Content.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.ExternalDrop.Content.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.ExternalDrop.Content.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFocusedblockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.ExternalDrop.Content.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.ExternalDrop.Content.Request} returns this
 */
proto.anytype.Rpc.ExternalDrop.Content.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string focusedBlockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.ExternalDrop.Content.Request.prototype.getFocusedblockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.ExternalDrop.Content.Request} returns this
 */
proto.anytype.Rpc.ExternalDrop.Content.Request.prototype.setFocusedblockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes content = 3;
 * @return {string}
 */
proto.anytype.Rpc.ExternalDrop.Content.Request.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes content = 3;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.anytype.Rpc.ExternalDrop.Content.Request.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.ExternalDrop.Content.Request.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.anytype.Rpc.ExternalDrop.Content.Request} returns this
 */
proto.anytype.Rpc.ExternalDrop.Content.Request.prototype.setContent = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.ExternalDrop.Content.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.ExternalDrop.Content.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.ExternalDrop.Content.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.ExternalDrop.Content.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.ExternalDrop.Content.Response.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.ExternalDrop.Content.Response}
 */
proto.anytype.Rpc.ExternalDrop.Content.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.ExternalDrop.Content.Response;
  return proto.anytype.Rpc.ExternalDrop.Content.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.ExternalDrop.Content.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.ExternalDrop.Content.Response}
 */
proto.anytype.Rpc.ExternalDrop.Content.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.ExternalDrop.Content.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.ExternalDrop.Content.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.ExternalDrop.Content.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.ExternalDrop.Content.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.ExternalDrop.Content.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.ExternalDrop.Content.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.ExternalDrop.Content.Response.Error.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.ExternalDrop.Content.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.ExternalDrop.Content.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.ExternalDrop.Content.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.ExternalDrop.Content.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.ExternalDrop.Content.Response.Error}
 */
proto.anytype.Rpc.ExternalDrop.Content.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.ExternalDrop.Content.Response.Error;
  return proto.anytype.Rpc.ExternalDrop.Content.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.ExternalDrop.Content.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.ExternalDrop.Content.Response.Error}
 */
proto.anytype.Rpc.ExternalDrop.Content.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.ExternalDrop.Content.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.ExternalDrop.Content.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.ExternalDrop.Content.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.ExternalDrop.Content.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.ExternalDrop.Content.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.ExternalDrop.Content.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.ExternalDrop.Content.Response.Error.Code}
 */
proto.anytype.Rpc.ExternalDrop.Content.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.ExternalDrop.Content.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.ExternalDrop.Content.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.ExternalDrop.Content.Response.Error} returns this
 */
proto.anytype.Rpc.ExternalDrop.Content.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.ExternalDrop.Content.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.ExternalDrop.Content.Response.Error} returns this
 */
proto.anytype.Rpc.ExternalDrop.Content.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.ExternalDrop.Content.Response.Error}
 */
proto.anytype.Rpc.ExternalDrop.Content.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.ExternalDrop.Content.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.ExternalDrop.Content.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.ExternalDrop.Content.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.ExternalDrop.Content.Response} returns this
*/
proto.anytype.Rpc.ExternalDrop.Content.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.ExternalDrop.Content.Response} returns this
 */
proto.anytype.Rpc.ExternalDrop.Content.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.ExternalDrop.Content.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList}
 */
proto.anytype.Rpc.BlockList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList;
  return proto.anytype.Rpc.BlockList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList}
 */
proto.anytype.Rpc.BlockList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.ConvertChildrenToPages.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.ConvertChildrenToPages;
  return proto.anytype.Rpc.BlockList.ConvertChildrenToPages.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.ConvertChildrenToPages.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request;
  return proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBlockids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request} returns this
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string blockIds = 2;
 * @return {!Array<string>}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request.prototype.getBlockidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request} returns this
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request.prototype.setBlockidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request} returns this
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request.prototype.addBlockids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request} returns this
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Request.prototype.clearBlockidsList = function() {
  return this.setBlockidsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.toObject(includeInstance, f),
    linkidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response;
  return proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addLinkids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getLinkidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error;
  return proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.Code}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response} returns this
*/
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response} returns this
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string linkIds = 2;
 * @return {!Array<string>}
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.prototype.getLinkidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response} returns this
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.prototype.setLinkidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response} returns this
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.prototype.addLinkids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response} returns this
 */
proto.anytype.Rpc.BlockList.ConvertChildrenToPages.Response.prototype.clearLinkidsList = function() {
  return this.setLinkidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Move.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Move.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Move} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Move.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Move}
 */
proto.anytype.Rpc.BlockList.Move.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Move;
  return proto.anytype.Rpc.BlockList.Move.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Move} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Move}
 */
proto.anytype.Rpc.BlockList.Move.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Move.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Move.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Move} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Move.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.BlockList.Move.Request.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Move.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Move.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Move.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Move.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    targetcontextid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    droptargetid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    position: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Move.Request}
 */
proto.anytype.Rpc.BlockList.Move.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Move.Request;
  return proto.anytype.Rpc.BlockList.Move.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Move.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Move.Request}
 */
proto.anytype.Rpc.BlockList.Move.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBlockids(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetcontextid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDroptargetid(value);
      break;
    case 5:
      var value = /** @type {!proto.anytype.model.Block.Position} */ (reader.readEnum());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Move.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Move.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Move.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Move.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getTargetcontextid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDroptargetid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Move.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Move.Request} returns this
 */
proto.anytype.Rpc.BlockList.Move.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string blockIds = 2;
 * @return {!Array<string>}
 */
proto.anytype.Rpc.BlockList.Move.Request.prototype.getBlockidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anytype.Rpc.BlockList.Move.Request} returns this
 */
proto.anytype.Rpc.BlockList.Move.Request.prototype.setBlockidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.BlockList.Move.Request} returns this
 */
proto.anytype.Rpc.BlockList.Move.Request.prototype.addBlockids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.BlockList.Move.Request} returns this
 */
proto.anytype.Rpc.BlockList.Move.Request.prototype.clearBlockidsList = function() {
  return this.setBlockidsList([]);
};


/**
 * optional string targetContextId = 3;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Move.Request.prototype.getTargetcontextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Move.Request} returns this
 */
proto.anytype.Rpc.BlockList.Move.Request.prototype.setTargetcontextid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string dropTargetId = 4;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Move.Request.prototype.getDroptargetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Move.Request} returns this
 */
proto.anytype.Rpc.BlockList.Move.Request.prototype.setDroptargetid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional model.Block.Position position = 5;
 * @return {!proto.anytype.model.Block.Position}
 */
proto.anytype.Rpc.BlockList.Move.Request.prototype.getPosition = function() {
  return /** @type {!proto.anytype.model.Block.Position} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.anytype.model.Block.Position} value
 * @return {!proto.anytype.Rpc.BlockList.Move.Request} returns this
 */
proto.anytype.Rpc.BlockList.Move.Request.prototype.setPosition = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Move.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Move.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Move.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Move.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.BlockList.Move.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Move.Response}
 */
proto.anytype.Rpc.BlockList.Move.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Move.Response;
  return proto.anytype.Rpc.BlockList.Move.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Move.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Move.Response}
 */
proto.anytype.Rpc.BlockList.Move.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.BlockList.Move.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.BlockList.Move.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Move.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Move.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Move.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Move.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.BlockList.Move.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Move.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Move.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Move.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Move.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Move.Response.Error}
 */
proto.anytype.Rpc.BlockList.Move.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Move.Response.Error;
  return proto.anytype.Rpc.BlockList.Move.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Move.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Move.Response.Error}
 */
proto.anytype.Rpc.BlockList.Move.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.BlockList.Move.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Move.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Move.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Move.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Move.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.BlockList.Move.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.BlockList.Move.Response.Error.Code}
 */
proto.anytype.Rpc.BlockList.Move.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.BlockList.Move.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.BlockList.Move.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.BlockList.Move.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Move.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Move.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Move.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Move.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.BlockList.Move.Response.Error}
 */
proto.anytype.Rpc.BlockList.Move.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.BlockList.Move.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.BlockList.Move.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.BlockList.Move.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Move.Response} returns this
*/
proto.anytype.Rpc.BlockList.Move.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Move.Response} returns this
 */
proto.anytype.Rpc.BlockList.Move.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Move.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.BlockList.Move.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Move.Response} returns this
*/
proto.anytype.Rpc.BlockList.Move.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Move.Response} returns this
 */
proto.anytype.Rpc.BlockList.Move.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Move.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.MoveToNewPage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.MoveToNewPage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.MoveToNewPage;
  return proto.anytype.Rpc.BlockList.MoveToNewPage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.MoveToNewPage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.MoveToNewPage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.MoveToNewPage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Request.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.MoveToNewPage.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.MoveToNewPage.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    details: (f = msg.getDetails()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f),
    droptargetid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    position: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Request}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.MoveToNewPage.Request;
  return proto.anytype.Rpc.BlockList.MoveToNewPage.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.MoveToNewPage.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Request}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBlockids(value);
      break;
    case 3:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setDetails(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDroptargetid(value);
      break;
    case 5:
      var value = /** @type {!proto.anytype.model.Block.Position} */ (reader.readEnum());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.MoveToNewPage.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.MoveToNewPage.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getDetails();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getDroptargetid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Request} returns this
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string blockIds = 2;
 * @return {!Array<string>}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Request.prototype.getBlockidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Request} returns this
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Request.prototype.setBlockidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Request} returns this
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Request.prototype.addBlockids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Request} returns this
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Request.prototype.clearBlockidsList = function() {
  return this.setBlockidsList([]);
};


/**
 * optional google.protobuf.Struct details = 3;
 * @return {?proto.google.protobuf.Struct}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Request.prototype.getDetails = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 3));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Request} returns this
*/
proto.anytype.Rpc.BlockList.MoveToNewPage.Request.prototype.setDetails = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Request} returns this
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Request.prototype.clearDetails = function() {
  return this.setDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Request.prototype.hasDetails = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string dropTargetId = 4;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Request.prototype.getDroptargetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Request} returns this
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Request.prototype.setDroptargetid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional model.Block.Position position = 5;
 * @return {!proto.anytype.model.Block.Position}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Request.prototype.getPosition = function() {
  return /** @type {!proto.anytype.model.Block.Position} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.anytype.model.Block.Position} value
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Request} returns this
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Request.prototype.setPosition = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.MoveToNewPage.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.MoveToNewPage.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.toObject(includeInstance, f),
    linkid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Response}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.MoveToNewPage.Response;
  return proto.anytype.Rpc.BlockList.MoveToNewPage.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.MoveToNewPage.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Response}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLinkid(value);
      break;
    case 3:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.MoveToNewPage.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.MoveToNewPage.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getLinkid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error;
  return proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.Code}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.BlockList.MoveToNewPage.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Response} returns this
*/
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Response} returns this
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string linkId = 2;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.prototype.getLinkid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Response} returns this
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.prototype.setLinkid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ResponseEvent event = 3;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 3));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Response} returns this
*/
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.MoveToNewPage.Response} returns this
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.MoveToNewPage.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Duplicate.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Duplicate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Duplicate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Duplicate.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Duplicate}
 */
proto.anytype.Rpc.BlockList.Duplicate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Duplicate;
  return proto.anytype.Rpc.BlockList.Duplicate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Duplicate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Duplicate}
 */
proto.anytype.Rpc.BlockList.Duplicate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Duplicate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Duplicate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Duplicate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Duplicate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.BlockList.Duplicate.Request.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Duplicate.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Duplicate.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Duplicate.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Duplicate.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    targetid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    blockidsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    position: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Request}
 */
proto.anytype.Rpc.BlockList.Duplicate.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Duplicate.Request;
  return proto.anytype.Rpc.BlockList.Duplicate.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Duplicate.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Request}
 */
proto.anytype.Rpc.BlockList.Duplicate.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addBlockids(value);
      break;
    case 4:
      var value = /** @type {!proto.anytype.model.Block.Position} */ (reader.readEnum());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Duplicate.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Duplicate.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Duplicate.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Duplicate.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTargetid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBlockidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Duplicate.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Request} returns this
 */
proto.anytype.Rpc.BlockList.Duplicate.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string targetId = 2;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Duplicate.Request.prototype.getTargetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Request} returns this
 */
proto.anytype.Rpc.BlockList.Duplicate.Request.prototype.setTargetid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string blockIds = 3;
 * @return {!Array<string>}
 */
proto.anytype.Rpc.BlockList.Duplicate.Request.prototype.getBlockidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Request} returns this
 */
proto.anytype.Rpc.BlockList.Duplicate.Request.prototype.setBlockidsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Request} returns this
 */
proto.anytype.Rpc.BlockList.Duplicate.Request.prototype.addBlockids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Request} returns this
 */
proto.anytype.Rpc.BlockList.Duplicate.Request.prototype.clearBlockidsList = function() {
  return this.setBlockidsList([]);
};


/**
 * optional model.Block.Position position = 4;
 * @return {!proto.anytype.model.Block.Position}
 */
proto.anytype.Rpc.BlockList.Duplicate.Request.prototype.getPosition = function() {
  return /** @type {!proto.anytype.model.Block.Position} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.anytype.model.Block.Position} value
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Request} returns this
 */
proto.anytype.Rpc.BlockList.Duplicate.Request.prototype.setPosition = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Duplicate.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Duplicate.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.BlockList.Duplicate.Response.Error.toObject(includeInstance, f),
    blockidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Response}
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Duplicate.Response;
  return proto.anytype.Rpc.BlockList.Duplicate.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Duplicate.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Response}
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.BlockList.Duplicate.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.BlockList.Duplicate.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBlockids(value);
      break;
    case 3:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Duplicate.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Duplicate.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.BlockList.Duplicate.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getBlockidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Duplicate.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Duplicate.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Response.Error}
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Duplicate.Response.Error;
  return proto.anytype.Rpc.BlockList.Duplicate.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Duplicate.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Response.Error}
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.BlockList.Duplicate.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Duplicate.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Duplicate.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Response.Error.Code}
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.BlockList.Duplicate.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.BlockList.Duplicate.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.BlockList.Duplicate.Response.Error}
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.BlockList.Duplicate.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.BlockList.Duplicate.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.BlockList.Duplicate.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Response} returns this
*/
proto.anytype.Rpc.BlockList.Duplicate.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Response} returns this
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string blockIds = 2;
 * @return {!Array<string>}
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.prototype.getBlockidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Response} returns this
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.prototype.setBlockidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Response} returns this
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.prototype.addBlockids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Response} returns this
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.prototype.clearBlockidsList = function() {
  return this.setBlockidsList([]);
};


/**
 * optional ResponseEvent event = 3;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 3));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Response} returns this
*/
proto.anytype.Rpc.BlockList.Duplicate.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Duplicate.Response} returns this
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Duplicate.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set}
 */
proto.anytype.Rpc.BlockList.Set.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set;
  return proto.anytype.Rpc.BlockList.Set.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set}
 */
proto.anytype.Rpc.BlockList.Set.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Page.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Page.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Page} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Page.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Page}
 */
proto.anytype.Rpc.BlockList.Set.Page.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Page;
  return proto.anytype.Rpc.BlockList.Set.Page.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Page} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Page}
 */
proto.anytype.Rpc.BlockList.Set.Page.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Page.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Page.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Page} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Page.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Page.IsArchived.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Page.IsArchived;
  return proto.anytype.Rpc.BlockList.Set.Page.IsArchived.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Page.IsArchived.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    isarchived: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request;
  return proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBlockids(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsarchived(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getIsarchived();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string blockIds = 2;
 * @return {!Array<string>}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request.prototype.getBlockidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request.prototype.setBlockidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request.prototype.addBlockids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request.prototype.clearBlockidsList = function() {
  return this.setBlockidsList([]);
};


/**
 * optional bool isArchived = 3;
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request.prototype.getIsarchived = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Request.prototype.setIsarchived = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response;
  return proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error;
  return proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.Code}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response} returns this
*/
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response} returns this
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Set.Page.IsArchived.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Text.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Text.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Text} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text}
 */
proto.anytype.Rpc.BlockList.Set.Text.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Text;
  return proto.anytype.Rpc.BlockList.Set.Text.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text}
 */
proto.anytype.Rpc.BlockList.Set.Text.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Text.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Text.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Text.Style.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Style} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Style}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Text.Style;
  return proto.anytype.Rpc.BlockList.Set.Text.Style.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Style} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Style}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Text.Style.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Style} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Request.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Text.Style.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Style.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    style: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Style.Request}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Text.Style.Request;
  return proto.anytype.Rpc.BlockList.Set.Text.Style.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Style.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Style.Request}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBlockids(value);
      break;
    case 3:
      var value = /** @type {!proto.anytype.model.Block.Content.Text.Style} */ (reader.readEnum());
      msg.setStyle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Text.Style.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Style.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getStyle();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Style.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string blockIds = 2;
 * @return {!Array<string>}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Request.prototype.getBlockidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Style.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Request.prototype.setBlockidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Style.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Request.prototype.addBlockids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Style.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Request.prototype.clearBlockidsList = function() {
  return this.setBlockidsList([]);
};


/**
 * optional model.Block.Content.Text.Style style = 3;
 * @return {!proto.anytype.model.Block.Content.Text.Style}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Request.prototype.getStyle = function() {
  return /** @type {!proto.anytype.model.Block.Content.Text.Style} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.anytype.model.Block.Content.Text.Style} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Style.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Request.prototype.setStyle = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Text.Style.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Style.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Style.Response}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Text.Style.Response;
  return proto.anytype.Rpc.BlockList.Set.Text.Style.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Style.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Style.Response}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Text.Style.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Style.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error;
  return proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.Code}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.BlockList.Set.Text.Style.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Style.Response} returns this
*/
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Style.Response} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Style.Response} returns this
*/
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Style.Response} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Set.Text.Style.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Text.Color.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Color} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Color}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Text.Color;
  return proto.anytype.Rpc.BlockList.Set.Text.Color.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Color} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Color}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Text.Color.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Color} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Request.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Text.Color.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Color.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    color: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Color.Request}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Text.Color.Request;
  return proto.anytype.Rpc.BlockList.Set.Text.Color.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Color.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Color.Request}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBlockids(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Text.Color.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Color.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Color.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string blockIds = 2;
 * @return {!Array<string>}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Request.prototype.getBlockidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Color.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Request.prototype.setBlockidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Color.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Request.prototype.addBlockids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Color.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Request.prototype.clearBlockidsList = function() {
  return this.setBlockidsList([]);
};


/**
 * optional string color = 3;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Request.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Color.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Request.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Text.Color.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Color.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Color.Response}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Text.Color.Response;
  return proto.anytype.Rpc.BlockList.Set.Text.Color.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Color.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Color.Response}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Text.Color.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Color.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error;
  return proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.Code}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.BlockList.Set.Text.Color.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Color.Response} returns this
*/
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Color.Response} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Color.Response} returns this
*/
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Color.Response} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Set.Text.Color.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Text.Mark.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Mark} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Mark}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Text.Mark;
  return proto.anytype.Rpc.BlockList.Set.Text.Mark.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Mark} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Mark}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Text.Mark.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Mark} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    mark: (f = msg.getMark()) && vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Content.Text.Mark.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Request}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Text.Mark.Request;
  return proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Request}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBlockids(value);
      break;
    case 3:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Content.Text.Mark;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Content.Text.Mark.deserializeBinaryFromReader);
      msg.setMark(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getMark();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Content.Text.Mark.serializeBinaryToWriter
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string blockIds = 2;
 * @return {!Array<string>}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.prototype.getBlockidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.prototype.setBlockidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.prototype.addBlockids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.prototype.clearBlockidsList = function() {
  return this.setBlockidsList([]);
};


/**
 * optional model.Block.Content.Text.Mark mark = 3;
 * @return {?proto.anytype.model.Block.Content.Text.Mark}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.prototype.getMark = function() {
  return /** @type{?proto.anytype.model.Block.Content.Text.Mark} */ (
    jspb.Message.getWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Content.Text.Mark, 3));
};


/**
 * @param {?proto.anytype.model.Block.Content.Text.Mark|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Request} returns this
*/
proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.prototype.setMark = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.prototype.clearMark = function() {
  return this.setMark(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Request.prototype.hasMark = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Response}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Text.Mark.Response;
  return proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Response}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error;
  return proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.Code}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Response} returns this
*/
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Response} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Response} returns this
*/
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Set.Text.Mark.Response} returns this
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Set.Text.Mark.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.BackgroundColor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.BackgroundColor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.BackgroundColor}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.BackgroundColor;
  return proto.anytype.Rpc.BlockList.Set.BackgroundColor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.BackgroundColor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.BackgroundColor}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.BackgroundColor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.BackgroundColor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    color: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request;
  return proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBlockids(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string blockIds = 2;
 * @return {!Array<string>}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request.prototype.getBlockidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request.prototype.setBlockidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request.prototype.addBlockids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request.prototype.clearBlockidsList = function() {
  return this.setBlockidsList([]);
};


/**
 * optional string color = 3;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Request.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response;
  return proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error;
  return proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.Code}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response} returns this
*/
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response} returns this
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response} returns this
*/
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response} returns this
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Set.BackgroundColor.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Align.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Align.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Align} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Align.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Align}
 */
proto.anytype.Rpc.BlockList.Set.Align.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Align;
  return proto.anytype.Rpc.BlockList.Set.Align.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Align} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Align}
 */
proto.anytype.Rpc.BlockList.Set.Align.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Align.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Align.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Align} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Align.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.BlockList.Set.Align.Request.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Align.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Align.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Align.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Align.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    align: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Align.Request}
 */
proto.anytype.Rpc.BlockList.Set.Align.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Align.Request;
  return proto.anytype.Rpc.BlockList.Set.Align.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Align.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Align.Request}
 */
proto.anytype.Rpc.BlockList.Set.Align.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBlockids(value);
      break;
    case 3:
      var value = /** @type {!proto.anytype.model.Block.Align} */ (reader.readEnum());
      msg.setAlign(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Align.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Align.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Align.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Align.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getAlign();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Set.Align.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Align.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Align.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string blockIds = 2;
 * @return {!Array<string>}
 */
proto.anytype.Rpc.BlockList.Set.Align.Request.prototype.getBlockidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Align.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Align.Request.prototype.setBlockidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.BlockList.Set.Align.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Align.Request.prototype.addBlockids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.BlockList.Set.Align.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Align.Request.prototype.clearBlockidsList = function() {
  return this.setBlockidsList([]);
};


/**
 * optional model.Block.Align align = 3;
 * @return {!proto.anytype.model.Block.Align}
 */
proto.anytype.Rpc.BlockList.Set.Align.Request.prototype.getAlign = function() {
  return /** @type {!proto.anytype.model.Block.Align} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.anytype.model.Block.Align} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Align.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Align.Request.prototype.setAlign = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Align.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Align.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.BlockList.Set.Align.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Align.Response}
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Align.Response;
  return proto.anytype.Rpc.BlockList.Set.Align.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Align.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Align.Response}
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.BlockList.Set.Align.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.BlockList.Set.Align.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Align.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Align.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.BlockList.Set.Align.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Align.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Align.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Align.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Align.Response.Error;
  return proto.anytype.Rpc.BlockList.Set.Align.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Align.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Align.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.BlockList.Set.Align.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Align.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Align.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.BlockList.Set.Align.Response.Error.Code}
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.BlockList.Set.Align.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.BlockList.Set.Align.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Align.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Align.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.BlockList.Set.Align.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.BlockList.Set.Align.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.BlockList.Set.Align.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.BlockList.Set.Align.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Align.Response} returns this
*/
proto.anytype.Rpc.BlockList.Set.Align.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Set.Align.Response} returns this
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Align.Response} returns this
*/
proto.anytype.Rpc.BlockList.Set.Align.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Set.Align.Response} returns this
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Set.Align.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Fields.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Fields.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Fields} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Fields.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields}
 */
proto.anytype.Rpc.BlockList.Set.Fields.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Fields;
  return proto.anytype.Rpc.BlockList.Set.Fields.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Fields} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields}
 */
proto.anytype.Rpc.BlockList.Set.Fields.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Fields.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Fields.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Fields} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Fields.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Fields.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Fields.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockfieldsList: jspb.Message.toObjectList(msg.getBlockfieldsList(),
    proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Request}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Fields.Request;
  return proto.anytype.Rpc.BlockList.Set.Fields.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Fields.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Request}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = new proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField;
      reader.readMessage(value,proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField.deserializeBinaryFromReader);
      msg.addBlockfields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Fields.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Fields.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockfieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fields: (f = msg.getFields()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField;
  return proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFields();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional string blockId = 1;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField} returns this
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Struct fields = 2;
 * @return {?proto.google.protobuf.Struct}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField.prototype.getFields = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 2));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField} returns this
*/
proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField.prototype.setFields = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField} returns this
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField.prototype.clearFields = function() {
  return this.setFields(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField.prototype.hasFields = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated BlockField blockFields = 2;
 * @return {!Array<!proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField>}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.prototype.getBlockfieldsList = function() {
  return /** @type{!Array<!proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField, 2));
};


/**
 * @param {!Array<!proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField>} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Request} returns this
*/
proto.anytype.Rpc.BlockList.Set.Fields.Request.prototype.setBlockfieldsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.prototype.addBlockfields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.anytype.Rpc.BlockList.Set.Fields.Request.BlockField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Fields.Request.prototype.clearBlockfieldsList = function() {
  return this.setBlockfieldsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Fields.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Fields.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Response}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Fields.Response;
  return proto.anytype.Rpc.BlockList.Set.Fields.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Fields.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Response}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.BlockList.Set.Fields.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Fields.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Fields.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Fields.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Fields.Response.Error;
  return proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Fields.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Fields.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.Code}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.BlockList.Set.Fields.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.BlockList.Set.Fields.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.BlockList.Set.Fields.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.BlockList.Set.Fields.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Response} returns this
*/
proto.anytype.Rpc.BlockList.Set.Fields.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Response} returns this
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Response} returns this
*/
proto.anytype.Rpc.BlockList.Set.Fields.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Set.Fields.Response} returns this
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Set.Fields.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Div.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Div.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Div} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Div.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Div}
 */
proto.anytype.Rpc.BlockList.Set.Div.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Div;
  return proto.anytype.Rpc.BlockList.Set.Div.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Div} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Div}
 */
proto.anytype.Rpc.BlockList.Set.Div.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Div.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Div.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Div} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Div.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Div.Style.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Div.Style} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Div.Style}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Div.Style;
  return proto.anytype.Rpc.BlockList.Set.Div.Style.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Div.Style} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Div.Style}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Div.Style.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Div.Style} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Request.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Div.Style.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Div.Style.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    style: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Div.Style.Request}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Div.Style.Request;
  return proto.anytype.Rpc.BlockList.Set.Div.Style.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Div.Style.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Div.Style.Request}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBlockids(value);
      break;
    case 3:
      var value = /** @type {!proto.anytype.model.Block.Content.Div.Style} */ (reader.readEnum());
      msg.setStyle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Div.Style.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Div.Style.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getStyle();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Div.Style.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string blockIds = 2;
 * @return {!Array<string>}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Request.prototype.getBlockidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Div.Style.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Request.prototype.setBlockidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.BlockList.Set.Div.Style.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Request.prototype.addBlockids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.BlockList.Set.Div.Style.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Request.prototype.clearBlockidsList = function() {
  return this.setBlockidsList([]);
};


/**
 * optional model.Block.Content.Div.Style style = 3;
 * @return {!proto.anytype.model.Block.Content.Div.Style}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Request.prototype.getStyle = function() {
  return /** @type {!proto.anytype.model.Block.Content.Div.Style} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.anytype.model.Block.Content.Div.Style} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Div.Style.Request} returns this
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Request.prototype.setStyle = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Div.Style.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Div.Style.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Div.Style.Response}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Div.Style.Response;
  return proto.anytype.Rpc.BlockList.Set.Div.Style.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Div.Style.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Div.Style.Response}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Div.Style.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Div.Style.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error;
  return proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.Code}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.BlockList.Set.Div.Style.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Div.Style.Response} returns this
*/
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Set.Div.Style.Response} returns this
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Set.Div.Style.Response} returns this
*/
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Set.Div.Style.Response} returns this
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Set.Div.Style.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Delete.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Delete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Delete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Delete.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Delete}
 */
proto.anytype.Rpc.BlockList.Delete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Delete;
  return proto.anytype.Rpc.BlockList.Delete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Delete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Delete}
 */
proto.anytype.Rpc.BlockList.Delete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Delete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Delete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Delete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Delete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Delete.Page.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Delete.Page.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Delete.Page} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Delete.Page.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Delete.Page}
 */
proto.anytype.Rpc.BlockList.Delete.Page.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Delete.Page;
  return proto.anytype.Rpc.BlockList.Delete.Page.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Delete.Page} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Delete.Page}
 */
proto.anytype.Rpc.BlockList.Delete.Page.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Delete.Page.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Delete.Page.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Delete.Page} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Delete.Page.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.BlockList.Delete.Page.Request.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Delete.Page.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Delete.Page.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Delete.Page.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Delete.Page.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Delete.Page.Request}
 */
proto.anytype.Rpc.BlockList.Delete.Page.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Delete.Page.Request;
  return proto.anytype.Rpc.BlockList.Delete.Page.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Delete.Page.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Delete.Page.Request}
 */
proto.anytype.Rpc.BlockList.Delete.Page.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addBlockids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Delete.Page.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Delete.Page.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Delete.Page.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Delete.Page.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string blockIds = 1;
 * @return {!Array<string>}
 */
proto.anytype.Rpc.BlockList.Delete.Page.Request.prototype.getBlockidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anytype.Rpc.BlockList.Delete.Page.Request} returns this
 */
proto.anytype.Rpc.BlockList.Delete.Page.Request.prototype.setBlockidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.BlockList.Delete.Page.Request} returns this
 */
proto.anytype.Rpc.BlockList.Delete.Page.Request.prototype.addBlockids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.BlockList.Delete.Page.Request} returns this
 */
proto.anytype.Rpc.BlockList.Delete.Page.Request.prototype.clearBlockidsList = function() {
  return this.setBlockidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Delete.Page.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Delete.Page.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Delete.Page.Response}
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Delete.Page.Response;
  return proto.anytype.Rpc.BlockList.Delete.Page.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Delete.Page.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Delete.Page.Response}
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.BlockList.Delete.Page.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Delete.Page.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Delete.Page.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.BlockList.Delete.Page.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.BlockList.Delete.Page.Response.Error}
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.BlockList.Delete.Page.Response.Error;
  return proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.BlockList.Delete.Page.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.BlockList.Delete.Page.Response.Error}
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.BlockList.Delete.Page.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.Code}
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.BlockList.Delete.Page.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.BlockList.Delete.Page.Response.Error} returns this
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.BlockList.Delete.Page.Response.Error}
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.BlockList.Delete.Page.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.BlockList.Delete.Page.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.BlockList.Delete.Page.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Delete.Page.Response} returns this
*/
proto.anytype.Rpc.BlockList.Delete.Page.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Delete.Page.Response} returns this
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.BlockList.Delete.Page.Response} returns this
*/
proto.anytype.Rpc.BlockList.Delete.Page.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.BlockList.Delete.Page.Response} returns this
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.BlockList.Delete.Page.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block}
 */
proto.anytype.Rpc.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block;
  return proto.anytype.Rpc.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block}
 */
proto.anytype.Rpc.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Replace.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Replace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Replace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Replace.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Replace}
 */
proto.anytype.Rpc.Block.Replace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Replace;
  return proto.anytype.Rpc.Block.Replace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Replace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Replace}
 */
proto.anytype.Rpc.Block.Replace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Replace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Replace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Replace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Replace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Replace.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Replace.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Replace.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Replace.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    block: (f = msg.getBlock()) && vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Replace.Request}
 */
proto.anytype.Rpc.Block.Replace.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Replace.Request;
  return proto.anytype.Rpc.Block.Replace.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Replace.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Replace.Request}
 */
proto.anytype.Rpc.Block.Replace.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Replace.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Replace.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Replace.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Replace.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.serializeBinaryToWriter
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Replace.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Replace.Request} returns this
 */
proto.anytype.Rpc.Block.Replace.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Replace.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Replace.Request} returns this
 */
proto.anytype.Rpc.Block.Replace.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional model.Block block = 3;
 * @return {?proto.anytype.model.Block}
 */
proto.anytype.Rpc.Block.Replace.Request.prototype.getBlock = function() {
  return /** @type{?proto.anytype.model.Block} */ (
    jspb.Message.getWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block, 3));
};


/**
 * @param {?proto.anytype.model.Block|undefined} value
 * @return {!proto.anytype.Rpc.Block.Replace.Request} returns this
*/
proto.anytype.Rpc.Block.Replace.Request.prototype.setBlock = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Replace.Request} returns this
 */
proto.anytype.Rpc.Block.Replace.Request.prototype.clearBlock = function() {
  return this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Replace.Request.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Replace.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Replace.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Replace.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Replace.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Replace.Response.Error.toObject(includeInstance, f),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Replace.Response}
 */
proto.anytype.Rpc.Block.Replace.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Replace.Response;
  return proto.anytype.Rpc.Block.Replace.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Replace.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Replace.Response}
 */
proto.anytype.Rpc.Block.Replace.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Replace.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Replace.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Replace.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Replace.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Replace.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Replace.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Replace.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Replace.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Replace.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Replace.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Replace.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Replace.Response.Error}
 */
proto.anytype.Rpc.Block.Replace.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Replace.Response.Error;
  return proto.anytype.Rpc.Block.Replace.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Replace.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Replace.Response.Error}
 */
proto.anytype.Rpc.Block.Replace.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Replace.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Replace.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Replace.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Replace.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Replace.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Replace.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Replace.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Replace.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Replace.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Replace.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Replace.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Replace.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Replace.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Replace.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Replace.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Replace.Response.Error}
 */
proto.anytype.Rpc.Block.Replace.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Replace.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Replace.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Replace.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Replace.Response} returns this
*/
proto.anytype.Rpc.Block.Replace.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Replace.Response} returns this
 */
proto.anytype.Rpc.Block.Replace.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Replace.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Replace.Response.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Replace.Response} returns this
 */
proto.anytype.Rpc.Block.Replace.Response.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ResponseEvent event = 3;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Replace.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 3));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Replace.Response} returns this
*/
proto.anytype.Rpc.Block.Replace.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Replace.Response} returns this
 */
proto.anytype.Rpc.Block.Replace.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Replace.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Split.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Split.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Split} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Split.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Split}
 */
proto.anytype.Rpc.Block.Split.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Split;
  return proto.anytype.Rpc.Block.Split.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Split} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Split}
 */
proto.anytype.Rpc.Block.Split.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Split.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Split.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Split} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Split.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Split.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Split.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Split.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Split.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    range: (f = msg.getRange()) && vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range.toObject(includeInstance, f),
    style: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Split.Request}
 */
proto.anytype.Rpc.Block.Split.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Split.Request;
  return proto.anytype.Rpc.Block.Split.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Split.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Split.Request}
 */
proto.anytype.Rpc.Block.Split.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range.deserializeBinaryFromReader);
      msg.setRange(value);
      break;
    case 4:
      var value = /** @type {!proto.anytype.model.Block.Content.Text.Style} */ (reader.readEnum());
      msg.setStyle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Split.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Split.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Split.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Split.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRange();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range.serializeBinaryToWriter
    );
  }
  f = message.getStyle();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Split.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Split.Request} returns this
 */
proto.anytype.Rpc.Block.Split.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Split.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Split.Request} returns this
 */
proto.anytype.Rpc.Block.Split.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional model.Range range = 3;
 * @return {?proto.anytype.model.Range}
 */
proto.anytype.Rpc.Block.Split.Request.prototype.getRange = function() {
  return /** @type{?proto.anytype.model.Range} */ (
    jspb.Message.getWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range, 3));
};


/**
 * @param {?proto.anytype.model.Range|undefined} value
 * @return {!proto.anytype.Rpc.Block.Split.Request} returns this
*/
proto.anytype.Rpc.Block.Split.Request.prototype.setRange = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Split.Request} returns this
 */
proto.anytype.Rpc.Block.Split.Request.prototype.clearRange = function() {
  return this.setRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Split.Request.prototype.hasRange = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional model.Block.Content.Text.Style style = 4;
 * @return {!proto.anytype.model.Block.Content.Text.Style}
 */
proto.anytype.Rpc.Block.Split.Request.prototype.getStyle = function() {
  return /** @type {!proto.anytype.model.Block.Content.Text.Style} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.anytype.model.Block.Content.Text.Style} value
 * @return {!proto.anytype.Rpc.Block.Split.Request} returns this
 */
proto.anytype.Rpc.Block.Split.Request.prototype.setStyle = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Split.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Split.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Split.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Split.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Split.Response.Error.toObject(includeInstance, f),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Split.Response}
 */
proto.anytype.Rpc.Block.Split.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Split.Response;
  return proto.anytype.Rpc.Block.Split.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Split.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Split.Response}
 */
proto.anytype.Rpc.Block.Split.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Split.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Split.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Split.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Split.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Split.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Split.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Split.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Split.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Split.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Split.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Split.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Split.Response.Error}
 */
proto.anytype.Rpc.Block.Split.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Split.Response.Error;
  return proto.anytype.Rpc.Block.Split.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Split.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Split.Response.Error}
 */
proto.anytype.Rpc.Block.Split.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Split.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Split.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Split.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Split.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Split.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Split.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Split.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Split.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Split.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Split.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Split.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Split.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Split.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Split.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Split.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Split.Response.Error}
 */
proto.anytype.Rpc.Block.Split.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Split.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Split.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Split.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Split.Response} returns this
*/
proto.anytype.Rpc.Block.Split.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Split.Response} returns this
 */
proto.anytype.Rpc.Block.Split.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Split.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Split.Response.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Split.Response} returns this
 */
proto.anytype.Rpc.Block.Split.Response.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ResponseEvent event = 3;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Split.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 3));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Split.Response} returns this
*/
proto.anytype.Rpc.Block.Split.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Split.Response} returns this
 */
proto.anytype.Rpc.Block.Split.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Split.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Merge.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Merge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Merge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Merge.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Merge}
 */
proto.anytype.Rpc.Block.Merge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Merge;
  return proto.anytype.Rpc.Block.Merge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Merge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Merge}
 */
proto.anytype.Rpc.Block.Merge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Merge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Merge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Merge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Merge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Merge.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Merge.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Merge.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Merge.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    firstblockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    secondblockid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Merge.Request}
 */
proto.anytype.Rpc.Block.Merge.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Merge.Request;
  return proto.anytype.Rpc.Block.Merge.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Merge.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Merge.Request}
 */
proto.anytype.Rpc.Block.Merge.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstblockid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecondblockid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Merge.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Merge.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Merge.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Merge.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFirstblockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSecondblockid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Merge.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Merge.Request} returns this
 */
proto.anytype.Rpc.Block.Merge.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string firstBlockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Merge.Request.prototype.getFirstblockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Merge.Request} returns this
 */
proto.anytype.Rpc.Block.Merge.Request.prototype.setFirstblockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string secondBlockId = 3;
 * @return {string}
 */
proto.anytype.Rpc.Block.Merge.Request.prototype.getSecondblockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Merge.Request} returns this
 */
proto.anytype.Rpc.Block.Merge.Request.prototype.setSecondblockid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Merge.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Merge.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Merge.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Merge.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Merge.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Merge.Response}
 */
proto.anytype.Rpc.Block.Merge.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Merge.Response;
  return proto.anytype.Rpc.Block.Merge.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Merge.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Merge.Response}
 */
proto.anytype.Rpc.Block.Merge.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Merge.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Merge.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Merge.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Merge.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Merge.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Merge.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Merge.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Merge.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Merge.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Merge.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Merge.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Merge.Response.Error}
 */
proto.anytype.Rpc.Block.Merge.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Merge.Response.Error;
  return proto.anytype.Rpc.Block.Merge.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Merge.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Merge.Response.Error}
 */
proto.anytype.Rpc.Block.Merge.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Merge.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Merge.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Merge.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Merge.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Merge.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Merge.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Merge.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Merge.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Merge.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Merge.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Merge.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Merge.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Merge.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Merge.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Merge.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Merge.Response.Error}
 */
proto.anytype.Rpc.Block.Merge.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Merge.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Merge.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Merge.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Merge.Response} returns this
*/
proto.anytype.Rpc.Block.Merge.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Merge.Response} returns this
 */
proto.anytype.Rpc.Block.Merge.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Merge.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Merge.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Merge.Response} returns this
*/
proto.anytype.Rpc.Block.Merge.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Merge.Response} returns this
 */
proto.anytype.Rpc.Block.Merge.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Merge.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Copy.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Copy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Copy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Copy.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Copy}
 */
proto.anytype.Rpc.Block.Copy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Copy;
  return proto.anytype.Rpc.Block.Copy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Copy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Copy}
 */
proto.anytype.Rpc.Block.Copy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Copy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Copy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Copy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Copy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.Block.Copy.Request.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Copy.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Copy.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Copy.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Copy.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.toObject, includeInstance),
    selectedtextrange: (f = msg.getSelectedtextrange()) && vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Copy.Request}
 */
proto.anytype.Rpc.Block.Copy.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Copy.Request;
  return proto.anytype.Rpc.Block.Copy.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Copy.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Copy.Request}
 */
proto.anytype.Rpc.Block.Copy.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    case 3:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range.deserializeBinaryFromReader);
      msg.setSelectedtextrange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Copy.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Copy.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Copy.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Copy.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.serializeBinaryToWriter
    );
  }
  f = message.getSelectedtextrange();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range.serializeBinaryToWriter
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Copy.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Copy.Request} returns this
 */
proto.anytype.Rpc.Block.Copy.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated model.Block blocks = 2;
 * @return {!Array<!proto.anytype.model.Block>}
 */
proto.anytype.Rpc.Block.Copy.Request.prototype.getBlocksList = function() {
  return /** @type{!Array<!proto.anytype.model.Block>} */ (
    jspb.Message.getRepeatedWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block, 2));
};


/**
 * @param {!Array<!proto.anytype.model.Block>} value
 * @return {!proto.anytype.Rpc.Block.Copy.Request} returns this
*/
proto.anytype.Rpc.Block.Copy.Request.prototype.setBlocksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.anytype.model.Block=} opt_value
 * @param {number=} opt_index
 * @return {!proto.anytype.model.Block}
 */
proto.anytype.Rpc.Block.Copy.Request.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.anytype.model.Block, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.Block.Copy.Request} returns this
 */
proto.anytype.Rpc.Block.Copy.Request.prototype.clearBlocksList = function() {
  return this.setBlocksList([]);
};


/**
 * optional model.Range selectedTextRange = 3;
 * @return {?proto.anytype.model.Range}
 */
proto.anytype.Rpc.Block.Copy.Request.prototype.getSelectedtextrange = function() {
  return /** @type{?proto.anytype.model.Range} */ (
    jspb.Message.getWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range, 3));
};


/**
 * @param {?proto.anytype.model.Range|undefined} value
 * @return {!proto.anytype.Rpc.Block.Copy.Request} returns this
*/
proto.anytype.Rpc.Block.Copy.Request.prototype.setSelectedtextrange = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Copy.Request} returns this
 */
proto.anytype.Rpc.Block.Copy.Request.prototype.clearSelectedtextrange = function() {
  return this.setSelectedtextrange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Copy.Request.prototype.hasSelectedtextrange = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.Block.Copy.Response.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Copy.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Copy.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Copy.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Copy.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Copy.Response.Error.toObject(includeInstance, f),
    textslot: jspb.Message.getFieldWithDefault(msg, 2, ""),
    htmlslot: jspb.Message.getFieldWithDefault(msg, 3, ""),
    anyslotList: jspb.Message.toObjectList(msg.getAnyslotList(),
    vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Copy.Response}
 */
proto.anytype.Rpc.Block.Copy.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Copy.Response;
  return proto.anytype.Rpc.Block.Copy.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Copy.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Copy.Response}
 */
proto.anytype.Rpc.Block.Copy.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Copy.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Copy.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextslot(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHtmlslot(value);
      break;
    case 4:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.deserializeBinaryFromReader);
      msg.addAnyslot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Copy.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Copy.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Copy.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Copy.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Copy.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getTextslot();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHtmlslot();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAnyslotList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Copy.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Copy.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Copy.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Copy.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Copy.Response.Error}
 */
proto.anytype.Rpc.Block.Copy.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Copy.Response.Error;
  return proto.anytype.Rpc.Block.Copy.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Copy.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Copy.Response.Error}
 */
proto.anytype.Rpc.Block.Copy.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Copy.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Copy.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Copy.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Copy.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Copy.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Copy.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Copy.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Copy.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Copy.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Copy.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Copy.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Copy.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Copy.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Copy.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Copy.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Copy.Response.Error}
 */
proto.anytype.Rpc.Block.Copy.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Copy.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Copy.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Copy.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Copy.Response} returns this
*/
proto.anytype.Rpc.Block.Copy.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Copy.Response} returns this
 */
proto.anytype.Rpc.Block.Copy.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Copy.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string textSlot = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Copy.Response.prototype.getTextslot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Copy.Response} returns this
 */
proto.anytype.Rpc.Block.Copy.Response.prototype.setTextslot = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string htmlSlot = 3;
 * @return {string}
 */
proto.anytype.Rpc.Block.Copy.Response.prototype.getHtmlslot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Copy.Response} returns this
 */
proto.anytype.Rpc.Block.Copy.Response.prototype.setHtmlslot = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated model.Block anySlot = 4;
 * @return {!Array<!proto.anytype.model.Block>}
 */
proto.anytype.Rpc.Block.Copy.Response.prototype.getAnyslotList = function() {
  return /** @type{!Array<!proto.anytype.model.Block>} */ (
    jspb.Message.getRepeatedWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block, 4));
};


/**
 * @param {!Array<!proto.anytype.model.Block>} value
 * @return {!proto.anytype.Rpc.Block.Copy.Response} returns this
*/
proto.anytype.Rpc.Block.Copy.Response.prototype.setAnyslotList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.anytype.model.Block=} opt_value
 * @param {number=} opt_index
 * @return {!proto.anytype.model.Block}
 */
proto.anytype.Rpc.Block.Copy.Response.prototype.addAnyslot = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.anytype.model.Block, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.Block.Copy.Response} returns this
 */
proto.anytype.Rpc.Block.Copy.Response.prototype.clearAnyslotList = function() {
  return this.setAnyslotList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Paste.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Paste.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Paste} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Paste.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Paste}
 */
proto.anytype.Rpc.Block.Paste.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Paste;
  return proto.anytype.Rpc.Block.Paste.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Paste} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Paste}
 */
proto.anytype.Rpc.Block.Paste.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Paste.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Paste.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Paste} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Paste.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.Block.Paste.Request.repeatedFields_ = [4,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Paste.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Paste.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Paste.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    focusedblockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    selectedtextrange: (f = msg.getSelectedtextrange()) && vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range.toObject(includeInstance, f),
    selectedblockidsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    ispartofblock: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    textslot: jspb.Message.getFieldWithDefault(msg, 6, ""),
    htmlslot: jspb.Message.getFieldWithDefault(msg, 7, ""),
    anyslotList: jspb.Message.toObjectList(msg.getAnyslotList(),
    vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Paste.Request}
 */
proto.anytype.Rpc.Block.Paste.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Paste.Request;
  return proto.anytype.Rpc.Block.Paste.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Paste.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Paste.Request}
 */
proto.anytype.Rpc.Block.Paste.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFocusedblockid(value);
      break;
    case 3:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range.deserializeBinaryFromReader);
      msg.setSelectedtextrange(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addSelectedblockids(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspartofblock(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextslot(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setHtmlslot(value);
      break;
    case 8:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.deserializeBinaryFromReader);
      msg.addAnyslot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Paste.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Paste.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Paste.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFocusedblockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSelectedtextrange();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range.serializeBinaryToWriter
    );
  }
  f = message.getSelectedblockidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getIspartofblock();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getTextslot();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getHtmlslot();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAnyslotList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.serializeBinaryToWriter
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Paste.Request} returns this
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string focusedBlockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.getFocusedblockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Paste.Request} returns this
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.setFocusedblockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional model.Range selectedTextRange = 3;
 * @return {?proto.anytype.model.Range}
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.getSelectedtextrange = function() {
  return /** @type{?proto.anytype.model.Range} */ (
    jspb.Message.getWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range, 3));
};


/**
 * @param {?proto.anytype.model.Range|undefined} value
 * @return {!proto.anytype.Rpc.Block.Paste.Request} returns this
*/
proto.anytype.Rpc.Block.Paste.Request.prototype.setSelectedtextrange = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Paste.Request} returns this
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.clearSelectedtextrange = function() {
  return this.setSelectedtextrange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.hasSelectedtextrange = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string selectedBlockIds = 4;
 * @return {!Array<string>}
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.getSelectedblockidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anytype.Rpc.Block.Paste.Request} returns this
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.setSelectedblockidsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.Block.Paste.Request} returns this
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.addSelectedblockids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.Block.Paste.Request} returns this
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.clearSelectedblockidsList = function() {
  return this.setSelectedblockidsList([]);
};


/**
 * optional bool isPartOfBlock = 5;
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.getIspartofblock = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.anytype.Rpc.Block.Paste.Request} returns this
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.setIspartofblock = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string textSlot = 6;
 * @return {string}
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.getTextslot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Paste.Request} returns this
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.setTextslot = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string htmlSlot = 7;
 * @return {string}
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.getHtmlslot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Paste.Request} returns this
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.setHtmlslot = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated model.Block anySlot = 8;
 * @return {!Array<!proto.anytype.model.Block>}
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.getAnyslotList = function() {
  return /** @type{!Array<!proto.anytype.model.Block>} */ (
    jspb.Message.getRepeatedWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block, 8));
};


/**
 * @param {!Array<!proto.anytype.model.Block>} value
 * @return {!proto.anytype.Rpc.Block.Paste.Request} returns this
*/
proto.anytype.Rpc.Block.Paste.Request.prototype.setAnyslotList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.anytype.model.Block=} opt_value
 * @param {number=} opt_index
 * @return {!proto.anytype.model.Block}
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.addAnyslot = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.anytype.model.Block, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.Block.Paste.Request} returns this
 */
proto.anytype.Rpc.Block.Paste.Request.prototype.clearAnyslotList = function() {
  return this.setAnyslotList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.Block.Paste.Response.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Paste.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Paste.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Paste.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Paste.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Paste.Response.Error.toObject(includeInstance, f),
    blockidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    caretposition: jspb.Message.getFieldWithDefault(msg, 3, 0),
    issameblockcaret: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Paste.Response}
 */
proto.anytype.Rpc.Block.Paste.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Paste.Response;
  return proto.anytype.Rpc.Block.Paste.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Paste.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Paste.Response}
 */
proto.anytype.Rpc.Block.Paste.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Paste.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Paste.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBlockids(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCaretposition(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssameblockcaret(value);
      break;
    case 5:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Paste.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Paste.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Paste.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Paste.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Paste.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getBlockidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getCaretposition();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getIssameblockcaret();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Paste.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Paste.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Paste.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Paste.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Paste.Response.Error}
 */
proto.anytype.Rpc.Block.Paste.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Paste.Response.Error;
  return proto.anytype.Rpc.Block.Paste.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Paste.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Paste.Response.Error}
 */
proto.anytype.Rpc.Block.Paste.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Paste.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Paste.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Paste.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Paste.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Paste.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Paste.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Paste.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Paste.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Paste.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Paste.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Paste.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Paste.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Paste.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Paste.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Paste.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Paste.Response.Error}
 */
proto.anytype.Rpc.Block.Paste.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Paste.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Paste.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Paste.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Paste.Response} returns this
*/
proto.anytype.Rpc.Block.Paste.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Paste.Response} returns this
 */
proto.anytype.Rpc.Block.Paste.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Paste.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string blockIds = 2;
 * @return {!Array<string>}
 */
proto.anytype.Rpc.Block.Paste.Response.prototype.getBlockidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anytype.Rpc.Block.Paste.Response} returns this
 */
proto.anytype.Rpc.Block.Paste.Response.prototype.setBlockidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.Block.Paste.Response} returns this
 */
proto.anytype.Rpc.Block.Paste.Response.prototype.addBlockids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.Block.Paste.Response} returns this
 */
proto.anytype.Rpc.Block.Paste.Response.prototype.clearBlockidsList = function() {
  return this.setBlockidsList([]);
};


/**
 * optional int32 caretPosition = 3;
 * @return {number}
 */
proto.anytype.Rpc.Block.Paste.Response.prototype.getCaretposition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.anytype.Rpc.Block.Paste.Response} returns this
 */
proto.anytype.Rpc.Block.Paste.Response.prototype.setCaretposition = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool isSameBlockCaret = 4;
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Paste.Response.prototype.getIssameblockcaret = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.anytype.Rpc.Block.Paste.Response} returns this
 */
proto.anytype.Rpc.Block.Paste.Response.prototype.setIssameblockcaret = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional ResponseEvent event = 5;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Paste.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 5));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Paste.Response} returns this
*/
proto.anytype.Rpc.Block.Paste.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Paste.Response} returns this
 */
proto.anytype.Rpc.Block.Paste.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Paste.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Cut.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Cut.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Cut} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Cut.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Cut}
 */
proto.anytype.Rpc.Block.Cut.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Cut;
  return proto.anytype.Rpc.Block.Cut.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Cut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Cut}
 */
proto.anytype.Rpc.Block.Cut.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Cut.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Cut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Cut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Cut.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.Block.Cut.Request.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Cut.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Cut.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Cut.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Cut.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.toObject, includeInstance),
    selectedtextrange: (f = msg.getSelectedtextrange()) && vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Cut.Request}
 */
proto.anytype.Rpc.Block.Cut.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Cut.Request;
  return proto.anytype.Rpc.Block.Cut.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Cut.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Cut.Request}
 */
proto.anytype.Rpc.Block.Cut.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    case 3:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range.deserializeBinaryFromReader);
      msg.setSelectedtextrange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Cut.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Cut.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Cut.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Cut.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.serializeBinaryToWriter
    );
  }
  f = message.getSelectedtextrange();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range.serializeBinaryToWriter
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Cut.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Cut.Request} returns this
 */
proto.anytype.Rpc.Block.Cut.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated model.Block blocks = 2;
 * @return {!Array<!proto.anytype.model.Block>}
 */
proto.anytype.Rpc.Block.Cut.Request.prototype.getBlocksList = function() {
  return /** @type{!Array<!proto.anytype.model.Block>} */ (
    jspb.Message.getRepeatedWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block, 2));
};


/**
 * @param {!Array<!proto.anytype.model.Block>} value
 * @return {!proto.anytype.Rpc.Block.Cut.Request} returns this
*/
proto.anytype.Rpc.Block.Cut.Request.prototype.setBlocksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.anytype.model.Block=} opt_value
 * @param {number=} opt_index
 * @return {!proto.anytype.model.Block}
 */
proto.anytype.Rpc.Block.Cut.Request.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.anytype.model.Block, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.Block.Cut.Request} returns this
 */
proto.anytype.Rpc.Block.Cut.Request.prototype.clearBlocksList = function() {
  return this.setBlocksList([]);
};


/**
 * optional model.Range selectedTextRange = 3;
 * @return {?proto.anytype.model.Range}
 */
proto.anytype.Rpc.Block.Cut.Request.prototype.getSelectedtextrange = function() {
  return /** @type{?proto.anytype.model.Range} */ (
    jspb.Message.getWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range, 3));
};


/**
 * @param {?proto.anytype.model.Range|undefined} value
 * @return {!proto.anytype.Rpc.Block.Cut.Request} returns this
*/
proto.anytype.Rpc.Block.Cut.Request.prototype.setSelectedtextrange = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Cut.Request} returns this
 */
proto.anytype.Rpc.Block.Cut.Request.prototype.clearSelectedtextrange = function() {
  return this.setSelectedtextrange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Cut.Request.prototype.hasSelectedtextrange = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.Block.Cut.Response.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Cut.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Cut.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Cut.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Cut.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Cut.Response.Error.toObject(includeInstance, f),
    textslot: jspb.Message.getFieldWithDefault(msg, 2, ""),
    htmlslot: jspb.Message.getFieldWithDefault(msg, 3, ""),
    anyslotList: jspb.Message.toObjectList(msg.getAnyslotList(),
    vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.toObject, includeInstance),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Cut.Response}
 */
proto.anytype.Rpc.Block.Cut.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Cut.Response;
  return proto.anytype.Rpc.Block.Cut.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Cut.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Cut.Response}
 */
proto.anytype.Rpc.Block.Cut.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Cut.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Cut.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextslot(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHtmlslot(value);
      break;
    case 4:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.deserializeBinaryFromReader);
      msg.addAnyslot(value);
      break;
    case 5:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Cut.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Cut.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Cut.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Cut.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Cut.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getTextslot();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHtmlslot();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAnyslotList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Cut.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Cut.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Cut.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Cut.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Cut.Response.Error}
 */
proto.anytype.Rpc.Block.Cut.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Cut.Response.Error;
  return proto.anytype.Rpc.Block.Cut.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Cut.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Cut.Response.Error}
 */
proto.anytype.Rpc.Block.Cut.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Cut.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Cut.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Cut.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Cut.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Cut.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Cut.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Cut.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Cut.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Cut.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Cut.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Cut.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Cut.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Cut.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Cut.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Cut.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Cut.Response.Error}
 */
proto.anytype.Rpc.Block.Cut.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Cut.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Cut.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Cut.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Cut.Response} returns this
*/
proto.anytype.Rpc.Block.Cut.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Cut.Response} returns this
 */
proto.anytype.Rpc.Block.Cut.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Cut.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string textSlot = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Cut.Response.prototype.getTextslot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Cut.Response} returns this
 */
proto.anytype.Rpc.Block.Cut.Response.prototype.setTextslot = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string htmlSlot = 3;
 * @return {string}
 */
proto.anytype.Rpc.Block.Cut.Response.prototype.getHtmlslot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Cut.Response} returns this
 */
proto.anytype.Rpc.Block.Cut.Response.prototype.setHtmlslot = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated model.Block anySlot = 4;
 * @return {!Array<!proto.anytype.model.Block>}
 */
proto.anytype.Rpc.Block.Cut.Response.prototype.getAnyslotList = function() {
  return /** @type{!Array<!proto.anytype.model.Block>} */ (
    jspb.Message.getRepeatedWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block, 4));
};


/**
 * @param {!Array<!proto.anytype.model.Block>} value
 * @return {!proto.anytype.Rpc.Block.Cut.Response} returns this
*/
proto.anytype.Rpc.Block.Cut.Response.prototype.setAnyslotList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.anytype.model.Block=} opt_value
 * @param {number=} opt_index
 * @return {!proto.anytype.model.Block}
 */
proto.anytype.Rpc.Block.Cut.Response.prototype.addAnyslot = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.anytype.model.Block, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.Block.Cut.Response} returns this
 */
proto.anytype.Rpc.Block.Cut.Response.prototype.clearAnyslotList = function() {
  return this.setAnyslotList([]);
};


/**
 * optional ResponseEvent event = 5;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Cut.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 5));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Cut.Response} returns this
*/
proto.anytype.Rpc.Block.Cut.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Cut.Response} returns this
 */
proto.anytype.Rpc.Block.Cut.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Cut.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.ImportMarkdown.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.ImportMarkdown.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.ImportMarkdown} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.ImportMarkdown.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.ImportMarkdown}
 */
proto.anytype.Rpc.Block.ImportMarkdown.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.ImportMarkdown;
  return proto.anytype.Rpc.Block.ImportMarkdown.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.ImportMarkdown} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.ImportMarkdown}
 */
proto.anytype.Rpc.Block.ImportMarkdown.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.ImportMarkdown.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.ImportMarkdown.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.ImportMarkdown} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.ImportMarkdown.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.ImportMarkdown.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.ImportMarkdown.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.ImportMarkdown.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    importpath: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.ImportMarkdown.Request}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.ImportMarkdown.Request;
  return proto.anytype.Rpc.Block.ImportMarkdown.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.ImportMarkdown.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.ImportMarkdown.Request}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setImportpath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.ImportMarkdown.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.ImportMarkdown.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.ImportMarkdown.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getImportpath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.ImportMarkdown.Request} returns this
 */
proto.anytype.Rpc.Block.ImportMarkdown.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string importPath = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Request.prototype.getImportpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.ImportMarkdown.Request} returns this
 */
proto.anytype.Rpc.Block.ImportMarkdown.Request.prototype.setImportpath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.ImportMarkdown.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.ImportMarkdown.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.toObject(includeInstance, f),
    rootlinkidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.ImportMarkdown.Response}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.ImportMarkdown.Response;
  return proto.anytype.Rpc.Block.ImportMarkdown.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.ImportMarkdown.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.ImportMarkdown.Response}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.ImportMarkdown.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addRootlinkids(value);
      break;
    case 3:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.ImportMarkdown.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.ImportMarkdown.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getRootlinkidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.ImportMarkdown.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.ImportMarkdown.Response.Error}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.ImportMarkdown.Response.Error;
  return proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.ImportMarkdown.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.ImportMarkdown.Response.Error}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.ImportMarkdown.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.Code}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.ImportMarkdown.Response.Error} returns this
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.ImportMarkdown.Response.Error} returns this
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.ImportMarkdown.Response.Error}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.ImportMarkdown.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.ImportMarkdown.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.ImportMarkdown.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.ImportMarkdown.Response} returns this
*/
proto.anytype.Rpc.Block.ImportMarkdown.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.ImportMarkdown.Response} returns this
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string rootLinkIds = 2;
 * @return {!Array<string>}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.prototype.getRootlinkidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anytype.Rpc.Block.ImportMarkdown.Response} returns this
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.prototype.setRootlinkidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.Block.ImportMarkdown.Response} returns this
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.prototype.addRootlinkids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.Block.ImportMarkdown.Response} returns this
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.prototype.clearRootlinkidsList = function() {
  return this.setRootlinkidsList([]);
};


/**
 * optional ResponseEvent event = 3;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 3));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.ImportMarkdown.Response} returns this
*/
proto.anytype.Rpc.Block.ImportMarkdown.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.ImportMarkdown.Response} returns this
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.ImportMarkdown.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Export.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Export.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Export} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Export.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Export}
 */
proto.anytype.Rpc.Block.Export.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Export;
  return proto.anytype.Rpc.Block.Export.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Export} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Export}
 */
proto.anytype.Rpc.Block.Export.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Export.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Export.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Export} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Export.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.Block.Export.Request.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Export.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Export.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Export.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Export.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Export.Request}
 */
proto.anytype.Rpc.Block.Export.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Export.Request;
  return proto.anytype.Rpc.Block.Export.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Export.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Export.Request}
 */
proto.anytype.Rpc.Block.Export.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Export.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Export.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Export.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Export.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.serializeBinaryToWriter
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Export.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Export.Request} returns this
 */
proto.anytype.Rpc.Block.Export.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated model.Block blocks = 2;
 * @return {!Array<!proto.anytype.model.Block>}
 */
proto.anytype.Rpc.Block.Export.Request.prototype.getBlocksList = function() {
  return /** @type{!Array<!proto.anytype.model.Block>} */ (
    jspb.Message.getRepeatedWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block, 2));
};


/**
 * @param {!Array<!proto.anytype.model.Block>} value
 * @return {!proto.anytype.Rpc.Block.Export.Request} returns this
*/
proto.anytype.Rpc.Block.Export.Request.prototype.setBlocksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.anytype.model.Block=} opt_value
 * @param {number=} opt_index
 * @return {!proto.anytype.model.Block}
 */
proto.anytype.Rpc.Block.Export.Request.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.anytype.model.Block, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.Block.Export.Request} returns this
 */
proto.anytype.Rpc.Block.Export.Request.prototype.clearBlocksList = function() {
  return this.setBlocksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Export.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Export.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Export.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Export.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Export.Response.Error.toObject(includeInstance, f),
    path: jspb.Message.getFieldWithDefault(msg, 2, ""),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Export.Response}
 */
proto.anytype.Rpc.Block.Export.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Export.Response;
  return proto.anytype.Rpc.Block.Export.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Export.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Export.Response}
 */
proto.anytype.Rpc.Block.Export.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Export.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Export.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 3:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Export.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Export.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Export.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Export.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Export.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Export.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Export.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Export.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Export.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Export.Response.Error}
 */
proto.anytype.Rpc.Block.Export.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Export.Response.Error;
  return proto.anytype.Rpc.Block.Export.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Export.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Export.Response.Error}
 */
proto.anytype.Rpc.Block.Export.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Export.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Export.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Export.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Export.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Export.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Export.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Export.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Export.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Export.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Export.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Export.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Export.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Export.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Export.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Export.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Export.Response.Error}
 */
proto.anytype.Rpc.Block.Export.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Export.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Export.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Export.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Export.Response} returns this
*/
proto.anytype.Rpc.Block.Export.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Export.Response} returns this
 */
proto.anytype.Rpc.Block.Export.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Export.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Export.Response.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Export.Response} returns this
 */
proto.anytype.Rpc.Block.Export.Response.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ResponseEvent event = 3;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Export.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 3));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Export.Response} returns this
*/
proto.anytype.Rpc.Block.Export.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Export.Response} returns this
 */
proto.anytype.Rpc.Block.Export.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Export.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Upload.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Upload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Upload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Upload.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Upload}
 */
proto.anytype.Rpc.Block.Upload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Upload;
  return proto.anytype.Rpc.Block.Upload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Upload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Upload}
 */
proto.anytype.Rpc.Block.Upload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Upload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Upload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Upload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Upload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Upload.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Upload.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Upload.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Upload.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    filepath: jspb.Message.getFieldWithDefault(msg, 3, ""),
    url: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Upload.Request}
 */
proto.anytype.Rpc.Block.Upload.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Upload.Request;
  return proto.anytype.Rpc.Block.Upload.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Upload.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Upload.Request}
 */
proto.anytype.Rpc.Block.Upload.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilepath(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Upload.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Upload.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Upload.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Upload.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFilepath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Upload.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Upload.Request} returns this
 */
proto.anytype.Rpc.Block.Upload.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Upload.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Upload.Request} returns this
 */
proto.anytype.Rpc.Block.Upload.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string filePath = 3;
 * @return {string}
 */
proto.anytype.Rpc.Block.Upload.Request.prototype.getFilepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Upload.Request} returns this
 */
proto.anytype.Rpc.Block.Upload.Request.prototype.setFilepath = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string url = 4;
 * @return {string}
 */
proto.anytype.Rpc.Block.Upload.Request.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Upload.Request} returns this
 */
proto.anytype.Rpc.Block.Upload.Request.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Upload.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Upload.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Upload.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Upload.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Upload.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Upload.Response}
 */
proto.anytype.Rpc.Block.Upload.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Upload.Response;
  return proto.anytype.Rpc.Block.Upload.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Upload.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Upload.Response}
 */
proto.anytype.Rpc.Block.Upload.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Upload.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Upload.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Upload.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Upload.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Upload.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Upload.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Upload.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Upload.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Upload.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Upload.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Upload.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Upload.Response.Error}
 */
proto.anytype.Rpc.Block.Upload.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Upload.Response.Error;
  return proto.anytype.Rpc.Block.Upload.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Upload.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Upload.Response.Error}
 */
proto.anytype.Rpc.Block.Upload.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Upload.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Upload.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Upload.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Upload.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Upload.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Upload.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Upload.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Upload.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Upload.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Upload.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Upload.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Upload.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Upload.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Upload.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Upload.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Upload.Response.Error}
 */
proto.anytype.Rpc.Block.Upload.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Upload.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Upload.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Upload.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Upload.Response} returns this
*/
proto.anytype.Rpc.Block.Upload.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Upload.Response} returns this
 */
proto.anytype.Rpc.Block.Upload.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Upload.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Upload.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Upload.Response} returns this
*/
proto.anytype.Rpc.Block.Upload.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Upload.Response} returns this
 */
proto.anytype.Rpc.Block.Upload.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Upload.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Download.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Download.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Download} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Download.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Download}
 */
proto.anytype.Rpc.Block.Download.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Download;
  return proto.anytype.Rpc.Block.Download.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Download} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Download}
 */
proto.anytype.Rpc.Block.Download.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Download.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Download.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Download} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Download.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Download.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Download.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Download.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Download.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Download.Request}
 */
proto.anytype.Rpc.Block.Download.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Download.Request;
  return proto.anytype.Rpc.Block.Download.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Download.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Download.Request}
 */
proto.anytype.Rpc.Block.Download.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Download.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Download.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Download.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Download.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Download.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Download.Request} returns this
 */
proto.anytype.Rpc.Block.Download.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Download.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Download.Request} returns this
 */
proto.anytype.Rpc.Block.Download.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Download.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Download.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Download.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Download.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Download.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Download.Response}
 */
proto.anytype.Rpc.Block.Download.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Download.Response;
  return proto.anytype.Rpc.Block.Download.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Download.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Download.Response}
 */
proto.anytype.Rpc.Block.Download.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Download.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Download.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Download.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Download.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Download.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Download.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Download.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Download.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Download.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Download.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Download.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Download.Response.Error}
 */
proto.anytype.Rpc.Block.Download.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Download.Response.Error;
  return proto.anytype.Rpc.Block.Download.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Download.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Download.Response.Error}
 */
proto.anytype.Rpc.Block.Download.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Download.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Download.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Download.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Download.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Download.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Download.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Download.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Download.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Download.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Download.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Download.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Download.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Download.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Download.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Download.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Download.Response.Error}
 */
proto.anytype.Rpc.Block.Download.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Download.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Download.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Download.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Download.Response} returns this
*/
proto.anytype.Rpc.Block.Download.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Download.Response} returns this
 */
proto.anytype.Rpc.Block.Download.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Download.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Download.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Download.Response} returns this
*/
proto.anytype.Rpc.Block.Download.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Download.Response} returns this
 */
proto.anytype.Rpc.Block.Download.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Download.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set}
 */
proto.anytype.Rpc.Block.Set.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set;
  return proto.anytype.Rpc.Block.Set.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set}
 */
proto.anytype.Rpc.Block.Set.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Fields.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Fields.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Fields} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Fields.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Fields}
 */
proto.anytype.Rpc.Block.Set.Fields.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Fields;
  return proto.anytype.Rpc.Block.Set.Fields.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Fields} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Fields}
 */
proto.anytype.Rpc.Block.Set.Fields.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Fields.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Fields.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Fields} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Fields.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Fields.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Fields.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Fields.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Fields.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fields: (f = msg.getFields()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Fields.Request}
 */
proto.anytype.Rpc.Block.Set.Fields.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Fields.Request;
  return proto.anytype.Rpc.Block.Set.Fields.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Fields.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Fields.Request}
 */
proto.anytype.Rpc.Block.Set.Fields.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Fields.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Fields.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Fields.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Fields.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFields();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Fields.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Fields.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Fields.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Fields.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Fields.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Fields.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Struct fields = 3;
 * @return {?proto.google.protobuf.Struct}
 */
proto.anytype.Rpc.Block.Set.Fields.Request.prototype.getFields = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 3));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Fields.Request} returns this
*/
proto.anytype.Rpc.Block.Set.Fields.Request.prototype.setFields = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Fields.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Fields.Request.prototype.clearFields = function() {
  return this.setFields(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Fields.Request.prototype.hasFields = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Fields.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Fields.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Fields.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Fields.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Set.Fields.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Fields.Response}
 */
proto.anytype.Rpc.Block.Set.Fields.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Fields.Response;
  return proto.anytype.Rpc.Block.Set.Fields.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Fields.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Fields.Response}
 */
proto.anytype.Rpc.Block.Set.Fields.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Set.Fields.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Set.Fields.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Fields.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Fields.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Fields.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Fields.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Set.Fields.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Fields.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Fields.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Fields.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Fields.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Fields.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Fields.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Fields.Response.Error;
  return proto.anytype.Rpc.Block.Set.Fields.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Fields.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Fields.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Fields.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Set.Fields.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Fields.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Fields.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Fields.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Fields.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Set.Fields.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Set.Fields.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Set.Fields.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Set.Fields.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Set.Fields.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Set.Fields.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Fields.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Fields.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Fields.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Fields.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Set.Fields.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Fields.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Set.Fields.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Set.Fields.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Set.Fields.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Fields.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Fields.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Fields.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Fields.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Fields.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Set.Fields.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Fields.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Fields.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Fields.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Fields.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Fields.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Details.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Details.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Details} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Details.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Details}
 */
proto.anytype.Rpc.Block.Set.Details.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Details;
  return proto.anytype.Rpc.Block.Set.Details.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Details} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Details}
 */
proto.anytype.Rpc.Block.Set.Details.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Details.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Details.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Details} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Details.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Details.Detail.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Details.Detail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Details.Detail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Details.Detail.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && google_protobuf_struct_pb.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Details.Detail}
 */
proto.anytype.Rpc.Block.Set.Details.Detail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Details.Detail;
  return proto.anytype.Rpc.Block.Set.Details.Detail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Details.Detail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Details.Detail}
 */
proto.anytype.Rpc.Block.Set.Details.Detail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Value;
      reader.readMessage(value,google_protobuf_struct_pb.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Details.Detail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Details.Detail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Details.Detail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Details.Detail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Details.Detail.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Details.Detail} returns this
 */
proto.anytype.Rpc.Block.Set.Details.Detail.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Value value = 2;
 * @return {?proto.google.protobuf.Value}
 */
proto.anytype.Rpc.Block.Set.Details.Detail.prototype.getValue = function() {
  return /** @type{?proto.google.protobuf.Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Value, 2));
};


/**
 * @param {?proto.google.protobuf.Value|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Details.Detail} returns this
*/
proto.anytype.Rpc.Block.Set.Details.Detail.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Details.Detail} returns this
 */
proto.anytype.Rpc.Block.Set.Details.Detail.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Details.Detail.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.Block.Set.Details.Request.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Details.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Details.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Details.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Details.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    detailsList: jspb.Message.toObjectList(msg.getDetailsList(),
    proto.anytype.Rpc.Block.Set.Details.Detail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Details.Request}
 */
proto.anytype.Rpc.Block.Set.Details.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Details.Request;
  return proto.anytype.Rpc.Block.Set.Details.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Details.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Details.Request}
 */
proto.anytype.Rpc.Block.Set.Details.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = new proto.anytype.Rpc.Block.Set.Details.Detail;
      reader.readMessage(value,proto.anytype.Rpc.Block.Set.Details.Detail.deserializeBinaryFromReader);
      msg.addDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Details.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Details.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Details.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Details.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDetailsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.anytype.Rpc.Block.Set.Details.Detail.serializeBinaryToWriter
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Details.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Details.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Details.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Detail details = 2;
 * @return {!Array<!proto.anytype.Rpc.Block.Set.Details.Detail>}
 */
proto.anytype.Rpc.Block.Set.Details.Request.prototype.getDetailsList = function() {
  return /** @type{!Array<!proto.anytype.Rpc.Block.Set.Details.Detail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.anytype.Rpc.Block.Set.Details.Detail, 2));
};


/**
 * @param {!Array<!proto.anytype.Rpc.Block.Set.Details.Detail>} value
 * @return {!proto.anytype.Rpc.Block.Set.Details.Request} returns this
*/
proto.anytype.Rpc.Block.Set.Details.Request.prototype.setDetailsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.anytype.Rpc.Block.Set.Details.Detail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.Block.Set.Details.Detail}
 */
proto.anytype.Rpc.Block.Set.Details.Request.prototype.addDetails = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.anytype.Rpc.Block.Set.Details.Detail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.Block.Set.Details.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Details.Request.prototype.clearDetailsList = function() {
  return this.setDetailsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Details.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Details.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Details.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Details.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Set.Details.Response.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Details.Response}
 */
proto.anytype.Rpc.Block.Set.Details.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Details.Response;
  return proto.anytype.Rpc.Block.Set.Details.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Details.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Details.Response}
 */
proto.anytype.Rpc.Block.Set.Details.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Set.Details.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Set.Details.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Details.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Details.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Details.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Details.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Set.Details.Response.Error.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Details.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Details.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Details.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Details.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Details.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Details.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Details.Response.Error;
  return proto.anytype.Rpc.Block.Set.Details.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Details.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Details.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Details.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Set.Details.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Details.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Details.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Details.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Details.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Set.Details.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Set.Details.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Set.Details.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Set.Details.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Set.Details.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Set.Details.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Details.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Details.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Details.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Details.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Set.Details.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Details.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Set.Details.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Set.Details.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Set.Details.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Details.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Details.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Details.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Details.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Details.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Restrictions.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Restrictions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Restrictions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Restrictions.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Restrictions}
 */
proto.anytype.Rpc.Block.Set.Restrictions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Restrictions;
  return proto.anytype.Rpc.Block.Set.Restrictions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Restrictions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Restrictions}
 */
proto.anytype.Rpc.Block.Set.Restrictions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Restrictions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Restrictions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Restrictions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Restrictions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Restrictions.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Restrictions.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Restrictions.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    restrictions: (f = msg.getRestrictions()) && vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Restrictions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Restrictions.Request}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Restrictions.Request;
  return proto.anytype.Rpc.Block.Set.Restrictions.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Restrictions.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Restrictions.Request}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Restrictions;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Restrictions.deserializeBinaryFromReader);
      msg.setRestrictions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Restrictions.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Restrictions.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Restrictions.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRestrictions();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Restrictions.serializeBinaryToWriter
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Restrictions.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Restrictions.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Restrictions.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Restrictions.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional model.Block.Restrictions restrictions = 3;
 * @return {?proto.anytype.model.Block.Restrictions}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Request.prototype.getRestrictions = function() {
  return /** @type{?proto.anytype.model.Block.Restrictions} */ (
    jspb.Message.getWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Restrictions, 3));
};


/**
 * @param {?proto.anytype.model.Block.Restrictions|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Restrictions.Request} returns this
*/
proto.anytype.Rpc.Block.Set.Restrictions.Request.prototype.setRestrictions = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Restrictions.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Restrictions.Request.prototype.clearRestrictions = function() {
  return this.setRestrictions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Request.prototype.hasRestrictions = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Restrictions.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Restrictions.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Restrictions.Response}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Restrictions.Response;
  return proto.anytype.Rpc.Block.Set.Restrictions.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Restrictions.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Restrictions.Response}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Set.Restrictions.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Restrictions.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Restrictions.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Restrictions.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Restrictions.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Restrictions.Response.Error;
  return proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Restrictions.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Restrictions.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Restrictions.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Set.Restrictions.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Restrictions.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Set.Restrictions.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Set.Restrictions.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Set.Restrictions.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Set.Restrictions.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Restrictions.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Restrictions.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Restrictions.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Restrictions.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Restrictions.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Restrictions.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Restrictions.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Page.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Page.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Page} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Page.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Page}
 */
proto.anytype.Rpc.Block.Set.Page.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Page;
  return proto.anytype.Rpc.Block.Set.Page.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Page} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Page}
 */
proto.anytype.Rpc.Block.Set.Page.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Page.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Page.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Page} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Page.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Page.IsArchived.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Page.IsArchived} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Page.IsArchived}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Page.IsArchived;
  return proto.anytype.Rpc.Block.Set.Page.IsArchived.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Page.IsArchived} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Page.IsArchived}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Page.IsArchived.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Page.IsArchived} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Page.IsArchived.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isarchived: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Request}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Page.IsArchived.Request;
  return proto.anytype.Rpc.Block.Set.Page.IsArchived.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Request}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsarchived(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Page.IsArchived.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsarchived();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool isArchived = 3;
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Request.prototype.getIsarchived = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Request.prototype.setIsarchived = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Response}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Page.IsArchived.Response;
  return proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Response}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error;
  return proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Page.IsArchived.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Page.IsArchived.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Text.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Text.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Text} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Text}
 */
proto.anytype.Rpc.Block.Set.Text.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Text;
  return proto.anytype.Rpc.Block.Set.Text.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Text} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Text}
 */
proto.anytype.Rpc.Block.Set.Text.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Text.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Text.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Text} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Text.Text.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Text.Text.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Text.Text} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Text.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Text}
 */
proto.anytype.Rpc.Block.Set.Text.Text.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Text.Text;
  return proto.anytype.Rpc.Block.Set.Text.Text.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Text} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Text}
 */
proto.anytype.Rpc.Block.Set.Text.Text.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Text.Text.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Text.Text.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Text} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Text.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Text.Text.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Text.Text.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Text.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    text: jspb.Message.getFieldWithDefault(msg, 3, ""),
    marks: (f = msg.getMarks()) && vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Content.Text.Marks.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Text.Request}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Text.Text.Request;
  return proto.anytype.Rpc.Block.Set.Text.Text.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Text.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Text.Request}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 4:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Content.Text.Marks;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Content.Text.Marks.deserializeBinaryFromReader);
      msg.setMarks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Text.Text.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Text.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Text.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMarks();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Content.Text.Marks.serializeBinaryToWriter
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Text.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Text.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Text.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Text.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string text = 3;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Request.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Text.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Text.Request.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional model.Block.Content.Text.Marks marks = 4;
 * @return {?proto.anytype.model.Block.Content.Text.Marks}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Request.prototype.getMarks = function() {
  return /** @type{?proto.anytype.model.Block.Content.Text.Marks} */ (
    jspb.Message.getWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Content.Text.Marks, 4));
};


/**
 * @param {?proto.anytype.model.Block.Content.Text.Marks|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Text.Request} returns this
*/
proto.anytype.Rpc.Block.Set.Text.Text.Request.prototype.setMarks = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Text.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Text.Request.prototype.clearMarks = function() {
  return this.setMarks(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Request.prototype.hasMarks = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Text.Text.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Text.Text.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Text.Response}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Text.Text.Response;
  return proto.anytype.Rpc.Block.Set.Text.Text.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Text.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Text.Response}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Set.Text.Text.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Text.Text.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Text.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Text.Text.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Text.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Text.Text.Response.Error;
  return proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Text.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Text.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Text.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Text.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Text.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Set.Text.Text.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Set.Text.Text.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Set.Text.Text.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Set.Text.Text.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Text.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Text.Text.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Text.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Text.Text.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Text.Color.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Text.Color.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Text.Color} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Color.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Color}
 */
proto.anytype.Rpc.Block.Set.Text.Color.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Text.Color;
  return proto.anytype.Rpc.Block.Set.Text.Color.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Color} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Color}
 */
proto.anytype.Rpc.Block.Set.Text.Color.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Text.Color.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Text.Color.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Color} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Color.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Text.Color.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Text.Color.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Color.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    color: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Color.Request}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Text.Color.Request;
  return proto.anytype.Rpc.Block.Set.Text.Color.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Color.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Color.Request}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Text.Color.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Color.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Color.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Color.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Color.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Color.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Color.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string color = 3;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Request.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Color.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Color.Request.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Text.Color.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Text.Color.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Color.Response}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Text.Color.Response;
  return proto.anytype.Rpc.Block.Set.Text.Color.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Color.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Color.Response}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Set.Text.Color.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Text.Color.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Color.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Text.Color.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Color.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Text.Color.Response.Error;
  return proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Color.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Color.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Color.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Color.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Color.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Set.Text.Color.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Set.Text.Color.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Set.Text.Color.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Set.Text.Color.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Color.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Text.Color.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Color.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Color.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Text.Color.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Color.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Text.Color.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Text.Style.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Text.Style.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Text.Style} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Style.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Style}
 */
proto.anytype.Rpc.Block.Set.Text.Style.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Text.Style;
  return proto.anytype.Rpc.Block.Set.Text.Style.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Style} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Style}
 */
proto.anytype.Rpc.Block.Set.Text.Style.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Text.Style.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Text.Style.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Style} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Style.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Text.Style.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Text.Style.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Style.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    style: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Style.Request}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Text.Style.Request;
  return proto.anytype.Rpc.Block.Set.Text.Style.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Style.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Style.Request}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = /** @type {!proto.anytype.model.Block.Content.Text.Style} */ (reader.readEnum());
      msg.setStyle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Text.Style.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Style.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Style.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStyle();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Style.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Style.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Style.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Style.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional model.Block.Content.Text.Style style = 3;
 * @return {!proto.anytype.model.Block.Content.Text.Style}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Request.prototype.getStyle = function() {
  return /** @type {!proto.anytype.model.Block.Content.Text.Style} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.anytype.model.Block.Content.Text.Style} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Style.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Style.Request.prototype.setStyle = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Text.Style.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Text.Style.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Style.Response}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Text.Style.Response;
  return proto.anytype.Rpc.Block.Set.Text.Style.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Style.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Style.Response}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Set.Text.Style.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Text.Style.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Style.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Text.Style.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Style.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Text.Style.Response.Error;
  return proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Style.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Style.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Style.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Style.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Style.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Set.Text.Style.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Set.Text.Style.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Set.Text.Style.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Set.Text.Style.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Style.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Text.Style.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Style.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Style.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Text.Style.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Style.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Text.Style.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Text.Checked.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Text.Checked} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Checked.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Checked}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Text.Checked;
  return proto.anytype.Rpc.Block.Set.Text.Checked.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Checked} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Checked}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Text.Checked.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Checked} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Checked.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Text.Checked.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Text.Checked.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    checked: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Checked.Request}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Text.Checked.Request;
  return proto.anytype.Rpc.Block.Set.Text.Checked.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Checked.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Checked.Request}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setChecked(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Text.Checked.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Checked.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChecked();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Checked.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Checked.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool checked = 3;
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Request.prototype.getChecked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Checked.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Request.prototype.setChecked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Text.Checked.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Text.Checked.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Checked.Response}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Text.Checked.Response;
  return proto.anytype.Rpc.Block.Set.Text.Checked.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Checked.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Checked.Response}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Text.Checked.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Checked.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error;
  return proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Set.Text.Checked.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Checked.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Text.Checked.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Checked.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Text.Checked.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Text.Checked.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Text.Checked.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Text.Checked.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.File.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.File.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.File} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.File.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.File}
 */
proto.anytype.Rpc.Block.Set.File.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.File;
  return proto.anytype.Rpc.Block.Set.File.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.File} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.File}
 */
proto.anytype.Rpc.Block.Set.File.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.File.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.File.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.File} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.File.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.File.Name.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.File.Name.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.File.Name} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.File.Name.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.File.Name}
 */
proto.anytype.Rpc.Block.Set.File.Name.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.File.Name;
  return proto.anytype.Rpc.Block.Set.File.Name.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.File.Name} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.File.Name}
 */
proto.anytype.Rpc.Block.Set.File.Name.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.File.Name.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.File.Name.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.File.Name} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.File.Name.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.File.Name.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.File.Name.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.File.Name.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.File.Name.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.File.Name.Request}
 */
proto.anytype.Rpc.Block.Set.File.Name.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.File.Name.Request;
  return proto.anytype.Rpc.Block.Set.File.Name.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.File.Name.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.File.Name.Request}
 */
proto.anytype.Rpc.Block.Set.File.Name.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.File.Name.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.File.Name.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.File.Name.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.File.Name.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.File.Name.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.File.Name.Request} returns this
 */
proto.anytype.Rpc.Block.Set.File.Name.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.File.Name.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.File.Name.Request} returns this
 */
proto.anytype.Rpc.Block.Set.File.Name.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.File.Name.Request.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.File.Name.Request} returns this
 */
proto.anytype.Rpc.Block.Set.File.Name.Request.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.File.Name.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.File.Name.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Set.File.Name.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.File.Name.Response}
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.File.Name.Response;
  return proto.anytype.Rpc.Block.Set.File.Name.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.File.Name.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.File.Name.Response}
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Set.File.Name.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Set.File.Name.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.File.Name.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.File.Name.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Set.File.Name.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.File.Name.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.File.Name.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.File.Name.Response.Error}
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.File.Name.Response.Error;
  return proto.anytype.Rpc.Block.Set.File.Name.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.File.Name.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.File.Name.Response.Error}
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Set.File.Name.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.File.Name.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.File.Name.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Set.File.Name.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Set.File.Name.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Set.File.Name.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Set.File.Name.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.File.Name.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Set.File.Name.Response.Error}
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Set.File.Name.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Set.File.Name.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Set.File.Name.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.File.Name.Response} returns this
*/
proto.anytype.Rpc.Block.Set.File.Name.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.File.Name.Response} returns this
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.File.Name.Response} returns this
*/
proto.anytype.Rpc.Block.Set.File.Name.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.File.Name.Response} returns this
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.File.Name.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Image.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Image}
 */
proto.anytype.Rpc.Block.Set.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Image;
  return proto.anytype.Rpc.Block.Set.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Image}
 */
proto.anytype.Rpc.Block.Set.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Image.Name.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Image.Name.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Image.Name} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Image.Name.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Image.Name}
 */
proto.anytype.Rpc.Block.Set.Image.Name.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Image.Name;
  return proto.anytype.Rpc.Block.Set.Image.Name.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Image.Name} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Image.Name}
 */
proto.anytype.Rpc.Block.Set.Image.Name.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Image.Name.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Image.Name.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Image.Name} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Image.Name.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Image.Name.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Image.Name.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Image.Name.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Image.Name.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Image.Name.Request}
 */
proto.anytype.Rpc.Block.Set.Image.Name.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Image.Name.Request;
  return proto.anytype.Rpc.Block.Set.Image.Name.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Image.Name.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Image.Name.Request}
 */
proto.anytype.Rpc.Block.Set.Image.Name.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Image.Name.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Image.Name.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Image.Name.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Image.Name.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Image.Name.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Image.Name.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Image.Name.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Image.Name.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Image.Name.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Image.Name.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Image.Name.Request.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Image.Name.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Image.Name.Request.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Image.Name.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Image.Name.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Image.Name.Response}
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Image.Name.Response;
  return proto.anytype.Rpc.Block.Set.Image.Name.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Image.Name.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Image.Name.Response}
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Set.Image.Name.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Image.Name.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Image.Name.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Image.Name.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Image.Name.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Image.Name.Response.Error;
  return proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Image.Name.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Image.Name.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Image.Name.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Set.Image.Name.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Image.Name.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Set.Image.Name.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Set.Image.Name.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Set.Image.Name.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Set.Image.Name.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Image.Name.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Image.Name.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Image.Name.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Image.Name.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Image.Width.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Image.Width.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Image.Width} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Image.Width.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Image.Width}
 */
proto.anytype.Rpc.Block.Set.Image.Width.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Image.Width;
  return proto.anytype.Rpc.Block.Set.Image.Width.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Image.Width} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Image.Width}
 */
proto.anytype.Rpc.Block.Set.Image.Width.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Image.Width.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Image.Width.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Image.Width} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Image.Width.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Image.Width.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Image.Width.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Image.Width.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Image.Width.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    width: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Image.Width.Request}
 */
proto.anytype.Rpc.Block.Set.Image.Width.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Image.Width.Request;
  return proto.anytype.Rpc.Block.Set.Image.Width.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Image.Width.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Image.Width.Request}
 */
proto.anytype.Rpc.Block.Set.Image.Width.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Image.Width.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Image.Width.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Image.Width.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Image.Width.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Image.Width.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Image.Width.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Image.Width.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Image.Width.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Image.Width.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Image.Width.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 width = 3;
 * @return {number}
 */
proto.anytype.Rpc.Block.Set.Image.Width.Request.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.anytype.Rpc.Block.Set.Image.Width.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Image.Width.Request.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Image.Width.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Image.Width.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Image.Width.Response}
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Image.Width.Response;
  return proto.anytype.Rpc.Block.Set.Image.Width.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Image.Width.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Image.Width.Response}
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Set.Image.Width.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Image.Width.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Image.Width.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Image.Width.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Image.Width.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Image.Width.Response.Error;
  return proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Image.Width.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Image.Width.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Image.Width.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Set.Image.Width.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Image.Width.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Set.Image.Width.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Set.Image.Width.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Set.Image.Width.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Set.Image.Width.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Image.Width.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Image.Width.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Image.Width.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Image.Width.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Video.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Video.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Video} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Video.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Video}
 */
proto.anytype.Rpc.Block.Set.Video.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Video;
  return proto.anytype.Rpc.Block.Set.Video.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Video} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Video}
 */
proto.anytype.Rpc.Block.Set.Video.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Video.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Video.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Video} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Video.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Video.Name.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Video.Name.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Video.Name} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Video.Name.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Video.Name}
 */
proto.anytype.Rpc.Block.Set.Video.Name.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Video.Name;
  return proto.anytype.Rpc.Block.Set.Video.Name.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Video.Name} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Video.Name}
 */
proto.anytype.Rpc.Block.Set.Video.Name.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Video.Name.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Video.Name.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Video.Name} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Video.Name.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Video.Name.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Video.Name.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Video.Name.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Video.Name.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Video.Name.Request}
 */
proto.anytype.Rpc.Block.Set.Video.Name.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Video.Name.Request;
  return proto.anytype.Rpc.Block.Set.Video.Name.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Video.Name.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Video.Name.Request}
 */
proto.anytype.Rpc.Block.Set.Video.Name.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Video.Name.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Video.Name.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Video.Name.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Video.Name.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Video.Name.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Video.Name.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Video.Name.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Video.Name.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Video.Name.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Video.Name.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Video.Name.Request.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Video.Name.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Video.Name.Request.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Video.Name.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Video.Name.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Video.Name.Response}
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Video.Name.Response;
  return proto.anytype.Rpc.Block.Set.Video.Name.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Video.Name.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Video.Name.Response}
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Set.Video.Name.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Video.Name.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Video.Name.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Video.Name.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Video.Name.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Video.Name.Response.Error;
  return proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Video.Name.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Video.Name.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Video.Name.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Set.Video.Name.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Video.Name.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Set.Video.Name.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Set.Video.Name.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Set.Video.Name.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Set.Video.Name.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Video.Name.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Video.Name.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Video.Name.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Video.Name.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Video.Width.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Video.Width.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Video.Width} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Video.Width.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Video.Width}
 */
proto.anytype.Rpc.Block.Set.Video.Width.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Video.Width;
  return proto.anytype.Rpc.Block.Set.Video.Width.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Video.Width} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Video.Width}
 */
proto.anytype.Rpc.Block.Set.Video.Width.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Video.Width.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Video.Width.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Video.Width} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Video.Width.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Video.Width.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Video.Width.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Video.Width.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Video.Width.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    width: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Video.Width.Request}
 */
proto.anytype.Rpc.Block.Set.Video.Width.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Video.Width.Request;
  return proto.anytype.Rpc.Block.Set.Video.Width.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Video.Width.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Video.Width.Request}
 */
proto.anytype.Rpc.Block.Set.Video.Width.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Video.Width.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Video.Width.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Video.Width.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Video.Width.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Video.Width.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Video.Width.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Video.Width.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Video.Width.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Video.Width.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Video.Width.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 width = 3;
 * @return {number}
 */
proto.anytype.Rpc.Block.Set.Video.Width.Request.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.anytype.Rpc.Block.Set.Video.Width.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Video.Width.Request.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Video.Width.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Video.Width.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Video.Width.Response}
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Video.Width.Response;
  return proto.anytype.Rpc.Block.Set.Video.Width.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Video.Width.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Video.Width.Response}
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Set.Video.Width.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Video.Width.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Video.Width.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Video.Width.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Video.Width.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Video.Width.Response.Error;
  return proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Video.Width.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Video.Width.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Video.Width.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Set.Video.Width.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Video.Width.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Set.Video.Width.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Set.Video.Width.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Set.Video.Width.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Set.Video.Width.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Video.Width.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Video.Width.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Video.Width.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Video.Width.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Link.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Link.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Link} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Link.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Link}
 */
proto.anytype.Rpc.Block.Set.Link.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Link;
  return proto.anytype.Rpc.Block.Set.Link.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Link} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Link}
 */
proto.anytype.Rpc.Block.Set.Link.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Link.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Link.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Link} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Link.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Link.TargetBlockId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Link.TargetBlockId;
  return proto.anytype.Rpc.Block.Set.Link.TargetBlockId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Link.TargetBlockId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    targetblockid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request;
  return proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetblockid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTargetblockid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string targetBlockId = 3;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request.prototype.getTargetblockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Request.prototype.setTargetblockid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response;
  return proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error;
  return proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Link.TargetBlockId.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Dataview.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Dataview.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Dataview} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Dataview.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview}
 */
proto.anytype.Rpc.Block.Set.Dataview.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Dataview;
  return proto.anytype.Rpc.Block.Set.Dataview.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Dataview} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview}
 */
proto.anytype.Rpc.Block.Set.Dataview.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Dataview.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Dataview.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Dataview} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Dataview.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Dataview.View.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.View} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Dataview.View.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.View}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Dataview.View;
  return proto.anytype.Rpc.Block.Set.Dataview.View.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.View} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.View}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Dataview.View.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.View} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Dataview.View.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Dataview.View.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.View.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    viewid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    view: (f = msg.getView()) && vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Content.Dataview.View.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.View.Request}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Dataview.View.Request;
  return proto.anytype.Rpc.Block.Set.Dataview.View.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.View.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.View.Request}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setViewid(value);
      break;
    case 4:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Content.Dataview.View;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Content.Dataview.View.deserializeBinaryFromReader);
      msg.setView(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Dataview.View.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.View.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getViewid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getView();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Content.Dataview.View.serializeBinaryToWriter
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.View.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.View.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string viewId = 3;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Request.prototype.getViewid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.View.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Request.prototype.setViewid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional model.Block.Content.Dataview.View view = 4;
 * @return {?proto.anytype.model.Block.Content.Dataview.View}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Request.prototype.getView = function() {
  return /** @type{?proto.anytype.model.Block.Content.Dataview.View} */ (
    jspb.Message.getWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Content.Dataview.View, 4));
};


/**
 * @param {?proto.anytype.model.Block.Content.Dataview.View|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.View.Request} returns this
*/
proto.anytype.Rpc.Block.Set.Dataview.View.Request.prototype.setView = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.View.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Request.prototype.clearView = function() {
  return this.setView(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Request.prototype.hasView = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Dataview.View.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.View.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.View.Response}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Dataview.View.Response;
  return proto.anytype.Rpc.Block.Set.Dataview.View.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.View.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.View.Response}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Dataview.View.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.View.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error;
  return proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Set.Dataview.View.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.View.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Dataview.View.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.View.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.View.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Dataview.View.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.View.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Dataview.View.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Dataview.ActiveView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Dataview.ActiveView;
  return proto.anytype.Rpc.Block.Set.Dataview.ActiveView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Dataview.ActiveView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    viewid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    offset: jspb.Message.getFieldWithDefault(msg, 4, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request;
  return proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setViewid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getViewid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string viewId = 3;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request.prototype.getViewid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request.prototype.setViewid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 offset = 4;
 * @return {number}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 limit = 5;
 * @return {number}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request} returns this
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Request.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response;
  return proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error;
  return proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response} returns this
*/
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response} returns this
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Set.Dataview.ActiveView.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Bookmark.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Bookmark.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Bookmark} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Bookmark.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Bookmark}
 */
proto.anytype.Rpc.Block.Bookmark.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Bookmark;
  return proto.anytype.Rpc.Block.Bookmark.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Bookmark} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Bookmark}
 */
proto.anytype.Rpc.Block.Bookmark.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Bookmark.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Bookmark.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Bookmark} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Bookmark.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Bookmark.Fetch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Bookmark.Fetch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Bookmark.Fetch}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Bookmark.Fetch;
  return proto.anytype.Rpc.Block.Bookmark.Fetch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Bookmark.Fetch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Bookmark.Fetch}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Bookmark.Fetch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Bookmark.Fetch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Bookmark.Fetch.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Bookmark.Fetch.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    url: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Bookmark.Fetch.Request}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Bookmark.Fetch.Request;
  return proto.anytype.Rpc.Block.Bookmark.Fetch.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Bookmark.Fetch.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Bookmark.Fetch.Request}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Bookmark.Fetch.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Bookmark.Fetch.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Bookmark.Fetch.Request} returns this
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Bookmark.Fetch.Request} returns this
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string url = 3;
 * @return {string}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Request.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Bookmark.Fetch.Request} returns this
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Request.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Bookmark.Fetch.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Bookmark.Fetch.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Bookmark.Fetch.Response}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Bookmark.Fetch.Response;
  return proto.anytype.Rpc.Block.Bookmark.Fetch.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Bookmark.Fetch.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Bookmark.Fetch.Response}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Bookmark.Fetch.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Bookmark.Fetch.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error;
  return proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Bookmark.Fetch.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Bookmark.Fetch.Response} returns this
*/
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Bookmark.Fetch.Response} returns this
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Bookmark.Fetch.Response} returns this
*/
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Bookmark.Fetch.Response} returns this
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Bookmark.Fetch.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Bookmark.CreateAndFetch;
  return proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    targetid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    position: jspb.Message.getFieldWithDefault(msg, 3, 0),
    url: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request;
  return proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetid(value);
      break;
    case 3:
      var value = /** @type {!proto.anytype.model.Block.Position} */ (reader.readEnum());
      msg.setPosition(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTargetid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request} returns this
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string targetId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request.prototype.getTargetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request} returns this
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request.prototype.setTargetid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional model.Block.Position position = 3;
 * @return {!proto.anytype.model.Block.Position}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request.prototype.getPosition = function() {
  return /** @type {!proto.anytype.model.Block.Position} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.anytype.model.Block.Position} value
 * @return {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request} returns this
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request.prototype.setPosition = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string url = 4;
 * @return {string}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request} returns this
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Request.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.toObject(includeInstance, f),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response;
  return proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error;
  return proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response} returns this
*/
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response} returns this
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response} returns this
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ResponseEvent event = 3;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 3));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response} returns this
*/
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response} returns this
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Bookmark.CreateAndFetch.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.File.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.File.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.File} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.File.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.File}
 */
proto.anytype.Rpc.Block.File.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.File;
  return proto.anytype.Rpc.Block.File.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.File} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.File}
 */
proto.anytype.Rpc.Block.File.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.File.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.File.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.File} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.File.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.File.CreateAndUpload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.File.CreateAndUpload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.File.CreateAndUpload;
  return proto.anytype.Rpc.Block.File.CreateAndUpload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.File.CreateAndUpload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.File.CreateAndUpload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.File.CreateAndUpload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.File.CreateAndUpload.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.File.CreateAndUpload.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    targetid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    position: jspb.Message.getFieldWithDefault(msg, 3, 0),
    url: jspb.Message.getFieldWithDefault(msg, 4, ""),
    localpath: jspb.Message.getFieldWithDefault(msg, 5, ""),
    filetype: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload.Request}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.File.CreateAndUpload.Request;
  return proto.anytype.Rpc.Block.File.CreateAndUpload.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.File.CreateAndUpload.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload.Request}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetid(value);
      break;
    case 3:
      var value = /** @type {!proto.anytype.model.Block.Position} */ (reader.readEnum());
      msg.setPosition(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalpath(value);
      break;
    case 6:
      var value = /** @type {!proto.anytype.model.Block.Content.File.Type} */ (reader.readEnum());
      msg.setFiletype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.File.CreateAndUpload.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.File.CreateAndUpload.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTargetid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLocalpath();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFiletype();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload.Request} returns this
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string targetId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Request.prototype.getTargetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload.Request} returns this
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Request.prototype.setTargetid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional model.Block.Position position = 3;
 * @return {!proto.anytype.model.Block.Position}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Request.prototype.getPosition = function() {
  return /** @type {!proto.anytype.model.Block.Position} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.anytype.model.Block.Position} value
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload.Request} returns this
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Request.prototype.setPosition = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string url = 4;
 * @return {string}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Request.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload.Request} returns this
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Request.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string localPath = 5;
 * @return {string}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Request.prototype.getLocalpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload.Request} returns this
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Request.prototype.setLocalpath = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional model.Block.Content.File.Type fileType = 6;
 * @return {!proto.anytype.model.Block.Content.File.Type}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Request.prototype.getFiletype = function() {
  return /** @type {!proto.anytype.model.Block.Content.File.Type} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.anytype.model.Block.Content.File.Type} value
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload.Request} returns this
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Request.prototype.setFiletype = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.File.CreateAndUpload.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.File.CreateAndUpload.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.toObject(includeInstance, f),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload.Response}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.File.CreateAndUpload.Response;
  return proto.anytype.Rpc.Block.File.CreateAndUpload.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.File.CreateAndUpload.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload.Response}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.File.CreateAndUpload.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.File.CreateAndUpload.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error;
  return proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.Code}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error} returns this
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error} returns this
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.File.CreateAndUpload.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload.Response} returns this
*/
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload.Response} returns this
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload.Response} returns this
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ResponseEvent event = 3;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 3));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload.Response} returns this
*/
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.File.CreateAndUpload.Response} returns this
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.File.CreateAndUpload.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Get.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Get.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Get} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Get.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Get}
 */
proto.anytype.Rpc.Block.Get.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Get;
  return proto.anytype.Rpc.Block.Get.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Get} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Get}
 */
proto.anytype.Rpc.Block.Get.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Get.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Get.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Get} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Get.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Get.Marks.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Get.Marks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Get.Marks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Get.Marks.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Get.Marks}
 */
proto.anytype.Rpc.Block.Get.Marks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Get.Marks;
  return proto.anytype.Rpc.Block.Get.Marks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Get.Marks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Get.Marks}
 */
proto.anytype.Rpc.Block.Get.Marks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Get.Marks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Get.Marks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Get.Marks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Get.Marks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Get.Marks.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Get.Marks.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Get.Marks.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Get.Marks.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    range: (f = msg.getRange()) && vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Get.Marks.Request}
 */
proto.anytype.Rpc.Block.Get.Marks.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Get.Marks.Request;
  return proto.anytype.Rpc.Block.Get.Marks.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Get.Marks.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Get.Marks.Request}
 */
proto.anytype.Rpc.Block.Get.Marks.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range.deserializeBinaryFromReader);
      msg.setRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Get.Marks.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Get.Marks.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Get.Marks.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Get.Marks.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRange();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range.serializeBinaryToWriter
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Get.Marks.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Get.Marks.Request} returns this
 */
proto.anytype.Rpc.Block.Get.Marks.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Get.Marks.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Get.Marks.Request} returns this
 */
proto.anytype.Rpc.Block.Get.Marks.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional model.Range range = 3;
 * @return {?proto.anytype.model.Range}
 */
proto.anytype.Rpc.Block.Get.Marks.Request.prototype.getRange = function() {
  return /** @type{?proto.anytype.model.Range} */ (
    jspb.Message.getWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Range, 3));
};


/**
 * @param {?proto.anytype.model.Range|undefined} value
 * @return {!proto.anytype.Rpc.Block.Get.Marks.Request} returns this
*/
proto.anytype.Rpc.Block.Get.Marks.Request.prototype.setRange = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Get.Marks.Request} returns this
 */
proto.anytype.Rpc.Block.Get.Marks.Request.prototype.clearRange = function() {
  return this.setRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Get.Marks.Request.prototype.hasRange = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Get.Marks.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Get.Marks.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Get.Marks.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Get.Marks.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Get.Marks.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Get.Marks.Response}
 */
proto.anytype.Rpc.Block.Get.Marks.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Get.Marks.Response;
  return proto.anytype.Rpc.Block.Get.Marks.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Get.Marks.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Get.Marks.Response}
 */
proto.anytype.Rpc.Block.Get.Marks.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Get.Marks.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Get.Marks.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Get.Marks.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Get.Marks.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Get.Marks.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Get.Marks.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Get.Marks.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Get.Marks.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Get.Marks.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Get.Marks.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Get.Marks.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Get.Marks.Response.Error}
 */
proto.anytype.Rpc.Block.Get.Marks.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Get.Marks.Response.Error;
  return proto.anytype.Rpc.Block.Get.Marks.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Get.Marks.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Get.Marks.Response.Error}
 */
proto.anytype.Rpc.Block.Get.Marks.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Get.Marks.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Get.Marks.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Get.Marks.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Get.Marks.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Get.Marks.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Get.Marks.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Get.Marks.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Get.Marks.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Get.Marks.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Get.Marks.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Get.Marks.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Get.Marks.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Get.Marks.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Get.Marks.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Get.Marks.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Get.Marks.Response.Error}
 */
proto.anytype.Rpc.Block.Get.Marks.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Get.Marks.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Get.Marks.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Get.Marks.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Get.Marks.Response} returns this
*/
proto.anytype.Rpc.Block.Get.Marks.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Get.Marks.Response} returns this
 */
proto.anytype.Rpc.Block.Get.Marks.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Get.Marks.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Get.Marks.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Get.Marks.Response} returns this
*/
proto.anytype.Rpc.Block.Get.Marks.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Get.Marks.Response} returns this
 */
proto.anytype.Rpc.Block.Get.Marks.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Get.Marks.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Undo.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Undo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Undo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Undo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Undo}
 */
proto.anytype.Rpc.Block.Undo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Undo;
  return proto.anytype.Rpc.Block.Undo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Undo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Undo}
 */
proto.anytype.Rpc.Block.Undo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Undo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Undo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Undo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Undo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Undo.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Undo.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Undo.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Undo.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Undo.Request}
 */
proto.anytype.Rpc.Block.Undo.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Undo.Request;
  return proto.anytype.Rpc.Block.Undo.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Undo.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Undo.Request}
 */
proto.anytype.Rpc.Block.Undo.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Undo.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Undo.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Undo.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Undo.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Undo.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Undo.Request} returns this
 */
proto.anytype.Rpc.Block.Undo.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Undo.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Undo.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Undo.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Undo.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Undo.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Undo.Response}
 */
proto.anytype.Rpc.Block.Undo.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Undo.Response;
  return proto.anytype.Rpc.Block.Undo.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Undo.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Undo.Response}
 */
proto.anytype.Rpc.Block.Undo.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Undo.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Undo.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Undo.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Undo.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Undo.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Undo.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Undo.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Undo.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Undo.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Undo.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Undo.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Undo.Response.Error}
 */
proto.anytype.Rpc.Block.Undo.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Undo.Response.Error;
  return proto.anytype.Rpc.Block.Undo.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Undo.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Undo.Response.Error}
 */
proto.anytype.Rpc.Block.Undo.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Undo.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Undo.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Undo.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Undo.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Undo.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Undo.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2,
  CAN_NOT_MOVE: 3
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Undo.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Undo.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Undo.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Undo.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Undo.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Undo.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Undo.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Undo.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Undo.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Undo.Response.Error}
 */
proto.anytype.Rpc.Block.Undo.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Undo.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Undo.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Undo.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Undo.Response} returns this
*/
proto.anytype.Rpc.Block.Undo.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Undo.Response} returns this
 */
proto.anytype.Rpc.Block.Undo.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Undo.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Undo.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Undo.Response} returns this
*/
proto.anytype.Rpc.Block.Undo.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Undo.Response} returns this
 */
proto.anytype.Rpc.Block.Undo.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Undo.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Redo.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Redo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Redo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Redo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Redo}
 */
proto.anytype.Rpc.Block.Redo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Redo;
  return proto.anytype.Rpc.Block.Redo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Redo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Redo}
 */
proto.anytype.Rpc.Block.Redo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Redo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Redo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Redo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Redo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Redo.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Redo.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Redo.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Redo.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Redo.Request}
 */
proto.anytype.Rpc.Block.Redo.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Redo.Request;
  return proto.anytype.Rpc.Block.Redo.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Redo.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Redo.Request}
 */
proto.anytype.Rpc.Block.Redo.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Redo.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Redo.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Redo.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Redo.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Redo.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Redo.Request} returns this
 */
proto.anytype.Rpc.Block.Redo.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Redo.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Redo.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Redo.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Redo.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Redo.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Redo.Response}
 */
proto.anytype.Rpc.Block.Redo.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Redo.Response;
  return proto.anytype.Rpc.Block.Redo.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Redo.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Redo.Response}
 */
proto.anytype.Rpc.Block.Redo.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Redo.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Redo.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Redo.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Redo.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Redo.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Redo.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Redo.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Redo.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Redo.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Redo.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Redo.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Redo.Response.Error}
 */
proto.anytype.Rpc.Block.Redo.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Redo.Response.Error;
  return proto.anytype.Rpc.Block.Redo.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Redo.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Redo.Response.Error}
 */
proto.anytype.Rpc.Block.Redo.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Redo.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Redo.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Redo.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Redo.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Redo.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Redo.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2,
  CAN_NOT_MOVE: 3
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Redo.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Redo.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Redo.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Redo.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Redo.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Redo.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Redo.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Redo.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Redo.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Redo.Response.Error}
 */
proto.anytype.Rpc.Block.Redo.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Redo.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Redo.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Redo.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Redo.Response} returns this
*/
proto.anytype.Rpc.Block.Redo.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Redo.Response} returns this
 */
proto.anytype.Rpc.Block.Redo.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Redo.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Redo.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Redo.Response} returns this
*/
proto.anytype.Rpc.Block.Redo.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Redo.Response} returns this
 */
proto.anytype.Rpc.Block.Redo.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Redo.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Open.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Open.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Open} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Open.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Open}
 */
proto.anytype.Rpc.Block.Open.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Open;
  return proto.anytype.Rpc.Block.Open.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Open} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Open}
 */
proto.anytype.Rpc.Block.Open.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Open.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Open.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Open} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Open.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Open.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Open.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Open.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Open.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Open.Request}
 */
proto.anytype.Rpc.Block.Open.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Open.Request;
  return proto.anytype.Rpc.Block.Open.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Open.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Open.Request}
 */
proto.anytype.Rpc.Block.Open.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Open.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Open.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Open.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Open.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Open.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Open.Request} returns this
 */
proto.anytype.Rpc.Block.Open.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Open.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Open.Request} returns this
 */
proto.anytype.Rpc.Block.Open.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Open.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Open.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Open.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Open.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Open.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Open.Response}
 */
proto.anytype.Rpc.Block.Open.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Open.Response;
  return proto.anytype.Rpc.Block.Open.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Open.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Open.Response}
 */
proto.anytype.Rpc.Block.Open.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Open.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Open.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Open.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Open.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Open.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Open.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Open.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Open.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Open.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Open.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Open.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Open.Response.Error}
 */
proto.anytype.Rpc.Block.Open.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Open.Response.Error;
  return proto.anytype.Rpc.Block.Open.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Open.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Open.Response.Error}
 */
proto.anytype.Rpc.Block.Open.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Open.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Open.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Open.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Open.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Open.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Open.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Open.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Open.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Open.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Open.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Open.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Open.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Open.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Open.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Open.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Open.Response.Error}
 */
proto.anytype.Rpc.Block.Open.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Open.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Open.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Open.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Open.Response} returns this
*/
proto.anytype.Rpc.Block.Open.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Open.Response} returns this
 */
proto.anytype.Rpc.Block.Open.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Open.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Open.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Open.Response} returns this
*/
proto.anytype.Rpc.Block.Open.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Open.Response} returns this
 */
proto.anytype.Rpc.Block.Open.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Open.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.GetPublicWebURL.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.GetPublicWebURL} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.GetPublicWebURL.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.GetPublicWebURL}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.GetPublicWebURL;
  return proto.anytype.Rpc.Block.GetPublicWebURL.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.GetPublicWebURL} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.GetPublicWebURL}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.GetPublicWebURL.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.GetPublicWebURL} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.GetPublicWebURL.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.GetPublicWebURL.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.GetPublicWebURL.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.GetPublicWebURL.Request}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.GetPublicWebURL.Request;
  return proto.anytype.Rpc.Block.GetPublicWebURL.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.GetPublicWebURL.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.GetPublicWebURL.Request}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.GetPublicWebURL.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.GetPublicWebURL.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string blockId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.GetPublicWebURL.Request} returns this
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.GetPublicWebURL.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.GetPublicWebURL.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.toObject(includeInstance, f),
    url: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.GetPublicWebURL.Response}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.GetPublicWebURL.Response;
  return proto.anytype.Rpc.Block.GetPublicWebURL.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.GetPublicWebURL.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.GetPublicWebURL.Response}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.GetPublicWebURL.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.GetPublicWebURL.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error;
  return proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.Code}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error} returns this
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error} returns this
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.GetPublicWebURL.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.GetPublicWebURL.Response} returns this
*/
proto.anytype.Rpc.Block.GetPublicWebURL.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.GetPublicWebURL.Response} returns this
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.GetPublicWebURL.Response} returns this
 */
proto.anytype.Rpc.Block.GetPublicWebURL.Response.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.OpenBreadcrumbs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.OpenBreadcrumbs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.OpenBreadcrumbs}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.OpenBreadcrumbs;
  return proto.anytype.Rpc.Block.OpenBreadcrumbs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.OpenBreadcrumbs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.OpenBreadcrumbs}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.OpenBreadcrumbs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.OpenBreadcrumbs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.OpenBreadcrumbs.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Request}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.OpenBreadcrumbs.Request;
  return proto.anytype.Rpc.Block.OpenBreadcrumbs.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Request}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.OpenBreadcrumbs.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Request} returns this
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.toObject(includeInstance, f),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Response}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.OpenBreadcrumbs.Response;
  return proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Response}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error;
  return proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.Code}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error} returns this
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error} returns this
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Response} returns this
*/
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Response} returns this
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Response} returns this
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ResponseEvent event = 3;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 3));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Response} returns this
*/
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.OpenBreadcrumbs.Response} returns this
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.OpenBreadcrumbs.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.SetBreadcrumbs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.SetBreadcrumbs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.SetBreadcrumbs}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.SetBreadcrumbs;
  return proto.anytype.Rpc.Block.SetBreadcrumbs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.SetBreadcrumbs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.SetBreadcrumbs}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.SetBreadcrumbs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.SetBreadcrumbs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Request.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.SetBreadcrumbs.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.SetBreadcrumbs.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    breadcrumbsid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    idsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.SetBreadcrumbs.Request}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.SetBreadcrumbs.Request;
  return proto.anytype.Rpc.Block.SetBreadcrumbs.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.SetBreadcrumbs.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.SetBreadcrumbs.Request}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBreadcrumbsid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.SetBreadcrumbs.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.SetBreadcrumbs.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBreadcrumbsid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string breadcrumbsId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Request.prototype.getBreadcrumbsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.SetBreadcrumbs.Request} returns this
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Request.prototype.setBreadcrumbsid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string ids = 2;
 * @return {!Array<string>}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Request.prototype.getIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anytype.Rpc.Block.SetBreadcrumbs.Request} returns this
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Request.prototype.setIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.Block.SetBreadcrumbs.Request} returns this
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Request.prototype.addIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.Block.SetBreadcrumbs.Request} returns this
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Request.prototype.clearIdsList = function() {
  return this.setIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.SetBreadcrumbs.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.SetBreadcrumbs.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.SetBreadcrumbs.Response}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.SetBreadcrumbs.Response;
  return proto.anytype.Rpc.Block.SetBreadcrumbs.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.SetBreadcrumbs.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.SetBreadcrumbs.Response}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.SetBreadcrumbs.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.SetBreadcrumbs.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error;
  return proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.Code}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error} returns this
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error} returns this
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.SetBreadcrumbs.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.SetBreadcrumbs.Response} returns this
*/
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.SetBreadcrumbs.Response} returns this
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.SetBreadcrumbs.Response} returns this
*/
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.SetBreadcrumbs.Response} returns this
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.SetBreadcrumbs.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Create.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Create.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Create} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Create.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Create}
 */
proto.anytype.Rpc.Block.Create.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Create;
  return proto.anytype.Rpc.Block.Create.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Create} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Create}
 */
proto.anytype.Rpc.Block.Create.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Create.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Create.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Create} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Create.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Create.Dataview.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Create.Dataview.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Create.Dataview} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Create.Dataview.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Create.Dataview}
 */
proto.anytype.Rpc.Block.Create.Dataview.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Create.Dataview;
  return proto.anytype.Rpc.Block.Create.Dataview.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Create.Dataview} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Create.Dataview}
 */
proto.anytype.Rpc.Block.Create.Dataview.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Create.Dataview.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Create.Dataview.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Create.Dataview} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Create.Dataview.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Create.Dataview.View.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Create.Dataview.View} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Create.Dataview.View.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Create.Dataview.View}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Create.Dataview.View;
  return proto.anytype.Rpc.Block.Create.Dataview.View.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Create.Dataview.View} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Create.Dataview.View}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Create.Dataview.View.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Create.Dataview.View} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Create.Dataview.View.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Create.Dataview.View.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Create.Dataview.View.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    view: (f = msg.getView()) && vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Content.Dataview.View.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Create.Dataview.View.Request}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Create.Dataview.View.Request;
  return proto.anytype.Rpc.Block.Create.Dataview.View.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Create.Dataview.View.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Create.Dataview.View.Request}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 4:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Content.Dataview.View;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Content.Dataview.View.deserializeBinaryFromReader);
      msg.setView(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Create.Dataview.View.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Create.Dataview.View.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getView();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Content.Dataview.View.serializeBinaryToWriter
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Create.Dataview.View.Request} returns this
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Create.Dataview.View.Request} returns this
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional model.Block.Content.Dataview.View view = 4;
 * @return {?proto.anytype.model.Block.Content.Dataview.View}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Request.prototype.getView = function() {
  return /** @type{?proto.anytype.model.Block.Content.Dataview.View} */ (
    jspb.Message.getWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.Content.Dataview.View, 4));
};


/**
 * @param {?proto.anytype.model.Block.Content.Dataview.View|undefined} value
 * @return {!proto.anytype.Rpc.Block.Create.Dataview.View.Request} returns this
*/
proto.anytype.Rpc.Block.Create.Dataview.View.Request.prototype.setView = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Create.Dataview.View.Request} returns this
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Request.prototype.clearView = function() {
  return this.setView(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Request.prototype.hasView = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Create.Dataview.View.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Create.Dataview.View.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Create.Dataview.View.Response}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Create.Dataview.View.Response;
  return proto.anytype.Rpc.Block.Create.Dataview.View.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Create.Dataview.View.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Create.Dataview.View.Response}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Create.Dataview.View.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Create.Dataview.View.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error;
  return proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Create.Dataview.View.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Create.Dataview.View.Response} returns this
*/
proto.anytype.Rpc.Block.Create.Dataview.View.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Create.Dataview.View.Response} returns this
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Create.Dataview.View.Response} returns this
*/
proto.anytype.Rpc.Block.Create.Dataview.View.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Create.Dataview.View.Response} returns this
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Create.Dataview.View.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Create.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Create.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Create.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Create.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    targetid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    block: (f = msg.getBlock()) && vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.toObject(includeInstance, f),
    position: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Create.Request}
 */
proto.anytype.Rpc.Block.Create.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Create.Request;
  return proto.anytype.Rpc.Block.Create.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Create.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Create.Request}
 */
proto.anytype.Rpc.Block.Create.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetid(value);
      break;
    case 3:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 4:
      var value = /** @type {!proto.anytype.model.Block.Position} */ (reader.readEnum());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Create.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Create.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Create.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Create.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTargetid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block.serializeBinaryToWriter
    );
  }
  f = message.getPosition();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Create.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Create.Request} returns this
 */
proto.anytype.Rpc.Block.Create.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string targetId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Create.Request.prototype.getTargetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Create.Request} returns this
 */
proto.anytype.Rpc.Block.Create.Request.prototype.setTargetid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional model.Block block = 3;
 * @return {?proto.anytype.model.Block}
 */
proto.anytype.Rpc.Block.Create.Request.prototype.getBlock = function() {
  return /** @type{?proto.anytype.model.Block} */ (
    jspb.Message.getWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Block, 3));
};


/**
 * @param {?proto.anytype.model.Block|undefined} value
 * @return {!proto.anytype.Rpc.Block.Create.Request} returns this
*/
proto.anytype.Rpc.Block.Create.Request.prototype.setBlock = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Create.Request} returns this
 */
proto.anytype.Rpc.Block.Create.Request.prototype.clearBlock = function() {
  return this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Create.Request.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional model.Block.Position position = 4;
 * @return {!proto.anytype.model.Block.Position}
 */
proto.anytype.Rpc.Block.Create.Request.prototype.getPosition = function() {
  return /** @type {!proto.anytype.model.Block.Position} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.anytype.model.Block.Position} value
 * @return {!proto.anytype.Rpc.Block.Create.Request} returns this
 */
proto.anytype.Rpc.Block.Create.Request.prototype.setPosition = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Create.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Create.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Create.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Create.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Create.Response.Error.toObject(includeInstance, f),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Create.Response}
 */
proto.anytype.Rpc.Block.Create.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Create.Response;
  return proto.anytype.Rpc.Block.Create.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Create.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Create.Response}
 */
proto.anytype.Rpc.Block.Create.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Create.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Create.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Create.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Create.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Create.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Create.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Create.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Create.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Create.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Create.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Create.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Create.Response.Error}
 */
proto.anytype.Rpc.Block.Create.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Create.Response.Error;
  return proto.anytype.Rpc.Block.Create.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Create.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Create.Response.Error}
 */
proto.anytype.Rpc.Block.Create.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Create.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Create.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Create.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Create.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Create.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Create.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Create.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Create.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Create.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Create.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Create.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Create.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Create.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Create.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Create.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Create.Response.Error}
 */
proto.anytype.Rpc.Block.Create.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Create.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Create.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Create.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Create.Response} returns this
*/
proto.anytype.Rpc.Block.Create.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Create.Response} returns this
 */
proto.anytype.Rpc.Block.Create.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Create.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Create.Response.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Create.Response} returns this
 */
proto.anytype.Rpc.Block.Create.Response.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ResponseEvent event = 3;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Create.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 3));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Create.Response} returns this
*/
proto.anytype.Rpc.Block.Create.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Create.Response} returns this
 */
proto.anytype.Rpc.Block.Create.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Create.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.CreatePage.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.CreatePage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.CreatePage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.CreatePage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.CreatePage}
 */
proto.anytype.Rpc.Block.CreatePage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.CreatePage;
  return proto.anytype.Rpc.Block.CreatePage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.CreatePage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.CreatePage}
 */
proto.anytype.Rpc.Block.CreatePage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.CreatePage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.CreatePage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.CreatePage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.CreatePage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.CreatePage.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.CreatePage.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.CreatePage.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.CreatePage.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    targetid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    details: (f = msg.getDetails()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f),
    position: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.CreatePage.Request}
 */
proto.anytype.Rpc.Block.CreatePage.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.CreatePage.Request;
  return proto.anytype.Rpc.Block.CreatePage.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.CreatePage.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.CreatePage.Request}
 */
proto.anytype.Rpc.Block.CreatePage.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetid(value);
      break;
    case 3:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setDetails(value);
      break;
    case 4:
      var value = /** @type {!proto.anytype.model.Block.Position} */ (reader.readEnum());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.CreatePage.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.CreatePage.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.CreatePage.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.CreatePage.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTargetid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDetails();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getPosition();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.CreatePage.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.CreatePage.Request} returns this
 */
proto.anytype.Rpc.Block.CreatePage.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string targetId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.CreatePage.Request.prototype.getTargetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.CreatePage.Request} returns this
 */
proto.anytype.Rpc.Block.CreatePage.Request.prototype.setTargetid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Struct details = 3;
 * @return {?proto.google.protobuf.Struct}
 */
proto.anytype.Rpc.Block.CreatePage.Request.prototype.getDetails = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 3));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.anytype.Rpc.Block.CreatePage.Request} returns this
*/
proto.anytype.Rpc.Block.CreatePage.Request.prototype.setDetails = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.CreatePage.Request} returns this
 */
proto.anytype.Rpc.Block.CreatePage.Request.prototype.clearDetails = function() {
  return this.setDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.CreatePage.Request.prototype.hasDetails = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional model.Block.Position position = 4;
 * @return {!proto.anytype.model.Block.Position}
 */
proto.anytype.Rpc.Block.CreatePage.Request.prototype.getPosition = function() {
  return /** @type {!proto.anytype.model.Block.Position} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.anytype.model.Block.Position} value
 * @return {!proto.anytype.Rpc.Block.CreatePage.Request} returns this
 */
proto.anytype.Rpc.Block.CreatePage.Request.prototype.setPosition = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.CreatePage.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.CreatePage.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.CreatePage.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.CreatePage.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.CreatePage.Response.Error.toObject(includeInstance, f),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    targetid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.CreatePage.Response}
 */
proto.anytype.Rpc.Block.CreatePage.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.CreatePage.Response;
  return proto.anytype.Rpc.Block.CreatePage.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.CreatePage.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.CreatePage.Response}
 */
proto.anytype.Rpc.Block.CreatePage.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.CreatePage.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.CreatePage.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetid(value);
      break;
    case 4:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.CreatePage.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.CreatePage.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.CreatePage.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.CreatePage.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.CreatePage.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTargetid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.CreatePage.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.CreatePage.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.CreatePage.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.CreatePage.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.CreatePage.Response.Error}
 */
proto.anytype.Rpc.Block.CreatePage.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.CreatePage.Response.Error;
  return proto.anytype.Rpc.Block.CreatePage.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.CreatePage.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.CreatePage.Response.Error}
 */
proto.anytype.Rpc.Block.CreatePage.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.CreatePage.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.CreatePage.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.CreatePage.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.CreatePage.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.CreatePage.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.CreatePage.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.CreatePage.Response.Error.Code}
 */
proto.anytype.Rpc.Block.CreatePage.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.CreatePage.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.CreatePage.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.CreatePage.Response.Error} returns this
 */
proto.anytype.Rpc.Block.CreatePage.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.CreatePage.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.CreatePage.Response.Error} returns this
 */
proto.anytype.Rpc.Block.CreatePage.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.CreatePage.Response.Error}
 */
proto.anytype.Rpc.Block.CreatePage.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.CreatePage.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.CreatePage.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.CreatePage.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.CreatePage.Response} returns this
*/
proto.anytype.Rpc.Block.CreatePage.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.CreatePage.Response} returns this
 */
proto.anytype.Rpc.Block.CreatePage.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.CreatePage.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.CreatePage.Response.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.CreatePage.Response} returns this
 */
proto.anytype.Rpc.Block.CreatePage.Response.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string targetId = 3;
 * @return {string}
 */
proto.anytype.Rpc.Block.CreatePage.Response.prototype.getTargetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.CreatePage.Response} returns this
 */
proto.anytype.Rpc.Block.CreatePage.Response.prototype.setTargetid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional ResponseEvent event = 4;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.CreatePage.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 4));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.CreatePage.Response} returns this
*/
proto.anytype.Rpc.Block.CreatePage.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.CreatePage.Response} returns this
 */
proto.anytype.Rpc.Block.CreatePage.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.CreatePage.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Unlink.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Unlink.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Unlink} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Unlink.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Unlink}
 */
proto.anytype.Rpc.Block.Unlink.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Unlink;
  return proto.anytype.Rpc.Block.Unlink.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Unlink} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Unlink}
 */
proto.anytype.Rpc.Block.Unlink.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Unlink.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Unlink.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Unlink} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Unlink.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.Block.Unlink.Request.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Unlink.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Unlink.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Unlink.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Unlink.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Unlink.Request}
 */
proto.anytype.Rpc.Block.Unlink.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Unlink.Request;
  return proto.anytype.Rpc.Block.Unlink.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Unlink.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Unlink.Request}
 */
proto.anytype.Rpc.Block.Unlink.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBlockids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Unlink.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Unlink.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Unlink.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Unlink.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Unlink.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Unlink.Request} returns this
 */
proto.anytype.Rpc.Block.Unlink.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string blockIds = 2;
 * @return {!Array<string>}
 */
proto.anytype.Rpc.Block.Unlink.Request.prototype.getBlockidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anytype.Rpc.Block.Unlink.Request} returns this
 */
proto.anytype.Rpc.Block.Unlink.Request.prototype.setBlockidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anytype.Rpc.Block.Unlink.Request} returns this
 */
proto.anytype.Rpc.Block.Unlink.Request.prototype.addBlockids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.Block.Unlink.Request} returns this
 */
proto.anytype.Rpc.Block.Unlink.Request.prototype.clearBlockidsList = function() {
  return this.setBlockidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Unlink.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Unlink.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Unlink.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Unlink.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Unlink.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Unlink.Response}
 */
proto.anytype.Rpc.Block.Unlink.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Unlink.Response;
  return proto.anytype.Rpc.Block.Unlink.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Unlink.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Unlink.Response}
 */
proto.anytype.Rpc.Block.Unlink.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Unlink.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Unlink.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Unlink.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Unlink.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Unlink.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Unlink.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Unlink.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Unlink.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Unlink.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Unlink.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Unlink.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Unlink.Response.Error}
 */
proto.anytype.Rpc.Block.Unlink.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Unlink.Response.Error;
  return proto.anytype.Rpc.Block.Unlink.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Unlink.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Unlink.Response.Error}
 */
proto.anytype.Rpc.Block.Unlink.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Unlink.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Unlink.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Unlink.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Unlink.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Unlink.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Unlink.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Unlink.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Unlink.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Unlink.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Unlink.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Unlink.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Unlink.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Unlink.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Unlink.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Unlink.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Unlink.Response.Error}
 */
proto.anytype.Rpc.Block.Unlink.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Unlink.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Unlink.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Unlink.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Unlink.Response} returns this
*/
proto.anytype.Rpc.Block.Unlink.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Unlink.Response} returns this
 */
proto.anytype.Rpc.Block.Unlink.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Unlink.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Unlink.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Unlink.Response} returns this
*/
proto.anytype.Rpc.Block.Unlink.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Unlink.Response} returns this
 */
proto.anytype.Rpc.Block.Unlink.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Unlink.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Delete.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Delete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Delete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Delete.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Delete}
 */
proto.anytype.Rpc.Block.Delete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Delete;
  return proto.anytype.Rpc.Block.Delete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Delete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Delete}
 */
proto.anytype.Rpc.Block.Delete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Delete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Delete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Delete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Delete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Delete.Dataview.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Delete.Dataview.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Delete.Dataview} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Delete.Dataview.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Delete.Dataview}
 */
proto.anytype.Rpc.Block.Delete.Dataview.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Delete.Dataview;
  return proto.anytype.Rpc.Block.Delete.Dataview.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Delete.Dataview} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Delete.Dataview}
 */
proto.anytype.Rpc.Block.Delete.Dataview.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Delete.Dataview.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Delete.Dataview.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Delete.Dataview} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Delete.Dataview.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Delete.Dataview.View.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Delete.Dataview.View} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Delete.Dataview.View}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Delete.Dataview.View;
  return proto.anytype.Rpc.Block.Delete.Dataview.View.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Delete.Dataview.View} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Delete.Dataview.View}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Delete.Dataview.View.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Delete.Dataview.View} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Delete.Dataview.View.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Delete.Dataview.View.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    viewid: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Delete.Dataview.View.Request}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Delete.Dataview.View.Request;
  return proto.anytype.Rpc.Block.Delete.Dataview.View.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Delete.Dataview.View.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Delete.Dataview.View.Request}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setViewid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Delete.Dataview.View.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Delete.Dataview.View.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getViewid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Delete.Dataview.View.Request} returns this
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Delete.Dataview.View.Request} returns this
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string viewId = 4;
 * @return {string}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Request.prototype.getViewid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Delete.Dataview.View.Request} returns this
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Request.prototype.setViewid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Delete.Dataview.View.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Delete.Dataview.View.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && pb_protos_events_pb.ResponseEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Delete.Dataview.View.Response}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Delete.Dataview.View.Response;
  return proto.anytype.Rpc.Block.Delete.Dataview.View.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Delete.Dataview.View.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Delete.Dataview.View.Response}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new pb_protos_events_pb.ResponseEvent;
      reader.readMessage(value,pb_protos_events_pb.ResponseEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Delete.Dataview.View.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Delete.Dataview.View.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      pb_protos_events_pb.ResponseEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error;
  return proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Delete.Dataview.View.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Delete.Dataview.View.Response} returns this
*/
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Delete.Dataview.View.Response} returns this
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEvent event = 2;
 * @return {?proto.anytype.ResponseEvent}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.prototype.getEvent = function() {
  return /** @type{?proto.anytype.ResponseEvent} */ (
    jspb.Message.getWrapperField(this, pb_protos_events_pb.ResponseEvent, 2));
};


/**
 * @param {?proto.anytype.ResponseEvent|undefined} value
 * @return {!proto.anytype.Rpc.Block.Delete.Dataview.View.Response} returns this
*/
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Delete.Dataview.View.Response} returns this
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Delete.Dataview.View.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Close.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Close.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Close} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Close.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Close}
 */
proto.anytype.Rpc.Block.Close.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Close;
  return proto.anytype.Rpc.Block.Close.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Close} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Close}
 */
proto.anytype.Rpc.Block.Close.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Close.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Close.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Close} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Close.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Close.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Close.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Close.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Close.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Close.Request}
 */
proto.anytype.Rpc.Block.Close.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Close.Request;
  return proto.anytype.Rpc.Block.Close.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Close.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Close.Request}
 */
proto.anytype.Rpc.Block.Close.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Close.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Close.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Close.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Close.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string contextId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Block.Close.Request.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Close.Request} returns this
 */
proto.anytype.Rpc.Block.Close.Request.prototype.setContextid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Close.Request.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Close.Request} returns this
 */
proto.anytype.Rpc.Block.Close.Request.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Close.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Close.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Close.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Close.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Block.Close.Response.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Close.Response}
 */
proto.anytype.Rpc.Block.Close.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Close.Response;
  return proto.anytype.Rpc.Block.Close.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Close.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Close.Response}
 */
proto.anytype.Rpc.Block.Close.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Block.Close.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Block.Close.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Close.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Close.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Close.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Close.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Block.Close.Response.Error.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Block.Close.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Block.Close.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Block.Close.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Close.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Block.Close.Response.Error}
 */
proto.anytype.Rpc.Block.Close.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Block.Close.Response.Error;
  return proto.anytype.Rpc.Block.Close.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Block.Close.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Block.Close.Response.Error}
 */
proto.anytype.Rpc.Block.Close.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Block.Close.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Block.Close.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Block.Close.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Block.Close.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Block.Close.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Block.Close.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Block.Close.Response.Error.Code}
 */
proto.anytype.Rpc.Block.Close.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Block.Close.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Block.Close.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Block.Close.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Close.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Block.Close.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Block.Close.Response.Error} returns this
 */
proto.anytype.Rpc.Block.Close.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Block.Close.Response.Error}
 */
proto.anytype.Rpc.Block.Close.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Block.Close.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Block.Close.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Block.Close.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Block.Close.Response} returns this
*/
proto.anytype.Rpc.Block.Close.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Block.Close.Response} returns this
 */
proto.anytype.Rpc.Block.Close.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Block.Close.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Wallet.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Wallet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Wallet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Wallet.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Wallet}
 */
proto.anytype.Rpc.Wallet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Wallet;
  return proto.anytype.Rpc.Wallet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Wallet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Wallet}
 */
proto.anytype.Rpc.Wallet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Wallet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Wallet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Wallet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Wallet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Wallet.Create.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Wallet.Create.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Wallet.Create} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Wallet.Create.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Wallet.Create}
 */
proto.anytype.Rpc.Wallet.Create.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Wallet.Create;
  return proto.anytype.Rpc.Wallet.Create.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Wallet.Create} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Wallet.Create}
 */
proto.anytype.Rpc.Wallet.Create.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Wallet.Create.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Wallet.Create.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Wallet.Create} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Wallet.Create.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Wallet.Create.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Wallet.Create.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Wallet.Create.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Wallet.Create.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    rootpath: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Wallet.Create.Request}
 */
proto.anytype.Rpc.Wallet.Create.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Wallet.Create.Request;
  return proto.anytype.Rpc.Wallet.Create.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Wallet.Create.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Wallet.Create.Request}
 */
proto.anytype.Rpc.Wallet.Create.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootpath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Wallet.Create.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Wallet.Create.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Wallet.Create.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Wallet.Create.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRootpath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string rootPath = 1;
 * @return {string}
 */
proto.anytype.Rpc.Wallet.Create.Request.prototype.getRootpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Wallet.Create.Request} returns this
 */
proto.anytype.Rpc.Wallet.Create.Request.prototype.setRootpath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Wallet.Create.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Wallet.Create.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Wallet.Create.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Wallet.Create.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Wallet.Create.Response.Error.toObject(includeInstance, f),
    mnemonic: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Wallet.Create.Response}
 */
proto.anytype.Rpc.Wallet.Create.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Wallet.Create.Response;
  return proto.anytype.Rpc.Wallet.Create.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Wallet.Create.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Wallet.Create.Response}
 */
proto.anytype.Rpc.Wallet.Create.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Wallet.Create.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Wallet.Create.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMnemonic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Wallet.Create.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Wallet.Create.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Wallet.Create.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Wallet.Create.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Wallet.Create.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getMnemonic();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Wallet.Create.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Wallet.Create.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Wallet.Create.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Wallet.Create.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Wallet.Create.Response.Error}
 */
proto.anytype.Rpc.Wallet.Create.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Wallet.Create.Response.Error;
  return proto.anytype.Rpc.Wallet.Create.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Wallet.Create.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Wallet.Create.Response.Error}
 */
proto.anytype.Rpc.Wallet.Create.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Wallet.Create.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Wallet.Create.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Wallet.Create.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Wallet.Create.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Wallet.Create.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Wallet.Create.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2,
  FAILED_TO_CREATE_LOCAL_REPO: 101
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Wallet.Create.Response.Error.Code}
 */
proto.anytype.Rpc.Wallet.Create.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Wallet.Create.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Wallet.Create.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Wallet.Create.Response.Error} returns this
 */
proto.anytype.Rpc.Wallet.Create.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Wallet.Create.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Wallet.Create.Response.Error} returns this
 */
proto.anytype.Rpc.Wallet.Create.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Wallet.Create.Response.Error}
 */
proto.anytype.Rpc.Wallet.Create.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Wallet.Create.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Wallet.Create.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Wallet.Create.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Wallet.Create.Response} returns this
*/
proto.anytype.Rpc.Wallet.Create.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Wallet.Create.Response} returns this
 */
proto.anytype.Rpc.Wallet.Create.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Wallet.Create.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string mnemonic = 2;
 * @return {string}
 */
proto.anytype.Rpc.Wallet.Create.Response.prototype.getMnemonic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Wallet.Create.Response} returns this
 */
proto.anytype.Rpc.Wallet.Create.Response.prototype.setMnemonic = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Wallet.Recover.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Wallet.Recover.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Wallet.Recover} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Wallet.Recover.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Wallet.Recover}
 */
proto.anytype.Rpc.Wallet.Recover.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Wallet.Recover;
  return proto.anytype.Rpc.Wallet.Recover.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Wallet.Recover} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Wallet.Recover}
 */
proto.anytype.Rpc.Wallet.Recover.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Wallet.Recover.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Wallet.Recover.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Wallet.Recover} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Wallet.Recover.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Wallet.Recover.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Wallet.Recover.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Wallet.Recover.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Wallet.Recover.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    rootpath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mnemonic: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Wallet.Recover.Request}
 */
proto.anytype.Rpc.Wallet.Recover.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Wallet.Recover.Request;
  return proto.anytype.Rpc.Wallet.Recover.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Wallet.Recover.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Wallet.Recover.Request}
 */
proto.anytype.Rpc.Wallet.Recover.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootpath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMnemonic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Wallet.Recover.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Wallet.Recover.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Wallet.Recover.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Wallet.Recover.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRootpath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMnemonic();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string rootPath = 1;
 * @return {string}
 */
proto.anytype.Rpc.Wallet.Recover.Request.prototype.getRootpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Wallet.Recover.Request} returns this
 */
proto.anytype.Rpc.Wallet.Recover.Request.prototype.setRootpath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string mnemonic = 2;
 * @return {string}
 */
proto.anytype.Rpc.Wallet.Recover.Request.prototype.getMnemonic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Wallet.Recover.Request} returns this
 */
proto.anytype.Rpc.Wallet.Recover.Request.prototype.setMnemonic = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Wallet.Recover.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Wallet.Recover.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Wallet.Recover.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Wallet.Recover.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Wallet.Recover.Response.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Wallet.Recover.Response}
 */
proto.anytype.Rpc.Wallet.Recover.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Wallet.Recover.Response;
  return proto.anytype.Rpc.Wallet.Recover.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Wallet.Recover.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Wallet.Recover.Response}
 */
proto.anytype.Rpc.Wallet.Recover.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Wallet.Recover.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Wallet.Recover.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Wallet.Recover.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Wallet.Recover.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Wallet.Recover.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Wallet.Recover.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Wallet.Recover.Response.Error.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Wallet.Recover.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Wallet.Recover.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Wallet.Recover.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Wallet.Recover.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Wallet.Recover.Response.Error}
 */
proto.anytype.Rpc.Wallet.Recover.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Wallet.Recover.Response.Error;
  return proto.anytype.Rpc.Wallet.Recover.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Wallet.Recover.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Wallet.Recover.Response.Error}
 */
proto.anytype.Rpc.Wallet.Recover.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Wallet.Recover.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Wallet.Recover.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Wallet.Recover.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Wallet.Recover.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Wallet.Recover.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Wallet.Recover.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2,
  FAILED_TO_CREATE_LOCAL_REPO: 101
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Wallet.Recover.Response.Error.Code}
 */
proto.anytype.Rpc.Wallet.Recover.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Wallet.Recover.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Wallet.Recover.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Wallet.Recover.Response.Error} returns this
 */
proto.anytype.Rpc.Wallet.Recover.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Wallet.Recover.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Wallet.Recover.Response.Error} returns this
 */
proto.anytype.Rpc.Wallet.Recover.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Wallet.Recover.Response.Error}
 */
proto.anytype.Rpc.Wallet.Recover.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Wallet.Recover.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Wallet.Recover.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Wallet.Recover.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Wallet.Recover.Response} returns this
*/
proto.anytype.Rpc.Wallet.Recover.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Wallet.Recover.Response} returns this
 */
proto.anytype.Rpc.Wallet.Recover.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Wallet.Recover.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Account.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Account.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Account} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Account}
 */
proto.anytype.Rpc.Account.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Account;
  return proto.anytype.Rpc.Account.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Account}
 */
proto.anytype.Rpc.Account.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Account.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Account.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Account} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Account.Create.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Account.Create.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Account.Create} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Create.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Account.Create}
 */
proto.anytype.Rpc.Account.Create.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Account.Create;
  return proto.anytype.Rpc.Account.Create.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Account.Create} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Account.Create}
 */
proto.anytype.Rpc.Account.Create.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Account.Create.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Account.Create.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Account.Create} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Create.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.anytype.Rpc.Account.Create.Request.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.anytype.Rpc.Account.Create.Request.AvatarCase = {
  AVATAR_NOT_SET: 0,
  AVATARLOCALPATH: 2,
  AVATARCOLOR: 3
};

/**
 * @return {proto.anytype.Rpc.Account.Create.Request.AvatarCase}
 */
proto.anytype.Rpc.Account.Create.Request.prototype.getAvatarCase = function() {
  return /** @type {proto.anytype.Rpc.Account.Create.Request.AvatarCase} */(jspb.Message.computeOneofCase(this, proto.anytype.Rpc.Account.Create.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Account.Create.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Account.Create.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Account.Create.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Create.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    avatarlocalpath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    avatarcolor: jspb.Message.getFieldWithDefault(msg, 3, ""),
    alphainvitecode: jspb.Message.getFieldWithDefault(msg, 20, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Account.Create.Request}
 */
proto.anytype.Rpc.Account.Create.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Account.Create.Request;
  return proto.anytype.Rpc.Account.Create.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Account.Create.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Account.Create.Request}
 */
proto.anytype.Rpc.Account.Create.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarlocalpath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarcolor(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlphainvitecode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Account.Create.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Account.Create.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Account.Create.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Create.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAlphainvitecode();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.anytype.Rpc.Account.Create.Request.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Account.Create.Request} returns this
 */
proto.anytype.Rpc.Account.Create.Request.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string avatarLocalPath = 2;
 * @return {string}
 */
proto.anytype.Rpc.Account.Create.Request.prototype.getAvatarlocalpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Account.Create.Request} returns this
 */
proto.anytype.Rpc.Account.Create.Request.prototype.setAvatarlocalpath = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.anytype.Rpc.Account.Create.Request.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.anytype.Rpc.Account.Create.Request} returns this
 */
proto.anytype.Rpc.Account.Create.Request.prototype.clearAvatarlocalpath = function() {
  return jspb.Message.setOneofField(this, 2, proto.anytype.Rpc.Account.Create.Request.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Account.Create.Request.prototype.hasAvatarlocalpath = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string avatarColor = 3;
 * @return {string}
 */
proto.anytype.Rpc.Account.Create.Request.prototype.getAvatarcolor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Account.Create.Request} returns this
 */
proto.anytype.Rpc.Account.Create.Request.prototype.setAvatarcolor = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.anytype.Rpc.Account.Create.Request.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.anytype.Rpc.Account.Create.Request} returns this
 */
proto.anytype.Rpc.Account.Create.Request.prototype.clearAvatarcolor = function() {
  return jspb.Message.setOneofField(this, 3, proto.anytype.Rpc.Account.Create.Request.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Account.Create.Request.prototype.hasAvatarcolor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string alphaInviteCode = 20;
 * @return {string}
 */
proto.anytype.Rpc.Account.Create.Request.prototype.getAlphainvitecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Account.Create.Request} returns this
 */
proto.anytype.Rpc.Account.Create.Request.prototype.setAlphainvitecode = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Account.Create.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Account.Create.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Account.Create.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Create.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Account.Create.Response.Error.toObject(includeInstance, f),
    account: (f = msg.getAccount()) && vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Account.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Account.Create.Response}
 */
proto.anytype.Rpc.Account.Create.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Account.Create.Response;
  return proto.anytype.Rpc.Account.Create.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Account.Create.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Account.Create.Response}
 */
proto.anytype.Rpc.Account.Create.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Account.Create.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Account.Create.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Account;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Account.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Account.Create.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Account.Create.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Account.Create.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Create.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Account.Create.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Account.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Account.Create.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Account.Create.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Account.Create.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Create.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Account.Create.Response.Error}
 */
proto.anytype.Rpc.Account.Create.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Account.Create.Response.Error;
  return proto.anytype.Rpc.Account.Create.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Account.Create.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Account.Create.Response.Error}
 */
proto.anytype.Rpc.Account.Create.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Account.Create.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Account.Create.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Account.Create.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Account.Create.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Create.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Account.Create.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2,
  ACCOUNT_CREATED_BUT_FAILED_TO_START_NODE: 101,
  ACCOUNT_CREATED_BUT_FAILED_TO_SET_NAME: 102,
  ACCOUNT_CREATED_BUT_FAILED_TO_SET_AVATAR: 103,
  FAILED_TO_STOP_RUNNING_NODE: 104,
  BAD_INVITE_CODE: 900
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Account.Create.Response.Error.Code}
 */
proto.anytype.Rpc.Account.Create.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Account.Create.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Account.Create.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Account.Create.Response.Error} returns this
 */
proto.anytype.Rpc.Account.Create.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Account.Create.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Account.Create.Response.Error} returns this
 */
proto.anytype.Rpc.Account.Create.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Account.Create.Response.Error}
 */
proto.anytype.Rpc.Account.Create.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Account.Create.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Account.Create.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Account.Create.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Account.Create.Response} returns this
*/
proto.anytype.Rpc.Account.Create.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Account.Create.Response} returns this
 */
proto.anytype.Rpc.Account.Create.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Account.Create.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional model.Account account = 2;
 * @return {?proto.anytype.model.Account}
 */
proto.anytype.Rpc.Account.Create.Response.prototype.getAccount = function() {
  return /** @type{?proto.anytype.model.Account} */ (
    jspb.Message.getWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Account, 2));
};


/**
 * @param {?proto.anytype.model.Account|undefined} value
 * @return {!proto.anytype.Rpc.Account.Create.Response} returns this
*/
proto.anytype.Rpc.Account.Create.Response.prototype.setAccount = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Account.Create.Response} returns this
 */
proto.anytype.Rpc.Account.Create.Response.prototype.clearAccount = function() {
  return this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Account.Create.Response.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Account.Recover.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Account.Recover.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Account.Recover} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Recover.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Account.Recover}
 */
proto.anytype.Rpc.Account.Recover.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Account.Recover;
  return proto.anytype.Rpc.Account.Recover.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Account.Recover} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Account.Recover}
 */
proto.anytype.Rpc.Account.Recover.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Account.Recover.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Account.Recover.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Account.Recover} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Recover.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Account.Recover.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Account.Recover.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Account.Recover.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Recover.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Account.Recover.Request}
 */
proto.anytype.Rpc.Account.Recover.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Account.Recover.Request;
  return proto.anytype.Rpc.Account.Recover.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Account.Recover.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Account.Recover.Request}
 */
proto.anytype.Rpc.Account.Recover.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Account.Recover.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Account.Recover.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Account.Recover.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Recover.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Account.Recover.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Account.Recover.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Account.Recover.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Recover.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Account.Recover.Response.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Account.Recover.Response}
 */
proto.anytype.Rpc.Account.Recover.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Account.Recover.Response;
  return proto.anytype.Rpc.Account.Recover.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Account.Recover.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Account.Recover.Response}
 */
proto.anytype.Rpc.Account.Recover.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Account.Recover.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Account.Recover.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Account.Recover.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Account.Recover.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Account.Recover.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Recover.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Account.Recover.Response.Error.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Account.Recover.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Account.Recover.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Account.Recover.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Recover.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Account.Recover.Response.Error}
 */
proto.anytype.Rpc.Account.Recover.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Account.Recover.Response.Error;
  return proto.anytype.Rpc.Account.Recover.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Account.Recover.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Account.Recover.Response.Error}
 */
proto.anytype.Rpc.Account.Recover.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Account.Recover.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Account.Recover.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Account.Recover.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Account.Recover.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Recover.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Account.Recover.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2,
  NO_ACCOUNTS_FOUND: 101,
  NEED_TO_RECOVER_WALLET_FIRST: 102,
  FAILED_TO_CREATE_LOCAL_REPO: 103,
  LOCAL_REPO_EXISTS_BUT_CORRUPTED: 104,
  FAILED_TO_RUN_NODE: 105,
  WALLET_RECOVER_NOT_PERFORMED: 106,
  FAILED_TO_STOP_RUNNING_NODE: 107
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Account.Recover.Response.Error.Code}
 */
proto.anytype.Rpc.Account.Recover.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Account.Recover.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Account.Recover.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Account.Recover.Response.Error} returns this
 */
proto.anytype.Rpc.Account.Recover.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Account.Recover.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Account.Recover.Response.Error} returns this
 */
proto.anytype.Rpc.Account.Recover.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Account.Recover.Response.Error}
 */
proto.anytype.Rpc.Account.Recover.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Account.Recover.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Account.Recover.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Account.Recover.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Account.Recover.Response} returns this
*/
proto.anytype.Rpc.Account.Recover.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Account.Recover.Response} returns this
 */
proto.anytype.Rpc.Account.Recover.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Account.Recover.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Account.Select.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Account.Select.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Account.Select} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Select.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Account.Select}
 */
proto.anytype.Rpc.Account.Select.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Account.Select;
  return proto.anytype.Rpc.Account.Select.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Account.Select} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Account.Select}
 */
proto.anytype.Rpc.Account.Select.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Account.Select.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Account.Select.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Account.Select} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Select.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Account.Select.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Account.Select.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Account.Select.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Select.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rootpath: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Account.Select.Request}
 */
proto.anytype.Rpc.Account.Select.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Account.Select.Request;
  return proto.anytype.Rpc.Account.Select.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Account.Select.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Account.Select.Request}
 */
proto.anytype.Rpc.Account.Select.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootpath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Account.Select.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Account.Select.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Account.Select.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Select.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRootpath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.anytype.Rpc.Account.Select.Request.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Account.Select.Request} returns this
 */
proto.anytype.Rpc.Account.Select.Request.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string rootPath = 2;
 * @return {string}
 */
proto.anytype.Rpc.Account.Select.Request.prototype.getRootpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Account.Select.Request} returns this
 */
proto.anytype.Rpc.Account.Select.Request.prototype.setRootpath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Account.Select.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Account.Select.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Account.Select.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Select.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Account.Select.Response.Error.toObject(includeInstance, f),
    account: (f = msg.getAccount()) && vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Account.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Account.Select.Response}
 */
proto.anytype.Rpc.Account.Select.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Account.Select.Response;
  return proto.anytype.Rpc.Account.Select.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Account.Select.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Account.Select.Response}
 */
proto.anytype.Rpc.Account.Select.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Account.Select.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Account.Select.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Account;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Account.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Account.Select.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Account.Select.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Account.Select.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Select.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Account.Select.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Account.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Account.Select.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Account.Select.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Account.Select.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Select.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Account.Select.Response.Error}
 */
proto.anytype.Rpc.Account.Select.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Account.Select.Response.Error;
  return proto.anytype.Rpc.Account.Select.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Account.Select.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Account.Select.Response.Error}
 */
proto.anytype.Rpc.Account.Select.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Account.Select.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Account.Select.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Account.Select.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Account.Select.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Select.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Account.Select.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2,
  FAILED_TO_CREATE_LOCAL_REPO: 101,
  LOCAL_REPO_EXISTS_BUT_CORRUPTED: 102,
  FAILED_TO_RUN_NODE: 103,
  FAILED_TO_FIND_ACCOUNT_INFO: 104,
  LOCAL_REPO_NOT_EXISTS_AND_MNEMONIC_NOT_SET: 105,
  FAILED_TO_STOP_SEARCHER_NODE: 106,
  FAILED_TO_RECOVER_PREDEFINED_BLOCKS: 107
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Account.Select.Response.Error.Code}
 */
proto.anytype.Rpc.Account.Select.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Account.Select.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Account.Select.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Account.Select.Response.Error} returns this
 */
proto.anytype.Rpc.Account.Select.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Account.Select.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Account.Select.Response.Error} returns this
 */
proto.anytype.Rpc.Account.Select.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Account.Select.Response.Error}
 */
proto.anytype.Rpc.Account.Select.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Account.Select.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Account.Select.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Account.Select.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Account.Select.Response} returns this
*/
proto.anytype.Rpc.Account.Select.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Account.Select.Response} returns this
 */
proto.anytype.Rpc.Account.Select.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Account.Select.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional model.Account account = 2;
 * @return {?proto.anytype.model.Account}
 */
proto.anytype.Rpc.Account.Select.Response.prototype.getAccount = function() {
  return /** @type{?proto.anytype.model.Account} */ (
    jspb.Message.getWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.Account, 2));
};


/**
 * @param {?proto.anytype.model.Account|undefined} value
 * @return {!proto.anytype.Rpc.Account.Select.Response} returns this
*/
proto.anytype.Rpc.Account.Select.Response.prototype.setAccount = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Account.Select.Response} returns this
 */
proto.anytype.Rpc.Account.Select.Response.prototype.clearAccount = function() {
  return this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Account.Select.Response.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Account.Stop.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Account.Stop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Account.Stop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Stop.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Account.Stop}
 */
proto.anytype.Rpc.Account.Stop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Account.Stop;
  return proto.anytype.Rpc.Account.Stop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Account.Stop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Account.Stop}
 */
proto.anytype.Rpc.Account.Stop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Account.Stop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Account.Stop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Account.Stop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Stop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Account.Stop.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Account.Stop.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Account.Stop.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Stop.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    removedata: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Account.Stop.Request}
 */
proto.anytype.Rpc.Account.Stop.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Account.Stop.Request;
  return proto.anytype.Rpc.Account.Stop.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Account.Stop.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Account.Stop.Request}
 */
proto.anytype.Rpc.Account.Stop.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRemovedata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Account.Stop.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Account.Stop.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Account.Stop.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Stop.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemovedata();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool removeData = 1;
 * @return {boolean}
 */
proto.anytype.Rpc.Account.Stop.Request.prototype.getRemovedata = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.anytype.Rpc.Account.Stop.Request} returns this
 */
proto.anytype.Rpc.Account.Stop.Request.prototype.setRemovedata = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Account.Stop.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Account.Stop.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Account.Stop.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Stop.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Account.Stop.Response.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Account.Stop.Response}
 */
proto.anytype.Rpc.Account.Stop.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Account.Stop.Response;
  return proto.anytype.Rpc.Account.Stop.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Account.Stop.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Account.Stop.Response}
 */
proto.anytype.Rpc.Account.Stop.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Account.Stop.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Account.Stop.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Account.Stop.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Account.Stop.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Account.Stop.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Stop.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Account.Stop.Response.Error.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Account.Stop.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Account.Stop.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Account.Stop.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Stop.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Account.Stop.Response.Error}
 */
proto.anytype.Rpc.Account.Stop.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Account.Stop.Response.Error;
  return proto.anytype.Rpc.Account.Stop.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Account.Stop.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Account.Stop.Response.Error}
 */
proto.anytype.Rpc.Account.Stop.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Account.Stop.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Account.Stop.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Account.Stop.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Account.Stop.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Account.Stop.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Account.Stop.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2,
  ACCOUNT_IS_NOT_RUNNING: 101,
  FAILED_TO_STOP_NODE: 102,
  FAILED_TO_REMOVE_ACCOUNT_DATA: 103
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Account.Stop.Response.Error.Code}
 */
proto.anytype.Rpc.Account.Stop.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Account.Stop.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Account.Stop.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Account.Stop.Response.Error} returns this
 */
proto.anytype.Rpc.Account.Stop.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Account.Stop.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Account.Stop.Response.Error} returns this
 */
proto.anytype.Rpc.Account.Stop.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Account.Stop.Response.Error}
 */
proto.anytype.Rpc.Account.Stop.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Account.Stop.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Account.Stop.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Account.Stop.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Account.Stop.Response} returns this
*/
proto.anytype.Rpc.Account.Stop.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Account.Stop.Response} returns this
 */
proto.anytype.Rpc.Account.Stop.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Account.Stop.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Log.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Log.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Log} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Log.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Log}
 */
proto.anytype.Rpc.Log.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Log;
  return proto.anytype.Rpc.Log.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Log}
 */
proto.anytype.Rpc.Log.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Log.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Log.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Log} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Log.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Log.Send.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Log.Send.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Log.Send} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Log.Send.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Log.Send}
 */
proto.anytype.Rpc.Log.Send.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Log.Send;
  return proto.anytype.Rpc.Log.Send.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Log.Send} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Log.Send}
 */
proto.anytype.Rpc.Log.Send.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Log.Send.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Log.Send.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Log.Send} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Log.Send.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Log.Send.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Log.Send.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Log.Send.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Log.Send.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    level: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Log.Send.Request}
 */
proto.anytype.Rpc.Log.Send.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Log.Send.Request;
  return proto.anytype.Rpc.Log.Send.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Log.Send.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Log.Send.Request}
 */
proto.anytype.Rpc.Log.Send.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {!proto.anytype.Rpc.Log.Send.Request.Level} */ (reader.readEnum());
      msg.setLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Log.Send.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Log.Send.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Log.Send.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Log.Send.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Log.Send.Request.Level = {
  DEBUG: 0,
  ERROR: 1,
  FATAL: 2,
  INFO: 3,
  PANIC: 4,
  WARNING: 5
};

/**
 * optional string message = 1;
 * @return {string}
 */
proto.anytype.Rpc.Log.Send.Request.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Log.Send.Request} returns this
 */
proto.anytype.Rpc.Log.Send.Request.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Level level = 2;
 * @return {!proto.anytype.Rpc.Log.Send.Request.Level}
 */
proto.anytype.Rpc.Log.Send.Request.prototype.getLevel = function() {
  return /** @type {!proto.anytype.Rpc.Log.Send.Request.Level} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.anytype.Rpc.Log.Send.Request.Level} value
 * @return {!proto.anytype.Rpc.Log.Send.Request} returns this
 */
proto.anytype.Rpc.Log.Send.Request.prototype.setLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Log.Send.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Log.Send.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Log.Send.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Log.Send.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Log.Send.Response.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Log.Send.Response}
 */
proto.anytype.Rpc.Log.Send.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Log.Send.Response;
  return proto.anytype.Rpc.Log.Send.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Log.Send.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Log.Send.Response}
 */
proto.anytype.Rpc.Log.Send.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Log.Send.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Log.Send.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Log.Send.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Log.Send.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Log.Send.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Log.Send.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Log.Send.Response.Error.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Log.Send.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Log.Send.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Log.Send.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Log.Send.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Log.Send.Response.Error}
 */
proto.anytype.Rpc.Log.Send.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Log.Send.Response.Error;
  return proto.anytype.Rpc.Log.Send.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Log.Send.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Log.Send.Response.Error}
 */
proto.anytype.Rpc.Log.Send.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Log.Send.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Log.Send.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Log.Send.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Log.Send.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Log.Send.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Log.Send.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2,
  NOT_FOUND: 101,
  TIMEOUT: 102
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Log.Send.Response.Error.Code}
 */
proto.anytype.Rpc.Log.Send.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Log.Send.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Log.Send.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Log.Send.Response.Error} returns this
 */
proto.anytype.Rpc.Log.Send.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Log.Send.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Log.Send.Response.Error} returns this
 */
proto.anytype.Rpc.Log.Send.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Log.Send.Response.Error}
 */
proto.anytype.Rpc.Log.Send.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Log.Send.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Log.Send.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Log.Send.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Log.Send.Response} returns this
*/
proto.anytype.Rpc.Log.Send.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Log.Send.Response} returns this
 */
proto.anytype.Rpc.Log.Send.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Log.Send.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Version.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Version.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Version} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Version.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Version}
 */
proto.anytype.Rpc.Version.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Version;
  return proto.anytype.Rpc.Version.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Version} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Version}
 */
proto.anytype.Rpc.Version.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Version.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Version.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Version} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Version.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Version.Get.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Version.Get.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Version.Get} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Version.Get.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Version.Get}
 */
proto.anytype.Rpc.Version.Get.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Version.Get;
  return proto.anytype.Rpc.Version.Get.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Version.Get} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Version.Get}
 */
proto.anytype.Rpc.Version.Get.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Version.Get.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Version.Get.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Version.Get} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Version.Get.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Version.Get.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Version.Get.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Version.Get.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Version.Get.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Version.Get.Request}
 */
proto.anytype.Rpc.Version.Get.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Version.Get.Request;
  return proto.anytype.Rpc.Version.Get.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Version.Get.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Version.Get.Request}
 */
proto.anytype.Rpc.Version.Get.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Version.Get.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Version.Get.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Version.Get.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Version.Get.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Version.Get.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Version.Get.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Version.Get.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Version.Get.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Version.Get.Response.Error.toObject(includeInstance, f),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    details: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Version.Get.Response}
 */
proto.anytype.Rpc.Version.Get.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Version.Get.Response;
  return proto.anytype.Rpc.Version.Get.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Version.Get.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Version.Get.Response}
 */
proto.anytype.Rpc.Version.Get.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Version.Get.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Version.Get.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Version.Get.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Version.Get.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Version.Get.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Version.Get.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Version.Get.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDetails();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Version.Get.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Version.Get.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Version.Get.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Version.Get.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Version.Get.Response.Error}
 */
proto.anytype.Rpc.Version.Get.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Version.Get.Response.Error;
  return proto.anytype.Rpc.Version.Get.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Version.Get.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Version.Get.Response.Error}
 */
proto.anytype.Rpc.Version.Get.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Version.Get.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Version.Get.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Version.Get.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Version.Get.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Version.Get.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Version.Get.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2,
  VERSION_IS_EMPTY: 3,
  NOT_FOUND: 101,
  TIMEOUT: 102
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Version.Get.Response.Error.Code}
 */
proto.anytype.Rpc.Version.Get.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Version.Get.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Version.Get.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Version.Get.Response.Error} returns this
 */
proto.anytype.Rpc.Version.Get.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Version.Get.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Version.Get.Response.Error} returns this
 */
proto.anytype.Rpc.Version.Get.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Version.Get.Response.Error}
 */
proto.anytype.Rpc.Version.Get.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Version.Get.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Version.Get.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Version.Get.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Version.Get.Response} returns this
*/
proto.anytype.Rpc.Version.Get.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Version.Get.Response} returns this
 */
proto.anytype.Rpc.Version.Get.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Version.Get.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.anytype.Rpc.Version.Get.Response.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Version.Get.Response} returns this
 */
proto.anytype.Rpc.Version.Get.Response.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string details = 3;
 * @return {string}
 */
proto.anytype.Rpc.Version.Get.Response.prototype.getDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Version.Get.Response} returns this
 */
proto.anytype.Rpc.Version.Get.Response.prototype.setDetails = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Ipfs.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Ipfs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Ipfs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Ipfs}
 */
proto.anytype.Rpc.Ipfs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Ipfs;
  return proto.anytype.Rpc.Ipfs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Ipfs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Ipfs}
 */
proto.anytype.Rpc.Ipfs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ipfs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Ipfs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Ipfs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Ipfs.File.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Ipfs.File.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Ipfs.File} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.File.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Ipfs.File}
 */
proto.anytype.Rpc.Ipfs.File.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Ipfs.File;
  return proto.anytype.Rpc.Ipfs.File.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Ipfs.File} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Ipfs.File}
 */
proto.anytype.Rpc.Ipfs.File.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ipfs.File.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Ipfs.File.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Ipfs.File} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.File.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Ipfs.File.Get.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Ipfs.File.Get.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Ipfs.File.Get} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.File.Get.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Ipfs.File.Get}
 */
proto.anytype.Rpc.Ipfs.File.Get.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Ipfs.File.Get;
  return proto.anytype.Rpc.Ipfs.File.Get.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Ipfs.File.Get} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Ipfs.File.Get}
 */
proto.anytype.Rpc.Ipfs.File.Get.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ipfs.File.Get.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Ipfs.File.Get.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Ipfs.File.Get} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.File.Get.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Ipfs.File.Get.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Ipfs.File.Get.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Ipfs.File.Get.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.File.Get.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Ipfs.File.Get.Request}
 */
proto.anytype.Rpc.Ipfs.File.Get.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Ipfs.File.Get.Request;
  return proto.anytype.Rpc.Ipfs.File.Get.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Ipfs.File.Get.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Ipfs.File.Get.Request}
 */
proto.anytype.Rpc.Ipfs.File.Get.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ipfs.File.Get.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Ipfs.File.Get.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Ipfs.File.Get.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.File.Get.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.anytype.Rpc.Ipfs.File.Get.Request.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Ipfs.File.Get.Request} returns this
 */
proto.anytype.Rpc.Ipfs.File.Get.Request.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Ipfs.File.Get.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Ipfs.File.Get.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Ipfs.File.Get.Response.Error.toObject(includeInstance, f),
    data: msg.getData_asB64(),
    media: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Ipfs.File.Get.Response}
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Ipfs.File.Get.Response;
  return proto.anytype.Rpc.Ipfs.File.Get.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Ipfs.File.Get.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Ipfs.File.Get.Response}
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Ipfs.File.Get.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Ipfs.File.Get.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMedia(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Ipfs.File.Get.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Ipfs.File.Get.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Ipfs.File.Get.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMedia();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Ipfs.File.Get.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Ipfs.File.Get.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Ipfs.File.Get.Response.Error}
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Ipfs.File.Get.Response.Error;
  return proto.anytype.Rpc.Ipfs.File.Get.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Ipfs.File.Get.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Ipfs.File.Get.Response.Error}
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Ipfs.File.Get.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Ipfs.File.Get.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Ipfs.File.Get.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2,
  NOT_FOUND: 101,
  TIMEOUT: 102
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Ipfs.File.Get.Response.Error.Code}
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Ipfs.File.Get.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Ipfs.File.Get.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Ipfs.File.Get.Response.Error} returns this
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Ipfs.File.Get.Response.Error} returns this
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Ipfs.File.Get.Response.Error}
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Ipfs.File.Get.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Ipfs.File.Get.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Ipfs.File.Get.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Ipfs.File.Get.Response} returns this
*/
proto.anytype.Rpc.Ipfs.File.Get.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Ipfs.File.Get.Response} returns this
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes data = 2;
 * @return {string}
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.anytype.Rpc.Ipfs.File.Get.Response} returns this
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string media = 3;
 * @return {string}
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.prototype.getMedia = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Ipfs.File.Get.Response} returns this
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.prototype.setMedia = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Ipfs.File.Get.Response} returns this
 */
proto.anytype.Rpc.Ipfs.File.Get.Response.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Ipfs.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Ipfs.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Ipfs.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.Image.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Ipfs.Image}
 */
proto.anytype.Rpc.Ipfs.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Ipfs.Image;
  return proto.anytype.Rpc.Ipfs.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Ipfs.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Ipfs.Image}
 */
proto.anytype.Rpc.Ipfs.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ipfs.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Ipfs.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Ipfs.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Ipfs.Image.Get.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Ipfs.Image.Get.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.Image.Get.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get}
 */
proto.anytype.Rpc.Ipfs.Image.Get.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Ipfs.Image.Get;
  return proto.anytype.Rpc.Ipfs.Image.Get.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get}
 */
proto.anytype.Rpc.Ipfs.Image.Get.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ipfs.Image.Get.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Ipfs.Image.Get.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.Image.Get.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Ipfs.Image.Get.Blob.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.Blob} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.Blob}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Ipfs.Image.Get.Blob;
  return proto.anytype.Rpc.Ipfs.Image.Get.Blob.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.Blob} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.Blob}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Ipfs.Image.Get.Blob.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.Blob} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    wantwidth: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request;
  return proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWantwidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWantwidth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request} returns this
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 wantWidth = 2;
 * @return {number}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request.prototype.getWantwidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request} returns this
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Request.prototype.setWantwidth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.toObject(includeInstance, f),
    blob: msg.getBlob_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response;
  return proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlob(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getBlob_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error;
  return proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2,
  NOT_FOUND: 101,
  TIMEOUT: 102,
  NODE_NOT_STARTED: 103
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.Code}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error} returns this
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error} returns this
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response} returns this
*/
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response} returns this
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes blob = 2;
 * @return {string}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.prototype.getBlob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes blob = 2;
 * This is a type-conversion wrapper around `getBlob()`
 * @return {string}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.prototype.getBlob_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlob()));
};


/**
 * optional bytes blob = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlob()`
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.prototype.getBlob_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlob()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response} returns this
 */
proto.anytype.Rpc.Ipfs.Image.Get.Blob.Response.prototype.setBlob = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Ipfs.Image.Get.File.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.File} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.File}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Ipfs.Image.Get.File;
  return proto.anytype.Rpc.Ipfs.Image.Get.File.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.File} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.File}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Ipfs.Image.Get.File.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.File} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Ipfs.Image.Get.File.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.File.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    wantwidth: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.File.Request}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Ipfs.Image.Get.File.Request;
  return proto.anytype.Rpc.Ipfs.Image.Get.File.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.File.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.File.Request}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWantwidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Ipfs.Image.Get.File.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.File.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWantwidth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Request.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.File.Request} returns this
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Request.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 wantWidth = 2;
 * @return {number}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Request.prototype.getWantwidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.File.Request} returns this
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Request.prototype.setWantwidth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Ipfs.Image.Get.File.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.File.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.toObject(includeInstance, f),
    localpath: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.File.Response}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Ipfs.Image.Get.File.Response;
  return proto.anytype.Rpc.Ipfs.Image.Get.File.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.File.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.File.Response}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalpath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Ipfs.Image.Get.File.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.File.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getLocalpath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error;
  return proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2,
  NOT_FOUND: 101,
  TIMEOUT: 102,
  NODE_NOT_STARTED: 103
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.Code}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error} returns this
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error} returns this
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Ipfs.Image.Get.File.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.File.Response} returns this
*/
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.File.Response} returns this
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string localPath = 2;
 * @return {string}
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.prototype.getLocalpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Ipfs.Image.Get.File.Response} returns this
 */
proto.anytype.Rpc.Ipfs.Image.Get.File.Response.prototype.setLocalpath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Shutdown.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Shutdown.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Shutdown} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Shutdown.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Shutdown}
 */
proto.anytype.Rpc.Shutdown.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Shutdown;
  return proto.anytype.Rpc.Shutdown.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Shutdown} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Shutdown}
 */
proto.anytype.Rpc.Shutdown.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Shutdown.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Shutdown.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Shutdown} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Shutdown.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Shutdown.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Shutdown.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Shutdown.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Shutdown.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Shutdown.Request}
 */
proto.anytype.Rpc.Shutdown.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Shutdown.Request;
  return proto.anytype.Rpc.Shutdown.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Shutdown.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Shutdown.Request}
 */
proto.anytype.Rpc.Shutdown.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Shutdown.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Shutdown.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Shutdown.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Shutdown.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Shutdown.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Shutdown.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Shutdown.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Shutdown.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Shutdown.Response.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Shutdown.Response}
 */
proto.anytype.Rpc.Shutdown.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Shutdown.Response;
  return proto.anytype.Rpc.Shutdown.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Shutdown.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Shutdown.Response}
 */
proto.anytype.Rpc.Shutdown.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Shutdown.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Shutdown.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Shutdown.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Shutdown.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Shutdown.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Shutdown.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Shutdown.Response.Error.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Shutdown.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Shutdown.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Shutdown.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Shutdown.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Shutdown.Response.Error}
 */
proto.anytype.Rpc.Shutdown.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Shutdown.Response.Error;
  return proto.anytype.Rpc.Shutdown.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Shutdown.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Shutdown.Response.Error}
 */
proto.anytype.Rpc.Shutdown.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Shutdown.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Shutdown.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Shutdown.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Shutdown.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Shutdown.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Shutdown.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2,
  NODE_NOT_STARTED: 101
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Shutdown.Response.Error.Code}
 */
proto.anytype.Rpc.Shutdown.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Shutdown.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Shutdown.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Shutdown.Response.Error} returns this
 */
proto.anytype.Rpc.Shutdown.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Shutdown.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Shutdown.Response.Error} returns this
 */
proto.anytype.Rpc.Shutdown.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Shutdown.Response.Error}
 */
proto.anytype.Rpc.Shutdown.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Shutdown.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Shutdown.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Shutdown.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Shutdown.Response} returns this
*/
proto.anytype.Rpc.Shutdown.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Shutdown.Response} returns this
 */
proto.anytype.Rpc.Shutdown.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Shutdown.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Config.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Config}
 */
proto.anytype.Rpc.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Config;
  return proto.anytype.Rpc.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Config}
 */
proto.anytype.Rpc.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Config.Get.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Config.Get.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Config.Get} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Config.Get.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Config.Get}
 */
proto.anytype.Rpc.Config.Get.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Config.Get;
  return proto.anytype.Rpc.Config.Get.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Config.Get} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Config.Get}
 */
proto.anytype.Rpc.Config.Get.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Config.Get.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Config.Get.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Config.Get} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Config.Get.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Config.Get.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Config.Get.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Config.Get.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Config.Get.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Config.Get.Request}
 */
proto.anytype.Rpc.Config.Get.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Config.Get.Request;
  return proto.anytype.Rpc.Config.Get.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Config.Get.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Config.Get.Request}
 */
proto.anytype.Rpc.Config.Get.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Config.Get.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Config.Get.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Config.Get.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Config.Get.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Config.Get.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Config.Get.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Config.Get.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Config.Get.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Config.Get.Response.Error.toObject(includeInstance, f),
    homeblockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    archiveblockid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    profileblockid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    gatewayurl: jspb.Message.getFieldWithDefault(msg, 101, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Config.Get.Response}
 */
proto.anytype.Rpc.Config.Get.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Config.Get.Response;
  return proto.anytype.Rpc.Config.Get.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Config.Get.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Config.Get.Response}
 */
proto.anytype.Rpc.Config.Get.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Config.Get.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Config.Get.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHomeblockid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setArchiveblockid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProfileblockid(value);
      break;
    case 101:
      var value = /** @type {string} */ (reader.readString());
      msg.setGatewayurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Config.Get.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Config.Get.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Config.Get.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Config.Get.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Config.Get.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getHomeblockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getArchiveblockid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getProfileblockid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGatewayurl();
  if (f.length > 0) {
    writer.writeString(
      101,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Config.Get.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Config.Get.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Config.Get.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Config.Get.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Config.Get.Response.Error}
 */
proto.anytype.Rpc.Config.Get.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Config.Get.Response.Error;
  return proto.anytype.Rpc.Config.Get.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Config.Get.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Config.Get.Response.Error}
 */
proto.anytype.Rpc.Config.Get.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Config.Get.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Config.Get.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Config.Get.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Config.Get.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Config.Get.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Config.Get.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2,
  NODE_NOT_STARTED: 101
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Config.Get.Response.Error.Code}
 */
proto.anytype.Rpc.Config.Get.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Config.Get.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Config.Get.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Config.Get.Response.Error} returns this
 */
proto.anytype.Rpc.Config.Get.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Config.Get.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Config.Get.Response.Error} returns this
 */
proto.anytype.Rpc.Config.Get.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Config.Get.Response.Error}
 */
proto.anytype.Rpc.Config.Get.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Config.Get.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Config.Get.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Config.Get.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Config.Get.Response} returns this
*/
proto.anytype.Rpc.Config.Get.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Config.Get.Response} returns this
 */
proto.anytype.Rpc.Config.Get.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Config.Get.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string homeBlockId = 2;
 * @return {string}
 */
proto.anytype.Rpc.Config.Get.Response.prototype.getHomeblockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Config.Get.Response} returns this
 */
proto.anytype.Rpc.Config.Get.Response.prototype.setHomeblockid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string archiveBlockId = 3;
 * @return {string}
 */
proto.anytype.Rpc.Config.Get.Response.prototype.getArchiveblockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Config.Get.Response} returns this
 */
proto.anytype.Rpc.Config.Get.Response.prototype.setArchiveblockid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string profileBlockId = 4;
 * @return {string}
 */
proto.anytype.Rpc.Config.Get.Response.prototype.getProfileblockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Config.Get.Response} returns this
 */
proto.anytype.Rpc.Config.Get.Response.prototype.setProfileblockid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string gatewayUrl = 101;
 * @return {string}
 */
proto.anytype.Rpc.Config.Get.Response.prototype.getGatewayurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 101, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Config.Get.Response} returns this
 */
proto.anytype.Rpc.Config.Get.Response.prototype.setGatewayurl = function(value) {
  return jspb.Message.setProto3StringField(this, 101, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Ping.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ping.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Ping}
 */
proto.anytype.Rpc.Ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Ping;
  return proto.anytype.Rpc.Ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Ping}
 */
proto.anytype.Rpc.Ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Ping.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Ping.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Ping.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ping.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    numberofeventstosend: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Ping.Request}
 */
proto.anytype.Rpc.Ping.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Ping.Request;
  return proto.anytype.Rpc.Ping.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Ping.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Ping.Request}
 */
proto.anytype.Rpc.Ping.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumberofeventstosend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ping.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Ping.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Ping.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ping.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNumberofeventstosend();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 index = 1;
 * @return {number}
 */
proto.anytype.Rpc.Ping.Request.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.anytype.Rpc.Ping.Request} returns this
 */
proto.anytype.Rpc.Ping.Request.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 numberOfEventsToSend = 2;
 * @return {number}
 */
proto.anytype.Rpc.Ping.Request.prototype.getNumberofeventstosend = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.anytype.Rpc.Ping.Request} returns this
 */
proto.anytype.Rpc.Ping.Request.prototype.setNumberofeventstosend = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Ping.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Ping.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Ping.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ping.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Ping.Response.Error.toObject(includeInstance, f),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Ping.Response}
 */
proto.anytype.Rpc.Ping.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Ping.Response;
  return proto.anytype.Rpc.Ping.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Ping.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Ping.Response}
 */
proto.anytype.Rpc.Ping.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Ping.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Ping.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ping.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Ping.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Ping.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ping.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Ping.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Ping.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Ping.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Ping.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ping.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Ping.Response.Error}
 */
proto.anytype.Rpc.Ping.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Ping.Response.Error;
  return proto.anytype.Rpc.Ping.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Ping.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Ping.Response.Error}
 */
proto.anytype.Rpc.Ping.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Ping.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Ping.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Ping.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Ping.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Ping.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Ping.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Ping.Response.Error.Code}
 */
proto.anytype.Rpc.Ping.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Ping.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Ping.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Ping.Response.Error} returns this
 */
proto.anytype.Rpc.Ping.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Ping.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Ping.Response.Error} returns this
 */
proto.anytype.Rpc.Ping.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Ping.Response.Error}
 */
proto.anytype.Rpc.Ping.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Ping.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Ping.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Ping.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Ping.Response} returns this
*/
proto.anytype.Rpc.Ping.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Ping.Response} returns this
 */
proto.anytype.Rpc.Ping.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Ping.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 index = 2;
 * @return {number}
 */
proto.anytype.Rpc.Ping.Response.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.anytype.Rpc.Ping.Response} returns this
 */
proto.anytype.Rpc.Ping.Response.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Process.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Process.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Process} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Process.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Process}
 */
proto.anytype.Rpc.Process.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Process;
  return proto.anytype.Rpc.Process.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Process} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Process}
 */
proto.anytype.Rpc.Process.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Process.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Process.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Process} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Process.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Process.Cancel.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Process.Cancel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Process.Cancel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Process.Cancel.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Process.Cancel}
 */
proto.anytype.Rpc.Process.Cancel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Process.Cancel;
  return proto.anytype.Rpc.Process.Cancel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Process.Cancel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Process.Cancel}
 */
proto.anytype.Rpc.Process.Cancel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Process.Cancel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Process.Cancel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Process.Cancel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Process.Cancel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Process.Cancel.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Process.Cancel.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Process.Cancel.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Process.Cancel.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Process.Cancel.Request}
 */
proto.anytype.Rpc.Process.Cancel.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Process.Cancel.Request;
  return proto.anytype.Rpc.Process.Cancel.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Process.Cancel.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Process.Cancel.Request}
 */
proto.anytype.Rpc.Process.Cancel.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Process.Cancel.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Process.Cancel.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Process.Cancel.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Process.Cancel.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.anytype.Rpc.Process.Cancel.Request.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Process.Cancel.Request} returns this
 */
proto.anytype.Rpc.Process.Cancel.Request.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Process.Cancel.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Process.Cancel.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Process.Cancel.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Process.Cancel.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Process.Cancel.Response.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Process.Cancel.Response}
 */
proto.anytype.Rpc.Process.Cancel.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Process.Cancel.Response;
  return proto.anytype.Rpc.Process.Cancel.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Process.Cancel.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Process.Cancel.Response}
 */
proto.anytype.Rpc.Process.Cancel.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Process.Cancel.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Process.Cancel.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Process.Cancel.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Process.Cancel.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Process.Cancel.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Process.Cancel.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Process.Cancel.Response.Error.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Process.Cancel.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Process.Cancel.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Process.Cancel.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Process.Cancel.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Process.Cancel.Response.Error}
 */
proto.anytype.Rpc.Process.Cancel.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Process.Cancel.Response.Error;
  return proto.anytype.Rpc.Process.Cancel.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Process.Cancel.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Process.Cancel.Response.Error}
 */
proto.anytype.Rpc.Process.Cancel.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Process.Cancel.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Process.Cancel.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Process.Cancel.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Process.Cancel.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Process.Cancel.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Process.Cancel.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Process.Cancel.Response.Error.Code}
 */
proto.anytype.Rpc.Process.Cancel.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Process.Cancel.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Process.Cancel.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Process.Cancel.Response.Error} returns this
 */
proto.anytype.Rpc.Process.Cancel.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Process.Cancel.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Process.Cancel.Response.Error} returns this
 */
proto.anytype.Rpc.Process.Cancel.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Process.Cancel.Response.Error}
 */
proto.anytype.Rpc.Process.Cancel.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Process.Cancel.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Process.Cancel.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Process.Cancel.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Process.Cancel.Response} returns this
*/
proto.anytype.Rpc.Process.Cancel.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Process.Cancel.Response} returns this
 */
proto.anytype.Rpc.Process.Cancel.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Process.Cancel.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.LinkPreview.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.LinkPreview.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.LinkPreview} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.LinkPreview.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.LinkPreview}
 */
proto.anytype.Rpc.LinkPreview.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.LinkPreview;
  return proto.anytype.Rpc.LinkPreview.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.LinkPreview} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.LinkPreview}
 */
proto.anytype.Rpc.LinkPreview.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.LinkPreview.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.LinkPreview.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.LinkPreview} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.LinkPreview.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.LinkPreview.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.LinkPreview.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.LinkPreview.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.LinkPreview.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.LinkPreview.Request}
 */
proto.anytype.Rpc.LinkPreview.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.LinkPreview.Request;
  return proto.anytype.Rpc.LinkPreview.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.LinkPreview.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.LinkPreview.Request}
 */
proto.anytype.Rpc.LinkPreview.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.LinkPreview.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.LinkPreview.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.LinkPreview.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.LinkPreview.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.anytype.Rpc.LinkPreview.Request.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.LinkPreview.Request} returns this
 */
proto.anytype.Rpc.LinkPreview.Request.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.LinkPreview.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.LinkPreview.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.LinkPreview.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.LinkPreview.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.LinkPreview.Response.Error.toObject(includeInstance, f),
    linkpreview: (f = msg.getLinkpreview()) && vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.LinkPreview.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.LinkPreview.Response}
 */
proto.anytype.Rpc.LinkPreview.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.LinkPreview.Response;
  return proto.anytype.Rpc.LinkPreview.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.LinkPreview.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.LinkPreview.Response}
 */
proto.anytype.Rpc.LinkPreview.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.LinkPreview.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.LinkPreview.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.LinkPreview;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.LinkPreview.deserializeBinaryFromReader);
      msg.setLinkpreview(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.LinkPreview.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.LinkPreview.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.LinkPreview.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.LinkPreview.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.LinkPreview.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getLinkpreview();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.LinkPreview.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.LinkPreview.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.LinkPreview.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.LinkPreview.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.LinkPreview.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.LinkPreview.Response.Error}
 */
proto.anytype.Rpc.LinkPreview.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.LinkPreview.Response.Error;
  return proto.anytype.Rpc.LinkPreview.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.LinkPreview.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.LinkPreview.Response.Error}
 */
proto.anytype.Rpc.LinkPreview.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.LinkPreview.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.LinkPreview.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.LinkPreview.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.LinkPreview.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.LinkPreview.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.LinkPreview.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.LinkPreview.Response.Error.Code}
 */
proto.anytype.Rpc.LinkPreview.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.LinkPreview.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.LinkPreview.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.LinkPreview.Response.Error} returns this
 */
proto.anytype.Rpc.LinkPreview.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.LinkPreview.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.LinkPreview.Response.Error} returns this
 */
proto.anytype.Rpc.LinkPreview.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.LinkPreview.Response.Error}
 */
proto.anytype.Rpc.LinkPreview.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.LinkPreview.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.LinkPreview.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.LinkPreview.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.LinkPreview.Response} returns this
*/
proto.anytype.Rpc.LinkPreview.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.LinkPreview.Response} returns this
 */
proto.anytype.Rpc.LinkPreview.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.LinkPreview.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional model.LinkPreview linkPreview = 2;
 * @return {?proto.anytype.model.LinkPreview}
 */
proto.anytype.Rpc.LinkPreview.Response.prototype.getLinkpreview = function() {
  return /** @type{?proto.anytype.model.LinkPreview} */ (
    jspb.Message.getWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_models_pb.LinkPreview, 2));
};


/**
 * @param {?proto.anytype.model.LinkPreview|undefined} value
 * @return {!proto.anytype.Rpc.LinkPreview.Response} returns this
*/
proto.anytype.Rpc.LinkPreview.Response.prototype.setLinkpreview = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.LinkPreview.Response} returns this
 */
proto.anytype.Rpc.LinkPreview.Response.prototype.clearLinkpreview = function() {
  return this.setLinkpreview(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.LinkPreview.Response.prototype.hasLinkpreview = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.UploadFile.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.UploadFile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.UploadFile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.UploadFile.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.UploadFile}
 */
proto.anytype.Rpc.UploadFile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.UploadFile;
  return proto.anytype.Rpc.UploadFile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.UploadFile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.UploadFile}
 */
proto.anytype.Rpc.UploadFile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.UploadFile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.UploadFile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.UploadFile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.UploadFile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.UploadFile.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.UploadFile.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.UploadFile.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.UploadFile.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    localpath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    disableencryption: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.UploadFile.Request}
 */
proto.anytype.Rpc.UploadFile.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.UploadFile.Request;
  return proto.anytype.Rpc.UploadFile.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.UploadFile.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.UploadFile.Request}
 */
proto.anytype.Rpc.UploadFile.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalpath(value);
      break;
    case 3:
      var value = /** @type {!proto.anytype.model.Block.Content.File.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableencryption(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.UploadFile.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.UploadFile.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.UploadFile.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.UploadFile.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLocalpath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getDisableencryption();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.anytype.Rpc.UploadFile.Request.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.UploadFile.Request} returns this
 */
proto.anytype.Rpc.UploadFile.Request.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string localPath = 2;
 * @return {string}
 */
proto.anytype.Rpc.UploadFile.Request.prototype.getLocalpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.UploadFile.Request} returns this
 */
proto.anytype.Rpc.UploadFile.Request.prototype.setLocalpath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional model.Block.Content.File.Type type = 3;
 * @return {!proto.anytype.model.Block.Content.File.Type}
 */
proto.anytype.Rpc.UploadFile.Request.prototype.getType = function() {
  return /** @type {!proto.anytype.model.Block.Content.File.Type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.anytype.model.Block.Content.File.Type} value
 * @return {!proto.anytype.Rpc.UploadFile.Request} returns this
 */
proto.anytype.Rpc.UploadFile.Request.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool disableEncryption = 4;
 * @return {boolean}
 */
proto.anytype.Rpc.UploadFile.Request.prototype.getDisableencryption = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.anytype.Rpc.UploadFile.Request} returns this
 */
proto.anytype.Rpc.UploadFile.Request.prototype.setDisableencryption = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.UploadFile.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.UploadFile.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.UploadFile.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.UploadFile.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.UploadFile.Response.Error.toObject(includeInstance, f),
    hash: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.UploadFile.Response}
 */
proto.anytype.Rpc.UploadFile.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.UploadFile.Response;
  return proto.anytype.Rpc.UploadFile.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.UploadFile.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.UploadFile.Response}
 */
proto.anytype.Rpc.UploadFile.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.UploadFile.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.UploadFile.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.UploadFile.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.UploadFile.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.UploadFile.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.UploadFile.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.UploadFile.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.UploadFile.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.UploadFile.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.UploadFile.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.UploadFile.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.UploadFile.Response.Error}
 */
proto.anytype.Rpc.UploadFile.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.UploadFile.Response.Error;
  return proto.anytype.Rpc.UploadFile.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.UploadFile.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.UploadFile.Response.Error}
 */
proto.anytype.Rpc.UploadFile.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.UploadFile.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.UploadFile.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.UploadFile.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.UploadFile.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.UploadFile.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.UploadFile.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.UploadFile.Response.Error.Code}
 */
proto.anytype.Rpc.UploadFile.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.UploadFile.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.UploadFile.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.UploadFile.Response.Error} returns this
 */
proto.anytype.Rpc.UploadFile.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.UploadFile.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.UploadFile.Response.Error} returns this
 */
proto.anytype.Rpc.UploadFile.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.UploadFile.Response.Error}
 */
proto.anytype.Rpc.UploadFile.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.UploadFile.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.UploadFile.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.UploadFile.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.UploadFile.Response} returns this
*/
proto.anytype.Rpc.UploadFile.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.UploadFile.Response} returns this
 */
proto.anytype.Rpc.UploadFile.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.UploadFile.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string hash = 2;
 * @return {string}
 */
proto.anytype.Rpc.UploadFile.Response.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.UploadFile.Response} returns this
 */
proto.anytype.Rpc.UploadFile.Response.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Navigation.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Navigation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Navigation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Navigation.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Navigation}
 */
proto.anytype.Rpc.Navigation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Navigation;
  return proto.anytype.Rpc.Navigation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Navigation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Navigation}
 */
proto.anytype.Rpc.Navigation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Navigation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Navigation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Navigation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Navigation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Navigation.ListPages.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Navigation.ListPages.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Navigation.ListPages} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Navigation.ListPages.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Navigation.ListPages}
 */
proto.anytype.Rpc.Navigation.ListPages.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Navigation.ListPages;
  return proto.anytype.Rpc.Navigation.ListPages.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Navigation.ListPages} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Navigation.ListPages}
 */
proto.anytype.Rpc.Navigation.ListPages.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Navigation.ListPages.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Navigation.ListPages.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Navigation.ListPages} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Navigation.ListPages.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Navigation.ListPages.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Navigation.ListPages.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Navigation.ListPages.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Navigation.ListPages.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Navigation.ListPages.Request}
 */
proto.anytype.Rpc.Navigation.ListPages.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Navigation.ListPages.Request;
  return proto.anytype.Rpc.Navigation.ListPages.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Navigation.ListPages.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Navigation.ListPages.Request}
 */
proto.anytype.Rpc.Navigation.ListPages.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Navigation.ListPages.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Navigation.ListPages.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Navigation.ListPages.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Navigation.ListPages.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anytype.Rpc.Navigation.ListPages.Response.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Navigation.ListPages.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Navigation.ListPages.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Navigation.ListPages.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Navigation.ListPages.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Navigation.ListPages.Response.Error.toObject(includeInstance, f),
    pagesList: jspb.Message.toObjectList(msg.getPagesList(),
    vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_localstore_pb.PageInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Navigation.ListPages.Response}
 */
proto.anytype.Rpc.Navigation.ListPages.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Navigation.ListPages.Response;
  return proto.anytype.Rpc.Navigation.ListPages.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Navigation.ListPages.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Navigation.ListPages.Response}
 */
proto.anytype.Rpc.Navigation.ListPages.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Navigation.ListPages.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Navigation.ListPages.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_localstore_pb.PageInfo;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_localstore_pb.PageInfo.deserializeBinaryFromReader);
      msg.addPages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Navigation.ListPages.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Navigation.ListPages.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Navigation.ListPages.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Navigation.ListPages.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Navigation.ListPages.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getPagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_localstore_pb.PageInfo.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Navigation.ListPages.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Navigation.ListPages.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Navigation.ListPages.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Navigation.ListPages.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Navigation.ListPages.Response.Error}
 */
proto.anytype.Rpc.Navigation.ListPages.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Navigation.ListPages.Response.Error;
  return proto.anytype.Rpc.Navigation.ListPages.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Navigation.ListPages.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Navigation.ListPages.Response.Error}
 */
proto.anytype.Rpc.Navigation.ListPages.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Navigation.ListPages.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Navigation.ListPages.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Navigation.ListPages.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Navigation.ListPages.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Navigation.ListPages.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Navigation.ListPages.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Navigation.ListPages.Response.Error.Code}
 */
proto.anytype.Rpc.Navigation.ListPages.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Navigation.ListPages.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Navigation.ListPages.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Navigation.ListPages.Response.Error} returns this
 */
proto.anytype.Rpc.Navigation.ListPages.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Navigation.ListPages.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Navigation.ListPages.Response.Error} returns this
 */
proto.anytype.Rpc.Navigation.ListPages.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Navigation.ListPages.Response.Error}
 */
proto.anytype.Rpc.Navigation.ListPages.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Navigation.ListPages.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Navigation.ListPages.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Navigation.ListPages.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Navigation.ListPages.Response} returns this
*/
proto.anytype.Rpc.Navigation.ListPages.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Navigation.ListPages.Response} returns this
 */
proto.anytype.Rpc.Navigation.ListPages.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Navigation.ListPages.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated model.PageInfo pages = 2;
 * @return {!Array<!proto.anytype.model.PageInfo>}
 */
proto.anytype.Rpc.Navigation.ListPages.Response.prototype.getPagesList = function() {
  return /** @type{!Array<!proto.anytype.model.PageInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_localstore_pb.PageInfo, 2));
};


/**
 * @param {!Array<!proto.anytype.model.PageInfo>} value
 * @return {!proto.anytype.Rpc.Navigation.ListPages.Response} returns this
*/
proto.anytype.Rpc.Navigation.ListPages.Response.prototype.setPagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.anytype.model.PageInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.anytype.model.PageInfo}
 */
proto.anytype.Rpc.Navigation.ListPages.Response.prototype.addPages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.anytype.model.PageInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anytype.Rpc.Navigation.ListPages.Response} returns this
 */
proto.anytype.Rpc.Navigation.ListPages.Response.prototype.clearPagesList = function() {
  return this.setPagesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Navigation.GetPageInfoWithLinks;
  return proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request;
  return proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string pageId = 1;
 * @return {string}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request.prototype.getPageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request} returns this
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Request.prototype.setPageid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.toObject(includeInstance, f),
    page: (f = msg.getPage()) && vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_localstore_pb.PageInfoWithLinks.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response;
  return proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error;
      reader.readMessage(value,proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_localstore_pb.PageInfoWithLinks;
      reader.readMessage(value,vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_localstore_pb.PageInfoWithLinks.deserializeBinaryFromReader);
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getPage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_localstore_pb.PageInfoWithLinks.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error;
  return proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.Code = {
  NULL: 0,
  UNKNOWN_ERROR: 1,
  BAD_INPUT: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.Code}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.prototype.getCode = function() {
  return /** @type {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.Code} value
 * @return {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error} returns this
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error} returns this
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.prototype.getError = function() {
  return /** @type{?proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error, 1));
};


/**
 * @param {?proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.Error|undefined} value
 * @return {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response} returns this
*/
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response} returns this
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional model.PageInfoWithLinks page = 2;
 * @return {?proto.anytype.model.PageInfoWithLinks}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.prototype.getPage = function() {
  return /** @type{?proto.anytype.model.PageInfoWithLinks} */ (
    jspb.Message.getWrapperField(this, vendor_github_com_anytypeio_go$anytype$library_pb_model_protos_localstore_pb.PageInfoWithLinks, 2));
};


/**
 * @param {?proto.anytype.model.PageInfoWithLinks|undefined} value
 * @return {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response} returns this
*/
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.prototype.setPage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response} returns this
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.prototype.clearPage = function() {
  return this.setPage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anytype.Rpc.Navigation.GetPageInfoWithLinks.Response.prototype.hasPage = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anytype.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.anytype.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anytype.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anytype.Empty}
 */
proto.anytype.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anytype.Empty;
  return proto.anytype.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anytype.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anytype.Empty}
 */
proto.anytype.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anytype.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anytype.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anytype.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anytype.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.anytype);
